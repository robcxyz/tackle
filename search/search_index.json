{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Tackle-box Docs \u00b6 Tackle box is a declarative DSL for building modular utilities and code generators. Tool is plugins based and can easily be extended by writing additional hooks or importing external providers creating a web of interoperable CLIs. Installation Use Cases Project Structure Calling from Command Line Creating Providers Using Providers Writing Tackle Files Hook Methods Writing Hooks Testing Providers Tackle File Examples Tutorials Provider Docs","title":"Tackle-box"},{"location":"#tackle-box-docs","text":"Tackle box is a declarative DSL for building modular utilities and code generators. Tool is plugins based and can easily be extended by writing additional hooks or importing external providers creating a web of interoperable CLIs. Installation Use Cases Project Structure Calling from Command Line Creating Providers Using Providers Writing Tackle Files Hook Methods Writing Hooks Testing Providers Tackle File Examples Tutorials Provider Docs","title":"Tackle-box Docs"},{"location":"HISTORY/","text":"History \u00b6 Tackle Box was originally intended to stay in line with cookiecutter until there were simply too many differences for the changes to be reconciled. Any changes to cookiecutter will be brought over to maintain compatibility though the two tools are now split. The cookiecutter history can be viewed in the project tab and HISTORY.md Tackle Box History \u00b6 v0.1.0 (2020-12-X) \u00b6 Added providers and moved all operators into hooks Cookiecutter History \u00b6 Prior to permanently splitting into Tackle Box. 2.0.0.3 (2020-8-5) \u00b6 Added tracking of whether reading cookiecutter.* context files which then informs whether the rendered values are interpretted literally or as strings. Maintains support for old style rendering where users relied on having the lists, dicts, and booleans render as strings vs literals. 2.0.0.2 (2020-8-4) \u00b6 Modified yaml operator adding several methods Refactor list to select operator Added web, copy, move, dicts, lists operators 2.0.0.1 (2020-07-28) \u00b6 Added special variable calling_directory to preserve path regardless of context changing in remote tackle calls. Fixing listdir and list operators 2.0.0.0 (2020-07-27) \u00b6 Added no_input to operator level discovery Added basic AWS, GCP, Azure, and DigitalOcean operators Extended yaml operator to have regex remove, update, and merging functionalities both in place and on write. Default template input to main to . . Added index to loop to output count in loop. Added index parameter to list and checkbox pyinquirer operators. Merged changes as of this date from cookiecutter 2.0.0 Added numerous new operators Added warning for unknown operator type Added chdir to operator allowing temporary working directory context to be shifted Added block operator which uncovered defficiencies in how we are currently handling the running of the context in the operators 1.7.2.3 (2020-06-23) \u00b6 Breaking change - main function returns context instead of result_directory. This makes it much easier to use when stitching cookiecutters together as now the context can be kept namespaced per the actual context they are being called in. This change only affects tests and those using the package as a function. The idea is that the output directory can be resolved out of scope and does not need to be returned. Added yaml support Added context_key variable. Now this defaults to the name of the context_file without the extension. Can be overridden in cli Added listdir, split, Added coverage over non-pty requiring operators Convert many tests to run both from tox and local - broke test_cookiecutter_no_input_return_project_dir 1.7.2.2 (2020-06-15) \u00b6 Fixed operator call order and postgen operator logic for delayed operators Added proper metadata to setup.py Fixed compatibility with py3.6 1.7.2.1 (2020-06-01) \u00b6 Fixed some packaging issue 1.7.2.0 (2020-06-01) First release on pypi \u00b6 Added operator import logic Catch inputs of dict with type to inform operator Added dict and list output after jinja rendering Add when and loop conditionals Added pyinquirer operators and other basic ones like command","title":"History"},{"location":"HISTORY/#history","text":"Tackle Box was originally intended to stay in line with cookiecutter until there were simply too many differences for the changes to be reconciled. Any changes to cookiecutter will be brought over to maintain compatibility though the two tools are now split. The cookiecutter history can be viewed in the project tab and HISTORY.md","title":"History"},{"location":"HISTORY/#tackle-box-history","text":"","title":"Tackle Box History"},{"location":"HISTORY/#v010-2020-12-x","text":"Added providers and moved all operators into hooks","title":"v0.1.0 (2020-12-X)"},{"location":"HISTORY/#cookiecutter-history","text":"Prior to permanently splitting into Tackle Box.","title":"Cookiecutter History"},{"location":"HISTORY/#2003-2020-8-5","text":"Added tracking of whether reading cookiecutter.* context files which then informs whether the rendered values are interpretted literally or as strings. Maintains support for old style rendering where users relied on having the lists, dicts, and booleans render as strings vs literals.","title":"2.0.0.3 (2020-8-5)"},{"location":"HISTORY/#2002-2020-8-4","text":"Modified yaml operator adding several methods Refactor list to select operator Added web, copy, move, dicts, lists operators","title":"2.0.0.2 (2020-8-4)"},{"location":"HISTORY/#2001-2020-07-28","text":"Added special variable calling_directory to preserve path regardless of context changing in remote tackle calls. Fixing listdir and list operators","title":"2.0.0.1 (2020-07-28)"},{"location":"HISTORY/#2000-2020-07-27","text":"Added no_input to operator level discovery Added basic AWS, GCP, Azure, and DigitalOcean operators Extended yaml operator to have regex remove, update, and merging functionalities both in place and on write. Default template input to main to . . Added index to loop to output count in loop. Added index parameter to list and checkbox pyinquirer operators. Merged changes as of this date from cookiecutter 2.0.0 Added numerous new operators Added warning for unknown operator type Added chdir to operator allowing temporary working directory context to be shifted Added block operator which uncovered defficiencies in how we are currently handling the running of the context in the operators","title":"2.0.0.0 (2020-07-27)"},{"location":"HISTORY/#1723-2020-06-23","text":"Breaking change - main function returns context instead of result_directory. This makes it much easier to use when stitching cookiecutters together as now the context can be kept namespaced per the actual context they are being called in. This change only affects tests and those using the package as a function. The idea is that the output directory can be resolved out of scope and does not need to be returned. Added yaml support Added context_key variable. Now this defaults to the name of the context_file without the extension. Can be overridden in cli Added listdir, split, Added coverage over non-pty requiring operators Convert many tests to run both from tox and local - broke test_cookiecutter_no_input_return_project_dir","title":"1.7.2.3 (2020-06-23)"},{"location":"HISTORY/#1722-2020-06-15","text":"Fixed operator call order and postgen operator logic for delayed operators Added proper metadata to setup.py Fixed compatibility with py3.6","title":"1.7.2.2 (2020-06-15)"},{"location":"HISTORY/#1721-2020-06-01","text":"Fixed some packaging issue","title":"1.7.2.1 (2020-06-01)"},{"location":"HISTORY/#1720-2020-06-01-first-release-on-pypi","text":"Added operator import logic Catch inputs of dict with type to inform operator Added dict and list output after jinja rendering Add when and loop conditionals Added pyinquirer operators and other basic ones like command","title":"1.7.2.0 (2020-06-01) First release on pypi"},{"location":"authors/","text":"Credits \u00b6 Tackle Box Devs \u00b6 Development Leads \u00b6 Rob Cannon ( @robcxyz ) Contributors \u00b6 Richard Mah ( @shinyfoil ) Cookiecutter Devs \u00b6 Development Leads \u00b6 Audrey Roy Greenfeld ( @audreyr ) Daniel Roy Greenfeld ( @pydanny ) Raphael Pierzina ( @hackebrot ) Core Committers \u00b6 Michael Joseph ( @michaeljoseph ) Paul Moore ( @pfmoore ) Andrey Shpak ( @insspb ) Sorin Sbarnea ( @ssbarnea ) F\u00e1bio C. Barrionuevo da Luz ( @luzfcb ) Contributors \u00b6 Steven Loria ( @sloria ) Goran Peretin ( @gperetin ) Hamish Downer ( @foobacca ) Thomas Orozco ( @krallin ) Jindrich Smitka ( @s-m-i-t-a ) Benjamin Schwarze ( @benjixx ) Raphi ( @raphigaziano ) Thomas Chiroux ( @ThomasChiroux ) Sergi Almacellas Abellana ( @pokoli ) Alex Gaynor ( @alex ) Rolo ( @rolo ) Pablo ( @oubiga ) Bruno Rocha ( @rochacbruno ) Alexander Artemenko ( @svetlyak40wt ) Mahmoud Abdelkader ( @mahmoudimus ) Leonardo Borges Avelino ( @lborgav ) Chris Trotman ( @solarnz ) Rolf ( @relekang ) Noah Kantrowitz ( @coderanger ) Vincent Bernat ( @vincentbernat ) Germ\u00e1n Moya ( @pbacterio ) Ned Batchelder ( @nedbat ) Dave Dash ( @davedash ) Johan Charpentier ( @cyberj ) \u00c9ric Araujo ( @merwok ) saxix ( @saxix ) Tzu-ping Chung ( @uranusjr ) Caleb Hattingh ( @cjrh ) Flavio Curella ( @fcurella ) Adam Venturella ( @aventurella ) Monty Taylor ( @emonty ) schacki ( @schacki ) Ryan Olson ( @ryanolson ) Trey Hunner ( @treyhunner ) Russell Keith-Magee ( @freakboy3742 ) Mishbah Razzaque ( @mishbahr ) Robin Andeer ( @robinandeer ) Rachel Sanders ( @trustrachel ) R\u00e9my Hubscher ( @Natim ) Dino Petron3 ( @dinopetrone ) Peter Inglesby ( @inglesp ) Ramiro Batista da Luz ( @ramiroluz ) Omer Katz ( @thedrow ) lord63 ( @lord63 ) Randy Syring ( @rsyring ) Mark Jones ( @mark0978 ) Marc Abramowitz ( @msabramo ) Lucian Ursu ( @LucianU ) Osvaldo Santana Neto ( @osantana ) Matthias84 ( @Matthias84 ) Simeon Visser ( @svisser ) Guruprasad ( @lgp171188 ) Charles-Axel Dein ( @charlax ) Diego Garcia ( @drgarcia1986 ) maiksensi ( @maiksensi ) Andrew Conti ( @agconti ) Valentin Lab ( @vaab ) Ilja Bauer ( @iljabauer ) Elias Dorneles ( @eliasdorneles ) Matias Saguir ( @mativs ) Johannes ( @johtso ) macrotim ( @macrotim ) Will McGinnis ( @wdm0006 ) C\u00e9dric Krier ( @cedk ) Tim Osborn ( @ptim ) Aaron Gallagher ( @habnabit ) mozillazg ( @mozillazg ) Joachim Jablon ( @ewjoachim ) Andrew Ittner ( @tephyr ) Diane DeMers Chen ( @purplediane ) zzzirk ( @zzzirk ) Carol Willing ( @willingc ) phoebebauer ( @phoebebauer ) Adam Chainz ( @adamchainz ) Sul\u00e9 ( @suledev ) Evan Palmer ( @palmerev ) Bruce Eckel ( @BruceEckel ) Robert Lyon ( @ivanlyon ) Terry Bates ( @terryjbates ) Brett Cannon ( @brettcannon ) Michael Warkentin ( @mwarkentin ) Bart\u0142omiej Kurzeja ( @B3QL ) Thomas O'Donnell ( @andytom ) Jeremy Carbaugh ( @jcarbaugh ) Nathan Cheung ( @cheungnj ) Abd\u00f3 Roig-Maranges ( @aroig ) Steve Piercy ( @stevepiercy ) Corey ( @coreysnyder04 ) Dmitry Evstratov ( @devstrat ) Eyal Levin ( @eyalev ) mathagician ( @mathagician ) Guillaume Gelin ( @ramnes ) @delirious-lettuce ( @delirious-lettuce ) Gasper Vozel ( @karantan ) Joshua Carp ( @jmcarp ) @meahow ( @meahow ) Andrea Grandi ( @andreagrandi ) Issa Jubril ( @jubrilissa ) Nytiennzo Madooray ( @Nythiennzo ) Erik Bachorski ( @dornheimer ) cclauss ( @cclauss ) Andy Craze ( @accraze ) Anthony Sottile ( @asottile ) Jonathan Sick ( @jonathansick ) Hugo ( @hugovk ) Min ho Kim ( @minho42 ) Ryan Ly ( @rly ) Akintola Rahmat ( @mihrab34 ) Jai Ram Rideout ( @jairideout ) Diego Carrasco Gubernatis ( @dacog ) Wagner Negr\u00e3o ( @wagnernegrao ) Josh Barnes ( @jcb91 ) Nikita Sobolev ( @sobolevn ) Matt Stibbs ( @mattstibbs ) MinchinWeb ( @MinchinWeb ) kishan ( @kishan ) tonytheleg ( @tonytheleg ) Roman Hartmann ( @RomHartmann ) DSEnvel ( @DSEnvel ) kishan ( @kishan ) Bruno Alla ( @browniebroke ) nicain ( @nicain ) Carsten R\u00f6snick-Neugebauer ( @croesnick ) igorbasko01 ( @igorbasko01 ) Dan Booth Dev ( @DanBoothDev ) Pablo Panero ( @ppanero ) Chuan-Heng Hsiao ( @chhsiao1981 ) Mohammad Hossein Sekhavat ( @mhsekhavat ) Amey Joshi ( @amey589 ) Paul Harrison ( @smoothml )","title":"Authors"},{"location":"authors/#credits","text":"","title":"Credits"},{"location":"authors/#tackle-box-devs","text":"","title":"Tackle Box Devs"},{"location":"authors/#development-leads","text":"Rob Cannon ( @robcxyz )","title":"Development Leads"},{"location":"authors/#contributors","text":"Richard Mah ( @shinyfoil )","title":"Contributors"},{"location":"authors/#cookiecutter-devs","text":"","title":"Cookiecutter Devs"},{"location":"authors/#development-leads_1","text":"Audrey Roy Greenfeld ( @audreyr ) Daniel Roy Greenfeld ( @pydanny ) Raphael Pierzina ( @hackebrot )","title":"Development Leads"},{"location":"authors/#core-committers","text":"Michael Joseph ( @michaeljoseph ) Paul Moore ( @pfmoore ) Andrey Shpak ( @insspb ) Sorin Sbarnea ( @ssbarnea ) F\u00e1bio C. Barrionuevo da Luz ( @luzfcb )","title":"Core Committers"},{"location":"authors/#contributors_1","text":"Steven Loria ( @sloria ) Goran Peretin ( @gperetin ) Hamish Downer ( @foobacca ) Thomas Orozco ( @krallin ) Jindrich Smitka ( @s-m-i-t-a ) Benjamin Schwarze ( @benjixx ) Raphi ( @raphigaziano ) Thomas Chiroux ( @ThomasChiroux ) Sergi Almacellas Abellana ( @pokoli ) Alex Gaynor ( @alex ) Rolo ( @rolo ) Pablo ( @oubiga ) Bruno Rocha ( @rochacbruno ) Alexander Artemenko ( @svetlyak40wt ) Mahmoud Abdelkader ( @mahmoudimus ) Leonardo Borges Avelino ( @lborgav ) Chris Trotman ( @solarnz ) Rolf ( @relekang ) Noah Kantrowitz ( @coderanger ) Vincent Bernat ( @vincentbernat ) Germ\u00e1n Moya ( @pbacterio ) Ned Batchelder ( @nedbat ) Dave Dash ( @davedash ) Johan Charpentier ( @cyberj ) \u00c9ric Araujo ( @merwok ) saxix ( @saxix ) Tzu-ping Chung ( @uranusjr ) Caleb Hattingh ( @cjrh ) Flavio Curella ( @fcurella ) Adam Venturella ( @aventurella ) Monty Taylor ( @emonty ) schacki ( @schacki ) Ryan Olson ( @ryanolson ) Trey Hunner ( @treyhunner ) Russell Keith-Magee ( @freakboy3742 ) Mishbah Razzaque ( @mishbahr ) Robin Andeer ( @robinandeer ) Rachel Sanders ( @trustrachel ) R\u00e9my Hubscher ( @Natim ) Dino Petron3 ( @dinopetrone ) Peter Inglesby ( @inglesp ) Ramiro Batista da Luz ( @ramiroluz ) Omer Katz ( @thedrow ) lord63 ( @lord63 ) Randy Syring ( @rsyring ) Mark Jones ( @mark0978 ) Marc Abramowitz ( @msabramo ) Lucian Ursu ( @LucianU ) Osvaldo Santana Neto ( @osantana ) Matthias84 ( @Matthias84 ) Simeon Visser ( @svisser ) Guruprasad ( @lgp171188 ) Charles-Axel Dein ( @charlax ) Diego Garcia ( @drgarcia1986 ) maiksensi ( @maiksensi ) Andrew Conti ( @agconti ) Valentin Lab ( @vaab ) Ilja Bauer ( @iljabauer ) Elias Dorneles ( @eliasdorneles ) Matias Saguir ( @mativs ) Johannes ( @johtso ) macrotim ( @macrotim ) Will McGinnis ( @wdm0006 ) C\u00e9dric Krier ( @cedk ) Tim Osborn ( @ptim ) Aaron Gallagher ( @habnabit ) mozillazg ( @mozillazg ) Joachim Jablon ( @ewjoachim ) Andrew Ittner ( @tephyr ) Diane DeMers Chen ( @purplediane ) zzzirk ( @zzzirk ) Carol Willing ( @willingc ) phoebebauer ( @phoebebauer ) Adam Chainz ( @adamchainz ) Sul\u00e9 ( @suledev ) Evan Palmer ( @palmerev ) Bruce Eckel ( @BruceEckel ) Robert Lyon ( @ivanlyon ) Terry Bates ( @terryjbates ) Brett Cannon ( @brettcannon ) Michael Warkentin ( @mwarkentin ) Bart\u0142omiej Kurzeja ( @B3QL ) Thomas O'Donnell ( @andytom ) Jeremy Carbaugh ( @jcarbaugh ) Nathan Cheung ( @cheungnj ) Abd\u00f3 Roig-Maranges ( @aroig ) Steve Piercy ( @stevepiercy ) Corey ( @coreysnyder04 ) Dmitry Evstratov ( @devstrat ) Eyal Levin ( @eyalev ) mathagician ( @mathagician ) Guillaume Gelin ( @ramnes ) @delirious-lettuce ( @delirious-lettuce ) Gasper Vozel ( @karantan ) Joshua Carp ( @jmcarp ) @meahow ( @meahow ) Andrea Grandi ( @andreagrandi ) Issa Jubril ( @jubrilissa ) Nytiennzo Madooray ( @Nythiennzo ) Erik Bachorski ( @dornheimer ) cclauss ( @cclauss ) Andy Craze ( @accraze ) Anthony Sottile ( @asottile ) Jonathan Sick ( @jonathansick ) Hugo ( @hugovk ) Min ho Kim ( @minho42 ) Ryan Ly ( @rly ) Akintola Rahmat ( @mihrab34 ) Jai Ram Rideout ( @jairideout ) Diego Carrasco Gubernatis ( @dacog ) Wagner Negr\u00e3o ( @wagnernegrao ) Josh Barnes ( @jcb91 ) Nikita Sobolev ( @sobolevn ) Matt Stibbs ( @mattstibbs ) MinchinWeb ( @MinchinWeb ) kishan ( @kishan ) tonytheleg ( @tonytheleg ) Roman Hartmann ( @RomHartmann ) DSEnvel ( @DSEnvel ) kishan ( @kishan ) Bruno Alla ( @browniebroke ) nicain ( @nicain ) Carsten R\u00f6snick-Neugebauer ( @croesnick ) igorbasko01 ( @igorbasko01 ) Dan Booth Dev ( @DanBoothDev ) Pablo Panero ( @ppanero ) Chuan-Heng Hsiao ( @chhsiao1981 ) Mohammad Hossein Sekhavat ( @mhsekhavat ) Amey Joshi ( @amey589 ) Paul Harrison ( @smoothml )","title":"Contributors"},{"location":"command-line/","text":"Command Line \u00b6 Tackle-box is extremely flexible on the inputs that it accepts to run against. Basically any file, directory, or repo are acceptable inputs or no input at all. This document describes the logic behind how tackle takes in inputs including how additional args, kwargs, and flags are interpreted from the command line. Calling tackle from the command line and from within a tackle file with a tackle hook is the same except for how additional arguments are interpreted. Targets \u00b6 Targets are the first argument in any tackle call. For instance: tackle TARGET arg1 arg2 --key value --flag File \u00b6 Tackle can be called against any yaml file or json. Tackle runs the file as if it is in the current directory. tackle some/file/location.yaml Directory \u00b6 Tackle can be called against any directory and looks for a \"tackle file\", a file that matches tackle.yaml/yml/json or .tackle.yaml/yml/json and runs against that. tackle some/directory/location Repository \u00b6 Tackle can be called against any repository looking input which similar to a directory input, looks for a \"tackle file\" and runs against that. Repository sources can be abbreviated such that the following items are equivalent. https://github.com/robcxyz/tackle-provider github.com/robcxyz/tackle-provider robcxyz/tackle-provider tackle robcxyz/tackle-provider Zipfile \u00b6 Tackle can also run against a zip file. tackle path/to/some/zipfile.zip No argument supplied \u00b6 When no input argument is supplied, tackle by default looks in the parent directories for the nearest tackle file and runs that. This is useful if you want to store a collection of calls at some location that you want to use from your present directory. tackle Argument matches tackle file's key \u00b6 When an input is supplied but it does not match any of the above criteria, by default tackle checks if there is a key in the parent directory and runs from that key. Logic is described in the next section. tackle a-tackle-file.yaml a-key # a-key is a key in the tackle file Additional Arguments / Keys / Flags \u00b6 The preceding section described how targets are handled but tackle can also take in arbitrary args, key value pairs, and flags which are interpreted. tackle target ARGs --KEYs VALUEs --FLAGs Extra Arguments \u00b6 Additional arguments are interpeted as the user doesn't want to run an entire tackle file but run a specific set of keys. So for instance given the following tackle file: File: key_a-> : print Key A key_b-> : print Key B Command: tackle file.yaml key_a Only key_a would be run. This is useful if you want to only run a subsection of a tackle file or jump straight to a command. Extra Key Values and Flags \u00b6 Additional key value pairs and flags are interpreted by command line calls as being overrides to the context. For instance given the following tackle file and call: File: key_a-> : input What to set `key_a`? key_b-> : print \"{{key_a}}\" Command: tackle file.yaml --key_a \"stuff and things\" Would result in no prompt and \"stuff and things\" printed to the user. Flags are the same as key value pairs but override with True. Additional Command Line Arguments \u00b6 print \u00b6 When the print flag is specified, the context after parsing is printed out to the screen which can then be piped to a file. tackle --print TARGET","title":"Command Line"},{"location":"command-line/#command-line","text":"Tackle-box is extremely flexible on the inputs that it accepts to run against. Basically any file, directory, or repo are acceptable inputs or no input at all. This document describes the logic behind how tackle takes in inputs including how additional args, kwargs, and flags are interpreted from the command line. Calling tackle from the command line and from within a tackle file with a tackle hook is the same except for how additional arguments are interpreted.","title":"Command Line"},{"location":"command-line/#targets","text":"Targets are the first argument in any tackle call. For instance: tackle TARGET arg1 arg2 --key value --flag","title":"Targets"},{"location":"command-line/#file","text":"Tackle can be called against any yaml file or json. Tackle runs the file as if it is in the current directory. tackle some/file/location.yaml","title":"File"},{"location":"command-line/#directory","text":"Tackle can be called against any directory and looks for a \"tackle file\", a file that matches tackle.yaml/yml/json or .tackle.yaml/yml/json and runs against that. tackle some/directory/location","title":"Directory"},{"location":"command-line/#repository","text":"Tackle can be called against any repository looking input which similar to a directory input, looks for a \"tackle file\" and runs against that. Repository sources can be abbreviated such that the following items are equivalent. https://github.com/robcxyz/tackle-provider github.com/robcxyz/tackle-provider robcxyz/tackle-provider tackle robcxyz/tackle-provider","title":"Repository"},{"location":"command-line/#zipfile","text":"Tackle can also run against a zip file. tackle path/to/some/zipfile.zip","title":"Zipfile"},{"location":"command-line/#no-argument-supplied","text":"When no input argument is supplied, tackle by default looks in the parent directories for the nearest tackle file and runs that. This is useful if you want to store a collection of calls at some location that you want to use from your present directory. tackle","title":"No argument supplied"},{"location":"command-line/#argument-matches-tackle-files-key","text":"When an input is supplied but it does not match any of the above criteria, by default tackle checks if there is a key in the parent directory and runs from that key. Logic is described in the next section. tackle a-tackle-file.yaml a-key # a-key is a key in the tackle file","title":"Argument matches tackle file's key"},{"location":"command-line/#additional-arguments-keys-flags","text":"The preceding section described how targets are handled but tackle can also take in arbitrary args, key value pairs, and flags which are interpreted. tackle target ARGs --KEYs VALUEs --FLAGs","title":"Additional Arguments / Keys / Flags"},{"location":"command-line/#extra-arguments","text":"Additional arguments are interpeted as the user doesn't want to run an entire tackle file but run a specific set of keys. So for instance given the following tackle file: File: key_a-> : print Key A key_b-> : print Key B Command: tackle file.yaml key_a Only key_a would be run. This is useful if you want to only run a subsection of a tackle file or jump straight to a command.","title":"Extra Arguments"},{"location":"command-line/#extra-key-values-and-flags","text":"Additional key value pairs and flags are interpreted by command line calls as being overrides to the context. For instance given the following tackle file and call: File: key_a-> : input What to set `key_a`? key_b-> : print \"{{key_a}}\" Command: tackle file.yaml --key_a \"stuff and things\" Would result in no prompt and \"stuff and things\" printed to the user. Flags are the same as key value pairs but override with True.","title":"Extra Key Values and Flags"},{"location":"command-line/#additional-command-line-arguments","text":"","title":"Additional Command Line Arguments"},{"location":"command-line/#print","text":"When the print flag is specified, the context after parsing is printed out to the screen which can then be piped to a file. tackle --print TARGET","title":"print"},{"location":"contributing/","text":"Contributing \u00b6 Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. Types of Contributions Contributor Setup Contributor Guidelines Contributor Testing Core Committer Guide Types of Contributions \u00b6 You can contribute in many ways: Create Tackle Providers \u00b6 Some providers to list in the README would be great. If you create a tackle provider, submit a pull request adding it to README.md. Report Bugs \u00b6 Report bugs at https://github.com/robcxyz/tackle-box/issues . If you are reporting a bug, please include: Your operating system name and version. Any details about your local setup that might be helpful in troubleshooting. If you can, provide detailed steps to reproduce the bug. If you don't have steps to reproduce the bug, just note your observations in as much detail as you can. Questions to start a discussion about the issue are welcome. Fix Bugs \u00b6 Look through the GitHub issues for bugs. Anything tagged with \"bug\" is open to whoever wants to implement it. Implement Features \u00b6 Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"please-help\" is open to whoever wants to implement it. Please do not combine multiple feature enhancements into a single pull request. Write Documentation \u00b6 Tackle-box could always use more documentation, whether as part of the official tackle-box docs, in docstrings, or even on the web in blog posts, articles, and such. If you want to review your changes on the documentation locally, you can do: pip install -r docs/requirements.txt mkdoc serve This will compile the documentation, open it in your browser and start watching the files for changes, recompiling as you save. Submit Feedback \u00b6 The best way to send feedback is to file an issue at https://github.com/robcxyz/tackle-box/issues . If you are proposing a feature: Explain in detail how it would work. Keep the scope as narrow as possible, to make it easier to implement. Remember that this is a volunteer-driven project, and that contributions are welcome :) Setting Up the Code for Local Development \u00b6 Here's how to set up tackle for local development. Fork the tackle-box repo on GitHub. Clone your fork locally: git clone git@github.com:your_name_here/tackle-box.git Install your local copy into a virtualenv. Assuming you have virtualenvwrapper installed, this is how you set up your fork for local development: cd tackle-box/ python3 -m venv env source env/bin/activate python setup.py develop Create a branch for local development: git checkout -b name-of-your-bugfix-or-feature Now you can make your changes locally. When you're done making changes, check that your changes pass the tests and lint check: pip install tox tox Please note that tox runs lint check automatically, since we have a test environment for it. If you feel like running only the lint environment, please use the following command: tox -e lint Ensure that your feature or commit is fully covered by tests. Check report after regular tox run. You can also run coverage only report and get html report with statement by statement highlighting: tox -e cov-report You report will be placed to htmlcov directory. Please do not include this directory to your commits. By default this directory in our .gitignore file. Commit your changes and push your branch to GitHub: git add . git commit -m \"Your detailed description of your changes.\" git push origin name-of-your-bugfix-or-feature Submit a pull request through the GitHub website. Contributor Guidelines \u00b6 Pull Request Guidelines \u00b6 Before you submit a pull request, check that it meets these guidelines: The pull request should include tests. If the pull request adds functionality, the docs should be updated. Put your new functionality into a function with a docstring, and add the feature to the list in README.md. The pull request must pass all CI/CD jobs before being ready for review. If one CI/CD job is failing for unrelated reasons you may want to create another PR to fix that first. Coding Standards \u00b6 PEP8 Functions over class methods Quotes via http://stackoverflow.com/a/56190/5549 Use double quotes around strings that are used for interpolation or that are natural language messages Use single quotes for small symbol-like strings (but break the rules if the strings contain quotes) Use triple double quotes for docstrings and raw string literals for regular expressions even if they aren't needed. Example: LIGHT_MESSAGES = { 'English' : \"There are %(number_of_lights)s lights.\" , 'Pirate' : \"Arr! Thar be %(number_of_lights)s lights.\" } def lights_message ( language , number_of_lights ): \"\"\"Return a language-appropriate string reporting the light count.\"\"\" return LIGHT_MESSAGES [ language ] % locals () def is_pirate ( message ): \"\"\"Return True if the given message sounds piratical.\"\"\" return re . search ( r \"(?i)(arr|avast|yohoho)!\" , message ) is not None Write new code in Python 3. Testing with tox \u00b6 Tox uses py.test under the hood, hence it supports the same syntax for selecting tests. For further information please consult the pytest usage docs . To run a particular test class with tox: tox -e py '-k TestFindHooks' To run some tests with names matching a string expression: tox -e py '-k generate' Will run all tests matching \"generate\", test_generate_files for example. To run just one method: tox -e py '-k \"TestFindHooks and test_find_hook\"' To run all tests using various versions of python in virtualenvs defined in tox.ini, just run tox: tox This configuration file setup the pytest-cov plugin and it is an additional dependency. It generate a coverage report after the tests. It is possible to tests with some versions of python, to do this the command is: tox -e py36,pypy3 Will run py.test with the python3.6 and pypy3 interpreters, for example. Core Committer Guide \u00b6 Vision and Scope \u00b6 Core committers, use this section to: Guide your instinct and decisions as a core committer Limit the codebase from growing infinitely Command-Line Accessible \u00b6 Provides a command-line utility that creates projects from tackle-boxes Extremely easy to use without having to think too hard Flexible for more complex use via optional arguments API Accessible \u00b6 Entirely function-based and stateless (Class-free by intentional design) Usable in pieces for developers of template generation tools Being Jinja2-specific \u00b6 Sets a standard baseline for project template creators, facilitating reuse Minimizes the learning curve for those who already use Flask or Django Minimizes scope of tackle-box codebase Extensible \u00b6 Being extendable by people with different ideas for Jinja2-based project template tools. Entirely function-based Aim for statelessness Lets anyone write more opinionated tools Freedom for tackle-box users to build and extend. No officially-maintained tackle-box providers, only ones by individuals Commercial project-friendly licensing, allowing for private tackle-box and private tackle-box-based tools Inclusive \u00b6 Cross-platform and cross-version support are more important than features/functionality Fixing Windows bugs even if it's a pain, to allow for use by more beginner coders Stable \u00b6 Aim for 100% test coverage and covering corner cases No pull requests will be accepted that drop test coverage on any platform, including Windows Conservative decisions patterned after CPython's conservative decisions with stability in mind Stable APIs that tool builders can rely on New features require a +1 from 3 core committers VCS-Hosted Templates \u00b6 Tackle-box providers are intentionally hosted VCS repos as-is. They are easily forkable It's easy for users to browse forks and files They are searchable via standard Github search interface Minimizes the need for packaging-related cruft files Easy to create a public project template and host it for free Easy to collaborate Process: Pull Requests \u00b6 If a pull request is untriaged: Look at the roadmap Set it for the milestone where it makes the most sense Add it to the roadmap How to prioritize pull requests, from most to least important: Fixes for broken tests. Broken means broken on any supported platform or Python version. Extra tests to cover corner cases. Minor edits to docs. Bug fixes. Major edits to docs. Features. Process: Issues \u00b6 If an issue is a bug that needs an urgent fix, mark it for the next patch release. Then either fix it or mark as please-help. For other issues: encourage friendly discussion, moderate debate, offer your thoughts. New features require a +1 from 2 other core committers (besides yourself). Process: Roadmap \u00b6 The roadmap located here Due dates are flexible. Core committers can change them as needed. Note that GitHub sort on them is buggy. How to number milestones: Follow semantic versioning. Look at: http://semver.org Milestone size: If a milestone contains too much, move some to the next milestone. Err on the side of more frequent patch releases. Process: Pull Request merging and HISTORY.md maintenance \u00b6 If you merge a pull request, you're responsible for updating AUTHORS.md and HISTORY.md When you're processing the first change after a release, create boilerplate following the existing pattern: ## x.y.z (Development) The goals of this release are TODO: release summary of features Features: * Feature description, thanks to [ @contributor ]( https://github.com/contributor ) (#PR). Bug Fixes: * Bug fix description, thanks to [ @contributor ]( https://github.com/contributor ) (#PR). Other changes: * Description of the change, thanks to [ @contributor ]( https://github.com/contributor ) (#PR). Process: Accepting Template Pull Requests \u00b6 Run the template to generate the project. Attempt to start/use the rendered project. Merge the template in. Update the history file. note: Adding a template doesn't give authors credit. Process: Your own code changes \u00b6 All code changes, regardless of who does them, need to be reviewed and merged by someone else. This rule applies to all the core committers. Exceptions: Minor corrections and fixes to pull requests submitted by others. While making a formal release, the release manager can make necessary, appropriate changes. Small documentation changes that reinforce existing subject matter. Most commonly being, but not limited to spelling and grammar corrections. Responsibilities \u00b6 Ensure cross-platform compatibility for every change that's accepted. Windows, Mac, Debian & Ubuntu Linux. Ensure that code that goes into core meets all requirements in this checklist: https://gist.github.com/audreyr/4feef90445b9680475f2 Create issues for any major changes and enhancements that you wish to make. Discuss things transparently and get community feedback. Don't add any classes to the codebase unless absolutely needed. Err on the side of using functions. Keep feature versions as small as possible, preferably one new feature per version. Be welcoming to newcomers and encourage diverse new contributors from all backgrounds. Look at Code of Conduct . Becoming a Core Committer \u00b6 Contributors may be given core commit privileges. Preference will be given to those with: Past contributions to cookiecutter or tackle-box and other open-source projects. Contributions to tackle-box include both code (both accepted and pending) and friendly participation in the issue tracker. Quantity and quality are considered. A coding style that the other core committers find simple, minimal, and clean. Access to resources for cross-platform development and testing. Time to devote to the project regularly.","title":"Contributing"},{"location":"contributing/#contributing","text":"Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. Types of Contributions Contributor Setup Contributor Guidelines Contributor Testing Core Committer Guide","title":"Contributing"},{"location":"contributing/#types-of-contributions","text":"You can contribute in many ways:","title":"Types of Contributions"},{"location":"contributing/#create-tackle-providers","text":"Some providers to list in the README would be great. If you create a tackle provider, submit a pull request adding it to README.md.","title":"Create Tackle Providers"},{"location":"contributing/#report-bugs","text":"Report bugs at https://github.com/robcxyz/tackle-box/issues . If you are reporting a bug, please include: Your operating system name and version. Any details about your local setup that might be helpful in troubleshooting. If you can, provide detailed steps to reproduce the bug. If you don't have steps to reproduce the bug, just note your observations in as much detail as you can. Questions to start a discussion about the issue are welcome.","title":"Report Bugs"},{"location":"contributing/#fix-bugs","text":"Look through the GitHub issues for bugs. Anything tagged with \"bug\" is open to whoever wants to implement it.","title":"Fix Bugs"},{"location":"contributing/#implement-features","text":"Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"please-help\" is open to whoever wants to implement it. Please do not combine multiple feature enhancements into a single pull request.","title":"Implement Features"},{"location":"contributing/#write-documentation","text":"Tackle-box could always use more documentation, whether as part of the official tackle-box docs, in docstrings, or even on the web in blog posts, articles, and such. If you want to review your changes on the documentation locally, you can do: pip install -r docs/requirements.txt mkdoc serve This will compile the documentation, open it in your browser and start watching the files for changes, recompiling as you save.","title":"Write Documentation"},{"location":"contributing/#submit-feedback","text":"The best way to send feedback is to file an issue at https://github.com/robcxyz/tackle-box/issues . If you are proposing a feature: Explain in detail how it would work. Keep the scope as narrow as possible, to make it easier to implement. Remember that this is a volunteer-driven project, and that contributions are welcome :)","title":"Submit Feedback"},{"location":"contributing/#setting-up-the-code-for-local-development","text":"Here's how to set up tackle for local development. Fork the tackle-box repo on GitHub. Clone your fork locally: git clone git@github.com:your_name_here/tackle-box.git Install your local copy into a virtualenv. Assuming you have virtualenvwrapper installed, this is how you set up your fork for local development: cd tackle-box/ python3 -m venv env source env/bin/activate python setup.py develop Create a branch for local development: git checkout -b name-of-your-bugfix-or-feature Now you can make your changes locally. When you're done making changes, check that your changes pass the tests and lint check: pip install tox tox Please note that tox runs lint check automatically, since we have a test environment for it. If you feel like running only the lint environment, please use the following command: tox -e lint Ensure that your feature or commit is fully covered by tests. Check report after regular tox run. You can also run coverage only report and get html report with statement by statement highlighting: tox -e cov-report You report will be placed to htmlcov directory. Please do not include this directory to your commits. By default this directory in our .gitignore file. Commit your changes and push your branch to GitHub: git add . git commit -m \"Your detailed description of your changes.\" git push origin name-of-your-bugfix-or-feature Submit a pull request through the GitHub website.","title":"Setting Up the Code for Local Development"},{"location":"contributing/#contributor-guidelines","text":"","title":"Contributor Guidelines"},{"location":"contributing/#pull-request-guidelines","text":"Before you submit a pull request, check that it meets these guidelines: The pull request should include tests. If the pull request adds functionality, the docs should be updated. Put your new functionality into a function with a docstring, and add the feature to the list in README.md. The pull request must pass all CI/CD jobs before being ready for review. If one CI/CD job is failing for unrelated reasons you may want to create another PR to fix that first.","title":"Pull Request Guidelines"},{"location":"contributing/#coding-standards","text":"PEP8 Functions over class methods Quotes via http://stackoverflow.com/a/56190/5549 Use double quotes around strings that are used for interpolation or that are natural language messages Use single quotes for small symbol-like strings (but break the rules if the strings contain quotes) Use triple double quotes for docstrings and raw string literals for regular expressions even if they aren't needed. Example: LIGHT_MESSAGES = { 'English' : \"There are %(number_of_lights)s lights.\" , 'Pirate' : \"Arr! Thar be %(number_of_lights)s lights.\" } def lights_message ( language , number_of_lights ): \"\"\"Return a language-appropriate string reporting the light count.\"\"\" return LIGHT_MESSAGES [ language ] % locals () def is_pirate ( message ): \"\"\"Return True if the given message sounds piratical.\"\"\" return re . search ( r \"(?i)(arr|avast|yohoho)!\" , message ) is not None Write new code in Python 3.","title":"Coding Standards"},{"location":"contributing/#testing-with-tox","text":"Tox uses py.test under the hood, hence it supports the same syntax for selecting tests. For further information please consult the pytest usage docs . To run a particular test class with tox: tox -e py '-k TestFindHooks' To run some tests with names matching a string expression: tox -e py '-k generate' Will run all tests matching \"generate\", test_generate_files for example. To run just one method: tox -e py '-k \"TestFindHooks and test_find_hook\"' To run all tests using various versions of python in virtualenvs defined in tox.ini, just run tox: tox This configuration file setup the pytest-cov plugin and it is an additional dependency. It generate a coverage report after the tests. It is possible to tests with some versions of python, to do this the command is: tox -e py36,pypy3 Will run py.test with the python3.6 and pypy3 interpreters, for example.","title":"Testing with tox"},{"location":"contributing/#core-committer-guide","text":"","title":"Core Committer Guide"},{"location":"contributing/#vision-and-scope","text":"Core committers, use this section to: Guide your instinct and decisions as a core committer Limit the codebase from growing infinitely","title":"Vision and Scope"},{"location":"contributing/#command-line-accessible","text":"Provides a command-line utility that creates projects from tackle-boxes Extremely easy to use without having to think too hard Flexible for more complex use via optional arguments","title":"Command-Line Accessible"},{"location":"contributing/#api-accessible","text":"Entirely function-based and stateless (Class-free by intentional design) Usable in pieces for developers of template generation tools","title":"API Accessible"},{"location":"contributing/#being-jinja2-specific","text":"Sets a standard baseline for project template creators, facilitating reuse Minimizes the learning curve for those who already use Flask or Django Minimizes scope of tackle-box codebase","title":"Being Jinja2-specific"},{"location":"contributing/#extensible","text":"Being extendable by people with different ideas for Jinja2-based project template tools. Entirely function-based Aim for statelessness Lets anyone write more opinionated tools Freedom for tackle-box users to build and extend. No officially-maintained tackle-box providers, only ones by individuals Commercial project-friendly licensing, allowing for private tackle-box and private tackle-box-based tools","title":"Extensible"},{"location":"contributing/#inclusive","text":"Cross-platform and cross-version support are more important than features/functionality Fixing Windows bugs even if it's a pain, to allow for use by more beginner coders","title":"Inclusive"},{"location":"contributing/#stable","text":"Aim for 100% test coverage and covering corner cases No pull requests will be accepted that drop test coverage on any platform, including Windows Conservative decisions patterned after CPython's conservative decisions with stability in mind Stable APIs that tool builders can rely on New features require a +1 from 3 core committers","title":"Stable"},{"location":"contributing/#vcs-hosted-templates","text":"Tackle-box providers are intentionally hosted VCS repos as-is. They are easily forkable It's easy for users to browse forks and files They are searchable via standard Github search interface Minimizes the need for packaging-related cruft files Easy to create a public project template and host it for free Easy to collaborate","title":"VCS-Hosted Templates"},{"location":"contributing/#process-pull-requests","text":"If a pull request is untriaged: Look at the roadmap Set it for the milestone where it makes the most sense Add it to the roadmap How to prioritize pull requests, from most to least important: Fixes for broken tests. Broken means broken on any supported platform or Python version. Extra tests to cover corner cases. Minor edits to docs. Bug fixes. Major edits to docs. Features.","title":"Process: Pull Requests"},{"location":"contributing/#process-issues","text":"If an issue is a bug that needs an urgent fix, mark it for the next patch release. Then either fix it or mark as please-help. For other issues: encourage friendly discussion, moderate debate, offer your thoughts. New features require a +1 from 2 other core committers (besides yourself).","title":"Process: Issues"},{"location":"contributing/#process-roadmap","text":"The roadmap located here Due dates are flexible. Core committers can change them as needed. Note that GitHub sort on them is buggy. How to number milestones: Follow semantic versioning. Look at: http://semver.org Milestone size: If a milestone contains too much, move some to the next milestone. Err on the side of more frequent patch releases.","title":"Process: Roadmap"},{"location":"contributing/#process-pull-request-merging-and-historymd-maintenance","text":"If you merge a pull request, you're responsible for updating AUTHORS.md and HISTORY.md When you're processing the first change after a release, create boilerplate following the existing pattern: ## x.y.z (Development) The goals of this release are TODO: release summary of features Features: * Feature description, thanks to [ @contributor ]( https://github.com/contributor ) (#PR). Bug Fixes: * Bug fix description, thanks to [ @contributor ]( https://github.com/contributor ) (#PR). Other changes: * Description of the change, thanks to [ @contributor ]( https://github.com/contributor ) (#PR).","title":"Process: Pull Request merging and HISTORY.md maintenance"},{"location":"contributing/#process-accepting-template-pull-requests","text":"Run the template to generate the project. Attempt to start/use the rendered project. Merge the template in. Update the history file. note: Adding a template doesn't give authors credit.","title":"Process: Accepting Template Pull Requests"},{"location":"contributing/#process-your-own-code-changes","text":"All code changes, regardless of who does them, need to be reviewed and merged by someone else. This rule applies to all the core committers. Exceptions: Minor corrections and fixes to pull requests submitted by others. While making a formal release, the release manager can make necessary, appropriate changes. Small documentation changes that reinforce existing subject matter. Most commonly being, but not limited to spelling and grammar corrections.","title":"Process: Your own code changes"},{"location":"contributing/#responsibilities","text":"Ensure cross-platform compatibility for every change that's accepted. Windows, Mac, Debian & Ubuntu Linux. Ensure that code that goes into core meets all requirements in this checklist: https://gist.github.com/audreyr/4feef90445b9680475f2 Create issues for any major changes and enhancements that you wish to make. Discuss things transparently and get community feedback. Don't add any classes to the codebase unless absolutely needed. Err on the side of using functions. Keep feature versions as small as possible, preferably one new feature per version. Be welcoming to newcomers and encourage diverse new contributors from all backgrounds. Look at Code of Conduct .","title":"Responsibilities"},{"location":"contributing/#becoming-a-core-committer","text":"Contributors may be given core commit privileges. Preference will be given to those with: Past contributions to cookiecutter or tackle-box and other open-source projects. Contributions to tackle-box include both code (both accepted and pending) and friendly participation in the issue tracker. Quantity and quality are considered. A coding style that the other core committers find simple, minimal, and clean. Access to resources for cross-platform development and testing. Time to devote to the project regularly.","title":"Becoming a Core Committer"},{"location":"creating-providers/","text":"Providers \u00b6 This document covers all aspects of creating providers including the semantics of the file structure and dependencies. For writing hooks which are contained within providers, check out the writing hooks document. As a recap, providers are collections of hooks and / or tackle files that call additional hooks. They can be stored remotely in a git repository and then ran / imported from tackle files or directly from the command line . Provider hooks additionally can be imported into tackle files and called directly. For more information check out the project structure docs. Quick Start \u00b6 Since tackle box is a code generator, it makes sense for it to be able to generate the boilerplate to create providers. The quickest way to do that is with the tackle-provider provider which can be ran as: tackle robcxyz/tackle-provider The provider will then go through a number of configuration options such as: What type of license (ie Apache vs MIT vs closed source) Types of tests (unittest vs pytest) Intention of the provider (code generator vs utility) Using this provider one can create a functional provider in minutes that when pushed to github can be called with tackle <your org>/<your repo> .","title":"Creating Providers"},{"location":"creating-providers/#providers","text":"This document covers all aspects of creating providers including the semantics of the file structure and dependencies. For writing hooks which are contained within providers, check out the writing hooks document. As a recap, providers are collections of hooks and / or tackle files that call additional hooks. They can be stored remotely in a git repository and then ran / imported from tackle files or directly from the command line . Provider hooks additionally can be imported into tackle files and called directly. For more information check out the project structure docs.","title":"Providers"},{"location":"creating-providers/#quick-start","text":"Since tackle box is a code generator, it makes sense for it to be able to generate the boilerplate to create providers. The quickest way to do that is with the tackle-provider provider which can be ran as: tackle robcxyz/tackle-provider The provider will then go through a number of configuration options such as: What type of license (ie Apache vs MIT vs closed source) Types of tests (unittest vs pytest) Intention of the provider (code generator vs utility) Using this provider one can create a functional provider in minutes that when pushed to github can be called with tackle <your org>/<your repo> .","title":"Quick Start"},{"location":"demos/","text":"Demos \u00b6 In this section we will go over a number of demos of Tackle Box along with the main takeaways. To walk through all the demos, run: tackle robcxyz/tackle-demo","title":"Demos"},{"location":"demos/#demos","text":"In this section we will go over a number of demos of Tackle Box along with the main takeaways. To walk through all the demos, run: tackle robcxyz/tackle-demo","title":"Demos"},{"location":"dev-roadmap/","text":"Development Roadmap \u00b6 Tackle-box is still a work in progress with the following new features planned. Functions \u00b6 Hooks are supposed to be written in an imperative language (ie python) though it would be good to have a declarative form of being able to call groups of hooks which could be called functions. Functions would have the same properties of hooks in that they will have arguments and parameters with types and defaults along with an exec method which is then run when the function is called. Functions will be extracted from the tackle file from keys with an arrow in the opposite direction of a hook (ie <- for public / <_ for private) before it is parsed and then made available during the main parsing sequential run. Functions would be importable within providers so that providers can share reusable groups of logic. For instance this could be an example of a function: function_example<- : args : - name : param1 - name : param2 kwargs : param1 : type : str param2 : type : list default : [] param3 : type : bool default : false exec : call1-> : another_hook param1 param2 call2-> : another_hook call1 param3 return : call2 Which could then be called like: a_list : - stuff - things called from a hook-> : function_example foo \"{{ a_list }}\" called within a hook : -> : some_hook param : $function_example foo \"{{ a_list }}\" Functions can then refer to other functions to also create nested logic. Help on Providers and Files \u00b6 No CLI is complete without some kind of help screen that describes the actions that can be taken. Early thinking was that these help dialogues could be triggered by running a reserved parameter help when calling tackle. For instance running tackle robcxyz/tackle-provider help should display what the provider is able to do. These help items should be both keys calling hooks with a help kwarg or public functions. The format should be similar to other help screens (ie calling tackle --help ) and make the tool more of a declarative CLI.","title":"Development Roadmap"},{"location":"dev-roadmap/#development-roadmap","text":"Tackle-box is still a work in progress with the following new features planned.","title":"Development Roadmap"},{"location":"dev-roadmap/#functions","text":"Hooks are supposed to be written in an imperative language (ie python) though it would be good to have a declarative form of being able to call groups of hooks which could be called functions. Functions would have the same properties of hooks in that they will have arguments and parameters with types and defaults along with an exec method which is then run when the function is called. Functions will be extracted from the tackle file from keys with an arrow in the opposite direction of a hook (ie <- for public / <_ for private) before it is parsed and then made available during the main parsing sequential run. Functions would be importable within providers so that providers can share reusable groups of logic. For instance this could be an example of a function: function_example<- : args : - name : param1 - name : param2 kwargs : param1 : type : str param2 : type : list default : [] param3 : type : bool default : false exec : call1-> : another_hook param1 param2 call2-> : another_hook call1 param3 return : call2 Which could then be called like: a_list : - stuff - things called from a hook-> : function_example foo \"{{ a_list }}\" called within a hook : -> : some_hook param : $function_example foo \"{{ a_list }}\" Functions can then refer to other functions to also create nested logic.","title":"Functions"},{"location":"dev-roadmap/#help-on-providers-and-files","text":"No CLI is complete without some kind of help screen that describes the actions that can be taken. Early thinking was that these help dialogues could be triggered by running a reserved parameter help when calling tackle. For instance running tackle robcxyz/tackle-provider help should display what the provider is able to do. These help items should be both keys calling hooks with a help kwarg or public functions. The format should be similar to other help screens (ie calling tackle --help ) and make the tool more of a declarative CLI.","title":"Help on Providers and Files"},{"location":"hook-methods/","text":"Hook Base Methods \u00b6 Every hook has a number of base methods that are implemented alongside the declaration of the hook. This document outlines each of these methods with an example of their use. Conditionals if / else Loops for / reverse Methods chdir merge try / except - Coming soon defer - Coming soon callback - Coming soon Conditionals \u00b6 Hooks can be conditionally called with an if key that needs to resolve to some kind of boolean. It is typically based on some kind of jinja expression. For instance: name-> : input What is your name? hello : -> : print Hello {{ name }}! if : name != 'Rob' Here we can see the if key that by default is wrapped with jinja braces and is evaluated as true or false depending on the value entered into the name key. Full jinja syntax is supported so other assertions such as whether an item is in a list (ie if: 'a key' in a_list ) is supported. If you want to return a different value when the if condition resolves to false, use the else key with the value you wish to return otherwise. For instance: name-> : input What is your name? hello : -> : print Hello {{ name }}! if : name != 'Rob' else : Hello me Currently only returning static values is supported which might change in the next versions of tackle-box which could parse the else key for hooks. Loops \u00b6 Hooks can be called in a loop based on specifying a list input in a for key and will always return a list to the key. Within the loop, the iterand is stored in a temporary variable item along with it's indexed position in a variable called index . For instance running: printer : -> : print \"We are at item {{ item }} and index {{ index }}\" for : - stuff - things Would result in: printer : - We are at item stuff and index 0 - We are at item things and index 1 The for key must be a list so if the input is a string, it is rendered by default like in this example which does the same as above: a_list_> : # This is a private key now and won't be part of the output context - stuff - things printer : -> : print \"We are at item {{ item }} and index {{ index }}\" for : a_list reverse \u00b6 To loop through a list in reverse, simply set a reverse key to true as in this example: printer : -> : print \"We are at item {{ item }} and index {{ index }}\" for : - stuff - things reverse : true Would result in: printer : - We are at item things and index 1 - We are at item stuff and index 0 Methods \u00b6 chdir \u00b6 Sometimes it is desirable to run the hook in another directory. For this there is the chdir key where the hook is called in the context of the directory being specified. For instance one could run the listdir hook in another directory: contents : -> : listdir chdir : path/to/some/dir merge \u00b6 If the output of the hook call is a map, then one can merge that map into the parent keys. For instance given this block hook : stuff : things to merge-> : merge : true stuff : more things Would result in: stuff : more things try / except - Coming soon \u00b6 defer - Coming soon \u00b6 callback - Coming soon \u00b6","title":"Hook Methods"},{"location":"hook-methods/#hook-base-methods","text":"Every hook has a number of base methods that are implemented alongside the declaration of the hook. This document outlines each of these methods with an example of their use. Conditionals if / else Loops for / reverse Methods chdir merge try / except - Coming soon defer - Coming soon callback - Coming soon","title":"Hook Base Methods"},{"location":"hook-methods/#conditionals","text":"Hooks can be conditionally called with an if key that needs to resolve to some kind of boolean. It is typically based on some kind of jinja expression. For instance: name-> : input What is your name? hello : -> : print Hello {{ name }}! if : name != 'Rob' Here we can see the if key that by default is wrapped with jinja braces and is evaluated as true or false depending on the value entered into the name key. Full jinja syntax is supported so other assertions such as whether an item is in a list (ie if: 'a key' in a_list ) is supported. If you want to return a different value when the if condition resolves to false, use the else key with the value you wish to return otherwise. For instance: name-> : input What is your name? hello : -> : print Hello {{ name }}! if : name != 'Rob' else : Hello me Currently only returning static values is supported which might change in the next versions of tackle-box which could parse the else key for hooks.","title":"Conditionals"},{"location":"hook-methods/#loops","text":"Hooks can be called in a loop based on specifying a list input in a for key and will always return a list to the key. Within the loop, the iterand is stored in a temporary variable item along with it's indexed position in a variable called index . For instance running: printer : -> : print \"We are at item {{ item }} and index {{ index }}\" for : - stuff - things Would result in: printer : - We are at item stuff and index 0 - We are at item things and index 1 The for key must be a list so if the input is a string, it is rendered by default like in this example which does the same as above: a_list_> : # This is a private key now and won't be part of the output context - stuff - things printer : -> : print \"We are at item {{ item }} and index {{ index }}\" for : a_list","title":"Loops"},{"location":"hook-methods/#reverse","text":"To loop through a list in reverse, simply set a reverse key to true as in this example: printer : -> : print \"We are at item {{ item }} and index {{ index }}\" for : - stuff - things reverse : true Would result in: printer : - We are at item things and index 1 - We are at item stuff and index 0","title":"reverse"},{"location":"hook-methods/#methods","text":"","title":"Methods"},{"location":"hook-methods/#chdir","text":"Sometimes it is desirable to run the hook in another directory. For this there is the chdir key where the hook is called in the context of the directory being specified. For instance one could run the listdir hook in another directory: contents : -> : listdir chdir : path/to/some/dir","title":"chdir"},{"location":"hook-methods/#merge","text":"If the output of the hook call is a map, then one can merge that map into the parent keys. For instance given this block hook : stuff : things to merge-> : merge : true stuff : more things Would result in: stuff : more things","title":"merge"},{"location":"hook-methods/#try-except-coming-soon","text":"","title":"try / except - Coming soon"},{"location":"hook-methods/#defer-coming-soon","text":"","title":"defer - Coming soon"},{"location":"hook-methods/#callback-coming-soon","text":"","title":"callback - Coming soon"},{"location":"installation/","text":"Installation \u00b6 Tackle-box aims to be cross-platform (linux, windows, mac) and can be installed via python's package manager, pip. pip install tackle-box Binary versions coming soon Windows users: Tackle-box strives to be fully functional on windows but has some incompatibilities . Accepting PRs. Tackle-box has the capability to install additional package dependencies from hooks. If you wish to keep your system python interpreter clean of packages, you should use a virtual environment. python3 -m venv env source env/bin/activate pip install tackle-box Alternatively, to build from source: git clone https://github.com/robcxyz/tackle-box cd tackle-box python3 -m venv env source env/bin/activate python setup.py install","title":"Installation"},{"location":"installation/#installation","text":"Tackle-box aims to be cross-platform (linux, windows, mac) and can be installed via python's package manager, pip. pip install tackle-box Binary versions coming soon Windows users: Tackle-box strives to be fully functional on windows but has some incompatibilities . Accepting PRs. Tackle-box has the capability to install additional package dependencies from hooks. If you wish to keep your system python interpreter clean of packages, you should use a virtual environment. python3 -m venv env source env/bin/activate pip install tackle-box Alternatively, to build from source: git clone https://github.com/robcxyz/tackle-box cd tackle-box python3 -m venv env source env/bin/activate python setup.py install","title":"Installation"},{"location":"notes/","text":"NPM Audit for security Worse is better essay - lisp Peg parsing expression - lua peg PEP 617 Parsemonious YACC Parsing - Older PEP 636 Source: https://stackoverflow.com/questions/13687924/setting-a-value-in-a-nested-python-context.input_dicttionary-given-a-list-of-indices-and-value","title":"Notes"},{"location":"project-structure/","text":"Project Structure \u00b6 Tackle box at its core is simply a way to call python objects from yaml files. These python objects are called hooks which are grouped into providers that can be imported / ran from within tackle files . Providers don't necessarily need to have hooks or tackle files but logically would have at least one of them to do anything. So to be explicit: hook A python object that can be called from a yaml based tackle file. Extends the BaseHook class and is located within a hooks directory of a provider provider An importable / callable collection of hooks and / or a tackle file that runs hooks Tackle ships with a core set of native providers to do basic prompting / system operations / code generation Third party providers are generally stored in github repos tackle file A yaml file that runs hooks By default it is a file called tackle.yaml and is located at the base of a provider For instance this is the basic layout of a provider: \u251c\u2500\u2500 hooks \u2502 \u2514\u2500\u2500 hook-1.py \u2502 \u2514\u2500\u2500 hook-2.py \u2514\u2500\u2500 tackle.yaml Which if it was located in github could be called with tackle <github org>/<repo name> For code generators and other utilities that don't have any custom hooks, the provider structure could be as simple as: \u251c\u2500\u2500 templates \u2502 \u2514\u2500\u2500 file1.tpl \u2502 \u2514\u2500\u2500 file2.tpl \u2514\u2500\u2500 tackle.yaml Tackle files can also be run on their own or call one another.","title":"Project Structure"},{"location":"project-structure/#project-structure","text":"Tackle box at its core is simply a way to call python objects from yaml files. These python objects are called hooks which are grouped into providers that can be imported / ran from within tackle files . Providers don't necessarily need to have hooks or tackle files but logically would have at least one of them to do anything. So to be explicit: hook A python object that can be called from a yaml based tackle file. Extends the BaseHook class and is located within a hooks directory of a provider provider An importable / callable collection of hooks and / or a tackle file that runs hooks Tackle ships with a core set of native providers to do basic prompting / system operations / code generation Third party providers are generally stored in github repos tackle file A yaml file that runs hooks By default it is a file called tackle.yaml and is located at the base of a provider For instance this is the basic layout of a provider: \u251c\u2500\u2500 hooks \u2502 \u2514\u2500\u2500 hook-1.py \u2502 \u2514\u2500\u2500 hook-2.py \u2514\u2500\u2500 tackle.yaml Which if it was located in github could be called with tackle <github org>/<repo name> For code generators and other utilities that don't have any custom hooks, the provider structure could be as simple as: \u251c\u2500\u2500 templates \u2502 \u2514\u2500\u2500 file1.tpl \u2502 \u2514\u2500\u2500 file2.tpl \u2514\u2500\u2500 tackle.yaml Tackle files can also be run on their own or call one another.","title":"Project Structure"},{"location":"testing-providers/","text":"","title":"Testing providers"},{"location":"use-cases/","text":"Use Cases \u00b6 Cool story bro what's this all for? [ ] TODO Code generation Declarative utilities Config file management Kubernetes","title":"Use Cases"},{"location":"use-cases/#use-cases","text":"Cool story bro what's this all for? [ ] TODO Code generation Declarative utilities Config file management Kubernetes","title":"Use Cases"},{"location":"using-providers/","text":"Using Providers \u00b6 From the command line \u00b6 Providers can be called directly from the command line per the calling tackle documentation. For instance: tackle robcxyz/tackle-provider # Or https://github.com/robcxyz/tackle-provider tackle path/to/dir/with/tackle/file tackle path/to/tackle/file.yaml tackle # Checks in parent dir for tackle.yaml file Calling from tackle file \u00b6 Within a tackle file, another provider can be called which would run the tackle file by calling the tackle hook . For instance: call another tackle-> : tackle path/to/local/or/remote/provider Note that at this time additional arguments / keys / flags do not work the same as when calling from the command line and instead act like additional arguments / keys / flags for hooks and instead behave like normal hook calls . Importing hooks from a provider \u00b6 Hooks can be imported from a tackle provider with the import hook. For instance in a tackle file: import_> : path/to/local/or/remote/provider using that hook-> : the_imorted_hook ... Here we use a private hook call to import hooks as the output of this hook call is not needed. Configuration Options \u00b6 Requirements \u00b6 Each provider can have it's own requirements which when the provider is imported / called are automatically installed to support the execution of hooks. Requirements are located at the base of the provider as in the following directory structure: Autogenerated Docs \u00b6 TODO: Document exact process for third party autogenerated provider documentation","title":"Using Providers"},{"location":"using-providers/#using-providers","text":"","title":"Using Providers"},{"location":"using-providers/#from-the-command-line","text":"Providers can be called directly from the command line per the calling tackle documentation. For instance: tackle robcxyz/tackle-provider # Or https://github.com/robcxyz/tackle-provider tackle path/to/dir/with/tackle/file tackle path/to/tackle/file.yaml tackle # Checks in parent dir for tackle.yaml file","title":"From the command line"},{"location":"using-providers/#calling-from-tackle-file","text":"Within a tackle file, another provider can be called which would run the tackle file by calling the tackle hook . For instance: call another tackle-> : tackle path/to/local/or/remote/provider Note that at this time additional arguments / keys / flags do not work the same as when calling from the command line and instead act like additional arguments / keys / flags for hooks and instead behave like normal hook calls .","title":"Calling from tackle file"},{"location":"using-providers/#importing-hooks-from-a-provider","text":"Hooks can be imported from a tackle provider with the import hook. For instance in a tackle file: import_> : path/to/local/or/remote/provider using that hook-> : the_imorted_hook ... Here we use a private hook call to import hooks as the output of this hook call is not needed.","title":"Importing hooks from a provider"},{"location":"using-providers/#configuration-options","text":"","title":"Configuration Options"},{"location":"using-providers/#requirements","text":"Each provider can have it's own requirements which when the provider is imported / called are automatically installed to support the execution of hooks. Requirements are located at the base of the provider as in the following directory structure:","title":"Requirements"},{"location":"using-providers/#autogenerated-docs","text":"TODO: Document exact process for third party autogenerated provider documentation","title":"Autogenerated Docs"},{"location":"writing-hooks/","text":"Creating Hooks \u00b6 This document covers all aspects of writing hooks in python focusing on the API and it's semantics for how it can be used within tackle files. For creating providers and creating dependencies, please check out the creating providers section. Overview \u00b6 Tackle box hooks are any object located within the hooks directory that extends a BaseHook object and implement an execute method as the entrypoint to calling the hook. BaseHook objects are pydantic objects as well such that their attributes need to include type annotations. All of these attributes are then made accessible when calling the hook from a yaml file. There are couple other semantics that will be described in this document such as mapping arguments, excluding from rendering, and auto-generating documentation for your hooks. Basic Example \u00b6 The easiest way to understand this is through a simple example. If we had a file structure like this: \u251c\u2500\u2500 hooks \u2514\u2500\u2500 do_stuff.py # Name of file doesn't matter \u2514\u2500\u2500 tackle.yaml # Not needed We could have a file do_stuff.py that has an object DoStuffHook that extends the BaseHook and implements an execute method which in this case both prints and returns the things attribute. Additionally, there is a private _args attribute which can be used to map positional arguments to an attribute, in this case things (more on this later). from tackle import BaseHook , Field class DoStuffHook ( BaseHook ): hook_type : str = \"do-stuff\" things : str = Field ( None , description = \"All the things.\" ) _args : list = [ 'things' ] def execute ( self ): print ( self . things ) return self . things One could then run a tackle file that looks like this: compact-expression-> : do-stuff All the things expanded-expression : -> : do-stuff things : All the things Which when run would print out \"All the things\" twice and return the following context. compact-expression : All the things expanded-expression : All the things Concepts \u00b6 Pydantic and Types \u00b6 Pydantic has some idioms to be aware of when writing hooks specifically around types and fields. Every attribute needs to be declared with a type in pydantic and will throw an error if the type is not explicitly declared within the attribute's definition or if the wrong type is fed into the field. Because everything that is output from a hook needs to serializable (i.e. it can't return python objects), many pydantic types aren't usable unless they can be directly serialized back into a structured data format (i.e. a string, int, float, list, or dict). Multiple types for attributes are allowed by use of the Union or Optional types ( see difference ) so that within the execute statement one can qualify the type and process it appropriately. For instance: from tackle import BaseHook from typing import Union class DoStuffHook ( BaseHook ): hook_type : str = \"do-stuff\" things : Union [ str ] = None _args : list = [ 'things' ] def execute ( self ): if isinstance ( self . things , list ): for i in self . things : print ( f \"Thing = { i } \" ) elif isinstance ( self . things , str ): print ( self . things ) return self . things Arguments \u00b6 As you may have noticed, tackle-box supports two general types of hook calls, compact and expanded. The only way compact expressions are able to take arguments is through mapping those arguments to fields within hooks. This is done by making an _args private attribute which is a list of strings pointing to the attributes the indexed arguments relate to. For instance from our example before: class DoStuffHook ( BaseHook ): hook_type : str = \"do-stuff\" things : str = None more_things : str = None _args : list = [ 'things' , 'more_things' ] Now we are adding a field more_things which is another string that one could call like: compact-expression-> : do-stuff All the things Would be the equivalent of: expanded-expression : -> : do-stuff things : All more_things : the things This is because the first argument \"All\" after the hook type \"do-stuff\" is not encapsulated with quotes and so arguments after it are grouped together. If we wanted to call it with two distinct attributes, we'd need to put quotes around them like this: compact-expression-> : do-stuff \"All the things\" \"with other stuff\" Would be the equivalent of: expanded-expression : -> : do-stuff things : All the things more_things : with other stuff Arguments with list and dict types \u00b6 Input arguments can be of any type though in practical terms, the only way to input list/map types is through rendering variable inputs. For instance given this hook: class DoStuffHook ( BaseHook ): hook_type : str = \"do-stuff\" things : dict = None more_things : list = None _args : list = [ 'things' , 'more_things' ] One could use input args per the following tackle file: a_map : stuff : things a_list : - stuff - things do-> : do-stuff \"{{ a_map }}\" \"{{ a_list }}\" Controlling Rendering of Fields \u00b6 Sometimes it only makes sense to have inputs be maps or lists so for convenience sake there is a parameter to render strings by default so that users don't need to wrap with braces. For instance in this hook: from tackle import BaseHook , Field class DoStuffHook ( BaseHook ): hook_type : str = \"do-stuff\" things : dict = Field ( None , render_by_default = True ) You can see the extra Field function which when passing render_by_default into it, the string is automatically wrapped with jinja braces and rendered. On top of setting this on a per field basis, one could specify a list of fields like so: from tackle import BaseHook class DoStuffHook ( BaseHook ): hook_type : str = \"do-stuff\" things : dict = None _render_by_default : list = [ 'things' ] Which when ran in a tackle file would be: a_map : stuff : things do-1 : -> : do-stuff a_map do-2 : -> : do-stuff \"{{ a_map }}\" # Validates both are equivalent test-> : assert \"{{ do-1 }}\" \"{{ do-2 }}\" Validators and __init__ \u00b6 While not a tackle specific functionality, pydantic validators and __init__ special methods are supported. from pydantic import validator from tackle import BaseHook class DoStuffHook ( BaseHook ): hook_type : str = \"a_hook\" things : dict = None more_things : list = None _args : list = [ 'things' , 'more_things' ] @validator ( 'things' ) def validate ( cls , value ): # Check if the input is valid - throw error otherwise ... return value def __init__ ( self , ** data ): super () . __init__ ( ** data ) # Initialize the object ... def execute ( self ): ... Autogenerated Documentation \u00b6 Documentation can be autogenerated for hooks and providers that looks the same as the official documentation. There are two areas where documentation happens within a hook, in the docstring and within fields themselves. from tackle import BaseHook , Field class DoStuffHook ( BaseHook ): \"\"\"Put your hooks description here. Will be rendered as markdown.\"\"\" hook_type : str = \"do-stuff\" things : dict = Field ( None , description = \"Put the field's description here.\" ) _render_by_default : list = [ 'things' ] More specifics on autogenerated docs can be found in the creating providers docs.","title":"Writing Hooks"},{"location":"writing-hooks/#creating-hooks","text":"This document covers all aspects of writing hooks in python focusing on the API and it's semantics for how it can be used within tackle files. For creating providers and creating dependencies, please check out the creating providers section.","title":"Creating Hooks"},{"location":"writing-hooks/#overview","text":"Tackle box hooks are any object located within the hooks directory that extends a BaseHook object and implement an execute method as the entrypoint to calling the hook. BaseHook objects are pydantic objects as well such that their attributes need to include type annotations. All of these attributes are then made accessible when calling the hook from a yaml file. There are couple other semantics that will be described in this document such as mapping arguments, excluding from rendering, and auto-generating documentation for your hooks.","title":"Overview"},{"location":"writing-hooks/#basic-example","text":"The easiest way to understand this is through a simple example. If we had a file structure like this: \u251c\u2500\u2500 hooks \u2514\u2500\u2500 do_stuff.py # Name of file doesn't matter \u2514\u2500\u2500 tackle.yaml # Not needed We could have a file do_stuff.py that has an object DoStuffHook that extends the BaseHook and implements an execute method which in this case both prints and returns the things attribute. Additionally, there is a private _args attribute which can be used to map positional arguments to an attribute, in this case things (more on this later). from tackle import BaseHook , Field class DoStuffHook ( BaseHook ): hook_type : str = \"do-stuff\" things : str = Field ( None , description = \"All the things.\" ) _args : list = [ 'things' ] def execute ( self ): print ( self . things ) return self . things One could then run a tackle file that looks like this: compact-expression-> : do-stuff All the things expanded-expression : -> : do-stuff things : All the things Which when run would print out \"All the things\" twice and return the following context. compact-expression : All the things expanded-expression : All the things","title":"Basic Example"},{"location":"writing-hooks/#concepts","text":"","title":"Concepts"},{"location":"writing-hooks/#pydantic-and-types","text":"Pydantic has some idioms to be aware of when writing hooks specifically around types and fields. Every attribute needs to be declared with a type in pydantic and will throw an error if the type is not explicitly declared within the attribute's definition or if the wrong type is fed into the field. Because everything that is output from a hook needs to serializable (i.e. it can't return python objects), many pydantic types aren't usable unless they can be directly serialized back into a structured data format (i.e. a string, int, float, list, or dict). Multiple types for attributes are allowed by use of the Union or Optional types ( see difference ) so that within the execute statement one can qualify the type and process it appropriately. For instance: from tackle import BaseHook from typing import Union class DoStuffHook ( BaseHook ): hook_type : str = \"do-stuff\" things : Union [ str ] = None _args : list = [ 'things' ] def execute ( self ): if isinstance ( self . things , list ): for i in self . things : print ( f \"Thing = { i } \" ) elif isinstance ( self . things , str ): print ( self . things ) return self . things","title":"Pydantic and Types"},{"location":"writing-hooks/#arguments","text":"As you may have noticed, tackle-box supports two general types of hook calls, compact and expanded. The only way compact expressions are able to take arguments is through mapping those arguments to fields within hooks. This is done by making an _args private attribute which is a list of strings pointing to the attributes the indexed arguments relate to. For instance from our example before: class DoStuffHook ( BaseHook ): hook_type : str = \"do-stuff\" things : str = None more_things : str = None _args : list = [ 'things' , 'more_things' ] Now we are adding a field more_things which is another string that one could call like: compact-expression-> : do-stuff All the things Would be the equivalent of: expanded-expression : -> : do-stuff things : All more_things : the things This is because the first argument \"All\" after the hook type \"do-stuff\" is not encapsulated with quotes and so arguments after it are grouped together. If we wanted to call it with two distinct attributes, we'd need to put quotes around them like this: compact-expression-> : do-stuff \"All the things\" \"with other stuff\" Would be the equivalent of: expanded-expression : -> : do-stuff things : All the things more_things : with other stuff","title":"Arguments"},{"location":"writing-hooks/#arguments-with-list-and-dict-types","text":"Input arguments can be of any type though in practical terms, the only way to input list/map types is through rendering variable inputs. For instance given this hook: class DoStuffHook ( BaseHook ): hook_type : str = \"do-stuff\" things : dict = None more_things : list = None _args : list = [ 'things' , 'more_things' ] One could use input args per the following tackle file: a_map : stuff : things a_list : - stuff - things do-> : do-stuff \"{{ a_map }}\" \"{{ a_list }}\"","title":"Arguments with list and dict types"},{"location":"writing-hooks/#controlling-rendering-of-fields","text":"Sometimes it only makes sense to have inputs be maps or lists so for convenience sake there is a parameter to render strings by default so that users don't need to wrap with braces. For instance in this hook: from tackle import BaseHook , Field class DoStuffHook ( BaseHook ): hook_type : str = \"do-stuff\" things : dict = Field ( None , render_by_default = True ) You can see the extra Field function which when passing render_by_default into it, the string is automatically wrapped with jinja braces and rendered. On top of setting this on a per field basis, one could specify a list of fields like so: from tackle import BaseHook class DoStuffHook ( BaseHook ): hook_type : str = \"do-stuff\" things : dict = None _render_by_default : list = [ 'things' ] Which when ran in a tackle file would be: a_map : stuff : things do-1 : -> : do-stuff a_map do-2 : -> : do-stuff \"{{ a_map }}\" # Validates both are equivalent test-> : assert \"{{ do-1 }}\" \"{{ do-2 }}\"","title":"Controlling Rendering of Fields"},{"location":"writing-hooks/#validators-and-__init__","text":"While not a tackle specific functionality, pydantic validators and __init__ special methods are supported. from pydantic import validator from tackle import BaseHook class DoStuffHook ( BaseHook ): hook_type : str = \"a_hook\" things : dict = None more_things : list = None _args : list = [ 'things' , 'more_things' ] @validator ( 'things' ) def validate ( cls , value ): # Check if the input is valid - throw error otherwise ... return value def __init__ ( self , ** data ): super () . __init__ ( ** data ) # Initialize the object ... def execute ( self ): ...","title":"Validators and __init__"},{"location":"writing-hooks/#autogenerated-documentation","text":"Documentation can be autogenerated for hooks and providers that looks the same as the official documentation. There are two areas where documentation happens within a hook, in the docstring and within fields themselves. from tackle import BaseHook , Field class DoStuffHook ( BaseHook ): \"\"\"Put your hooks description here. Will be rendered as markdown.\"\"\" hook_type : str = \"do-stuff\" things : dict = Field ( None , description = \"Put the field's description here.\" ) _render_by_default : list = [ 'things' ] More specifics on autogenerated docs can be found in the creating providers docs.","title":"Autogenerated Documentation"},{"location":"writing-tackle-files/","text":"Tackle File Parsing Logic \u00b6 This document aims to provide an overview of the core parsing logic for tackle files which are arbitrary yaml files that have hooks embedded in them. Basics \u00b6 Tackle-box sequentially parses arbitrary json or yaml files with the parser only changing the data structure when hooks are called denoted by -> at the end of a key / item in a list. Hooks can perform a variety of different actions such as prompting for inputs, making web requests, or generating code and return values that are stored in the key they were called from. After any key / value / item in a list is parsed, it is available to be referenced / reused in additional hook calls through jinja rendering. Hook Call Forms \u00b6 Hooks can be called in two basic forms, expanded and compact. For instance: expanded : -> : input message : What is your name? # Equivalent to compact-> : input What is your name? In this example we are calling the input hook which has one mapped argument, message , which in the compact form of calling the input allows it to be written in a single line. The exact semantics of how arguments are mapped can be found in the writing hooks documentation. The input hook has several parameters that are not mapped as arguments such as default which can additionally be used in a compact form by including a -- in the parameter name. For instance: expanded : -> : input message : What is your name? default : robcxyz # Equivalent to compact-> : input What is your name? --default robcxyz # Notice the additional argument Tackle-box also enables conditionals, loops, and other base methods that are also able to be expressed in both hook call forms. For instance here we can see a for loop in both forms: ttd : - stuff - and - things expanded : -> : input message : What do you want to do? for : ttd # Strings are rendered by default for `for` loops default : \"{{item}}\" # Here we must explicitly render as default could be a str # Equivalent to compact-> : input What do you want to do? --for ttd --default \"{{ item }}\" For more information on loops and conditional, check out the hook methods documentation. Public vs Private Hook Calls \u00b6 Thus far all the examples have been of public hook calls denoted by -> arrows which run the hook and store the value in the key but sometimes you might want to call hooks but not have the key stored in the output. To do this you would instead run a private hook denoted by _> arrow. Such cases exist when you are dealing with a strict schema and want to embed actions / logic in that schema or you want to keep a clean context and ignore the output of a key. The output of a private hook call is still available to be used later in the same context and is only removed when the context changes such as when a tackle hook is called that parses another tackle file / provider. Special Cases \u00b6 While all logic can be expressed simply through calling hooks, several convenient shorthand forms exist for calling common hooks such as var for rendering a variable and block for parsing a level of the input. Rendering Variables \u00b6 Values / keys are not rendered by default but instead need to be rendered through a hook call. To make this easier, a special case exists where if the value of a hook call is wrapped with braces (ie key->: \"{{ another_key }}\" ) it is recursively rendered right away. For instance: a_map : stuff : things reference-> : \"{{ a_map }}\" Would result in: a_map : stuff : things reference : stuff : things This allows creation of renderable templates in keys that one can reuse depending on what the current context is. For instance: stuff : things a_map : more-stuff : \"{{ stuff }}\" reference-> : \"{{ a_map }}\" Would result in: stuff : things a_map : more-stuff : \"{{ stuff }}\" reference : stuff : things Blocks \u00b6 Sometimes it is convenient to be able to apply logic to entire blocks of yaml for which there is a special case embedded in the parser. For instance it is common to use a single / multi selector in a tackle file to restrict users to running a certain set of functions: action : -> : select What are we doing today? choices : - code : Code tackle stuff - do : Do things code-> : if : action == 'code' # Run a number of hooks conditional on the `action` arbitrary : contex : ... gen-> : tackle robcxyz/tackle-provider open-> : command touch code.py ... do-> : if : action == 'do' check_schedule-> : webbrowser https://calendar.google.com/ ... If this example was run, the user would be prompted for a selection which based on their input, the block of code hooks would be executed based on the if condition. Under the hood the parser is re-writing the input to execute a block hook like this example though the code above makes it simpler: code : -> : block if : action == 'code' items : arbitrary : contex : ... gen-> : tackle robcxyz/tackle-provider open-> : command touch code.py Block render context \u00b6 When writing blocks, one has access to two different render contexts, the local block context and the outer global context. For instance: stuff : things foo : bar code-> : ... foo : baz inner-context-> : \"{{ foo }}\" outer-context-> : \"{{ stuff }}\" In this example, the key \"inner-context\" would equal \"baz\" while the \"outer-context\" is able to reference \"stuff\". Side note on blocks - Try out match hooks \u00b6 For another way of conditionally parsing blocks of yaml, checkout the match hook which performs similarly to match / switch case statements per the below example. action : -> : select What are we doing today? choices : - code : Code tackle stuff - do : Do things run_action : -> : match value : \"{{ action }}\" case : code : gen-> : tackle robcxyz/tackle-provider ... do : if : action == 'do' check_schedule-> : webbrowser https://calendar.google.com/ ...","title":"Writing Tackle Files"},{"location":"writing-tackle-files/#tackle-file-parsing-logic","text":"This document aims to provide an overview of the core parsing logic for tackle files which are arbitrary yaml files that have hooks embedded in them.","title":"Tackle File Parsing Logic"},{"location":"writing-tackle-files/#basics","text":"Tackle-box sequentially parses arbitrary json or yaml files with the parser only changing the data structure when hooks are called denoted by -> at the end of a key / item in a list. Hooks can perform a variety of different actions such as prompting for inputs, making web requests, or generating code and return values that are stored in the key they were called from. After any key / value / item in a list is parsed, it is available to be referenced / reused in additional hook calls through jinja rendering.","title":"Basics"},{"location":"writing-tackle-files/#hook-call-forms","text":"Hooks can be called in two basic forms, expanded and compact. For instance: expanded : -> : input message : What is your name? # Equivalent to compact-> : input What is your name? In this example we are calling the input hook which has one mapped argument, message , which in the compact form of calling the input allows it to be written in a single line. The exact semantics of how arguments are mapped can be found in the writing hooks documentation. The input hook has several parameters that are not mapped as arguments such as default which can additionally be used in a compact form by including a -- in the parameter name. For instance: expanded : -> : input message : What is your name? default : robcxyz # Equivalent to compact-> : input What is your name? --default robcxyz # Notice the additional argument Tackle-box also enables conditionals, loops, and other base methods that are also able to be expressed in both hook call forms. For instance here we can see a for loop in both forms: ttd : - stuff - and - things expanded : -> : input message : What do you want to do? for : ttd # Strings are rendered by default for `for` loops default : \"{{item}}\" # Here we must explicitly render as default could be a str # Equivalent to compact-> : input What do you want to do? --for ttd --default \"{{ item }}\" For more information on loops and conditional, check out the hook methods documentation.","title":"Hook Call Forms"},{"location":"writing-tackle-files/#public-vs-private-hook-calls","text":"Thus far all the examples have been of public hook calls denoted by -> arrows which run the hook and store the value in the key but sometimes you might want to call hooks but not have the key stored in the output. To do this you would instead run a private hook denoted by _> arrow. Such cases exist when you are dealing with a strict schema and want to embed actions / logic in that schema or you want to keep a clean context and ignore the output of a key. The output of a private hook call is still available to be used later in the same context and is only removed when the context changes such as when a tackle hook is called that parses another tackle file / provider.","title":"Public vs Private Hook Calls"},{"location":"writing-tackle-files/#special-cases","text":"While all logic can be expressed simply through calling hooks, several convenient shorthand forms exist for calling common hooks such as var for rendering a variable and block for parsing a level of the input.","title":"Special Cases"},{"location":"writing-tackle-files/#rendering-variables","text":"Values / keys are not rendered by default but instead need to be rendered through a hook call. To make this easier, a special case exists where if the value of a hook call is wrapped with braces (ie key->: \"{{ another_key }}\" ) it is recursively rendered right away. For instance: a_map : stuff : things reference-> : \"{{ a_map }}\" Would result in: a_map : stuff : things reference : stuff : things This allows creation of renderable templates in keys that one can reuse depending on what the current context is. For instance: stuff : things a_map : more-stuff : \"{{ stuff }}\" reference-> : \"{{ a_map }}\" Would result in: stuff : things a_map : more-stuff : \"{{ stuff }}\" reference : stuff : things","title":"Rendering Variables"},{"location":"writing-tackle-files/#blocks","text":"Sometimes it is convenient to be able to apply logic to entire blocks of yaml for which there is a special case embedded in the parser. For instance it is common to use a single / multi selector in a tackle file to restrict users to running a certain set of functions: action : -> : select What are we doing today? choices : - code : Code tackle stuff - do : Do things code-> : if : action == 'code' # Run a number of hooks conditional on the `action` arbitrary : contex : ... gen-> : tackle robcxyz/tackle-provider open-> : command touch code.py ... do-> : if : action == 'do' check_schedule-> : webbrowser https://calendar.google.com/ ... If this example was run, the user would be prompted for a selection which based on their input, the block of code hooks would be executed based on the if condition. Under the hood the parser is re-writing the input to execute a block hook like this example though the code above makes it simpler: code : -> : block if : action == 'code' items : arbitrary : contex : ... gen-> : tackle robcxyz/tackle-provider open-> : command touch code.py","title":"Blocks"},{"location":"writing-tackle-files/#block-render-context","text":"When writing blocks, one has access to two different render contexts, the local block context and the outer global context. For instance: stuff : things foo : bar code-> : ... foo : baz inner-context-> : \"{{ foo }}\" outer-context-> : \"{{ stuff }}\" In this example, the key \"inner-context\" would equal \"baz\" while the \"outer-context\" is able to reference \"stuff\".","title":"Block render context"},{"location":"writing-tackle-files/#side-note-on-blocks-try-out-match-hooks","text":"For another way of conditionally parsing blocks of yaml, checkout the match hook which performs similarly to match / switch case statements per the below example. action : -> : select What are we doing today? choices : - code : Code tackle stuff - do : Do things run_action : -> : match value : \"{{ action }}\" case : code : gen-> : tackle robcxyz/tackle-provider ... do : if : action == 'do' check_schedule-> : webbrowser https://calendar.google.com/ ...","title":"Side note on blocks - Try out match hooks"},{"location":"examples/","text":"Tackle File Example \u00b6 Prompting Reading and writing data Generating code Context manipulation Complex logic","title":"Index"},{"location":"examples/#tackle-file-example","text":"Prompting Reading and writing data Generating code Context manipulation Complex logic","title":"Tackle File Example"},{"location":"examples/complex-logic/","text":"Tackle File Complex Logic \u00b6 TODO","title":"Complex Logic"},{"location":"examples/complex-logic/#tackle-file-complex-logic","text":"TODO","title":"Tackle File Complex Logic"},{"location":"examples/context-manipulation/","text":"Tackle File Context Manipulation \u00b6 TODO","title":"Context Manipulation"},{"location":"examples/context-manipulation/#tackle-file-context-manipulation","text":"TODO","title":"Tackle File Context Manipulation"},{"location":"examples/generating-code/","text":"Tackle File Generating Code \u00b6 Check out the code generation tutorial for a more in depth explanation of code generators. This file is more for different example patterns that can be used when generating code: TODO generate Hook \u00b6 As mentioned in the tutorial, the generate hook is generally used to generate code. Example showing rendering a cookiecutter template","title":"Generating Code"},{"location":"examples/generating-code/#tackle-file-generating-code","text":"Check out the code generation tutorial for a more in depth explanation of code generators. This file is more for different example patterns that can be used when generating code: TODO","title":"Tackle File Generating Code"},{"location":"examples/generating-code/#generate-hook","text":"As mentioned in the tutorial, the generate hook is generally used to generate code. Example showing rendering a cookiecutter template","title":"generate Hook"},{"location":"examples/prompting/","text":"Example Hook Calls \u00b6 Examples of common hook calls that should allow the majority of actions. Prompts \u00b6 Prompts are based on wrapping functionality of PyInquirer. The most common things one would want to prompt the user around are basic inputs to fields, selections from a list of selections, and checkbox inputs from a list. input \u00b6 Basic inputs functionality for fields. Docs Tackle File \u00b6 input-minimal-> : input input-compact-> : input \"What stuff?\" input-expanded : -> : input message : \"What stuff?\" default : things Prompt in CLI \u00b6 ? input-minimal >>> ? What stuff? ? What stuff? things Resulting Context \u00b6 input-minimal : <user input> input-compact : <user input> input-expanded : things select \u00b6","title":"Prompting"},{"location":"examples/prompting/#example-hook-calls","text":"Examples of common hook calls that should allow the majority of actions.","title":"Example Hook Calls"},{"location":"examples/prompting/#prompts","text":"Prompts are based on wrapping functionality of PyInquirer. The most common things one would want to prompt the user around are basic inputs to fields, selections from a list of selections, and checkbox inputs from a list.","title":"Prompts"},{"location":"examples/prompting/#input","text":"Basic inputs functionality for fields. Docs","title":"input"},{"location":"examples/prompting/#tackle-file","text":"input-minimal-> : input input-compact-> : input \"What stuff?\" input-expanded : -> : input message : \"What stuff?\" default : things","title":"Tackle File"},{"location":"examples/prompting/#prompt-in-cli","text":"? input-minimal >>> ? What stuff? ? What stuff? things","title":"Prompt in CLI"},{"location":"examples/prompting/#resulting-context","text":"input-minimal : <user input> input-compact : <user input> input-expanded : things","title":"Resulting Context"},{"location":"examples/prompting/#select","text":"","title":"select"},{"location":"examples/reading-writing-data/","text":"","title":"Reading and Writing Data"},{"location":"providers/git/","text":"git \u00b6 None Hooks \u00b6 Type Description Return git_clone Hook to create clone a repo.Wraps https://gitpython.readthedocs.io/en/stable/reference.html#git.repo.base.Repo.clone:param url: \u2013 valid git url, see http://www.kernel.org/pub/software/scm/git/docs/git-clone.html#URLS:param to_path: \u2013 Path to which the repository should be cloned to:param progress: \u2013 See \u2018git.remote.Remote.push\u2019.:param env: \u2013 Optional dictionary containing the desired environment variables. Note: Provided variables will be used to update the execution environment for git. If some variable is not specified in env and is defined in os.environ, value from os.environ will be used. If you want to unset some variable, consider providing empty string as its value.:param path: \u2013 is the full path of the new repo (traditionally ends with ./ .git).:param progress: \u2013 See \u2018git.remote.Remote.push\u2019.:param multi_options: \u2013 A list of Clone options that can be provided multiple times. One option per list item which is passed exactly as specified to clone. For example [\u2018\u2013config core.filemode=false\u2019, \u2018\u2013config core.ignorecase\u2019, \u2018\u2013recurse-submodule=repo1_path\u2019, \u2018\u2013recurse-submodule=repo2_path\u2019]:param kwargs: \u2013 odbt = ObjectDatabase Type, allowing to determine the object database implementation used by the returned Repo instance All remaining keyword arguments are given to the git-clone command meta_repo Hook to create meta repo.:param command: Des... Requirements \u00b6 Requirement GitPython","title":"Git"},{"location":"providers/git/#git","text":"None","title":"git"},{"location":"providers/git/#hooks","text":"Type Description Return git_clone Hook to create clone a repo.Wraps https://gitpython.readthedocs.io/en/stable/reference.html#git.repo.base.Repo.clone:param url: \u2013 valid git url, see http://www.kernel.org/pub/software/scm/git/docs/git-clone.html#URLS:param to_path: \u2013 Path to which the repository should be cloned to:param progress: \u2013 See \u2018git.remote.Remote.push\u2019.:param env: \u2013 Optional dictionary containing the desired environment variables. Note: Provided variables will be used to update the execution environment for git. If some variable is not specified in env and is defined in os.environ, value from os.environ will be used. If you want to unset some variable, consider providing empty string as its value.:param path: \u2013 is the full path of the new repo (traditionally ends with ./ .git).:param progress: \u2013 See \u2018git.remote.Remote.push\u2019.:param multi_options: \u2013 A list of Clone options that can be provided multiple times. One option per list item which is passed exactly as specified to clone. For example [\u2018\u2013config core.filemode=false\u2019, \u2018\u2013config core.ignorecase\u2019, \u2018\u2013recurse-submodule=repo1_path\u2019, \u2018\u2013recurse-submodule=repo2_path\u2019]:param kwargs: \u2013 odbt = ObjectDatabase Type, allowing to determine the object database implementation used by the returned Repo instance All remaining keyword arguments are given to the git-clone command meta_repo Hook to create meta repo.:param command: Des...","title":"Hooks"},{"location":"providers/git/#requirements","text":"Requirement GitPython","title":"Requirements"},{"location":"providers/git/git_clone/","text":"git_clone \u00b6 Hook to create clone a repo.Wraps https://gitpython.readthedocs.io/en/stable/reference.html#git.repo.base.Repo.clone:param url: \u2013 valid git url, see http://www.kernel.org/pub/software/scm/git/docs/git-clone.html#URLS:param to_path: \u2013 Path to which the repository should be cloned to:param progress: \u2013 See \u2018git.remote.Remote.push\u2019.:param env: \u2013 Optional dictionary containing the desired environment variables. Note: Provided variables will be used to update the execution environment for git. If some variable is not specified in env and is defined in os.environ, value from os.environ will be used. If you want to unset some variable, consider providing empty string as its value.:param path: \u2013 is the full path of the new repo (traditionally ends with ./ .git).:param progress: \u2013 See \u2018git.remote.Remote.push\u2019.:param multi_options: \u2013 A list of Clone options that can be provided multiple times. One option per list item which is passed exactly as specified to clone. For example [\u2018\u2013config core.filemode=false\u2019, \u2018\u2013config core.ignorecase\u2019, \u2018\u2013recurse-submodule=repo1_path\u2019, \u2018\u2013recurse-submodule=repo2_path\u2019]:param kwargs: \u2013 odbt = ObjectDatabase Type, allowing to determine the object database implementation used by the returned Repo instance All remaining keyword arguments are given to the git-clone command Inputs \u00b6 Name Type Default Required Description url string to_path string progress string env object multi_options array kwargs object {} X Arguments \u00b6 Position Argument Type Output \u00b6 None","title":"git_clone"},{"location":"providers/git/git_clone/#git_clone","text":"Hook to create clone a repo.Wraps https://gitpython.readthedocs.io/en/stable/reference.html#git.repo.base.Repo.clone:param url: \u2013 valid git url, see http://www.kernel.org/pub/software/scm/git/docs/git-clone.html#URLS:param to_path: \u2013 Path to which the repository should be cloned to:param progress: \u2013 See \u2018git.remote.Remote.push\u2019.:param env: \u2013 Optional dictionary containing the desired environment variables. Note: Provided variables will be used to update the execution environment for git. If some variable is not specified in env and is defined in os.environ, value from os.environ will be used. If you want to unset some variable, consider providing empty string as its value.:param path: \u2013 is the full path of the new repo (traditionally ends with ./ .git).:param progress: \u2013 See \u2018git.remote.Remote.push\u2019.:param multi_options: \u2013 A list of Clone options that can be provided multiple times. One option per list item which is passed exactly as specified to clone. For example [\u2018\u2013config core.filemode=false\u2019, \u2018\u2013config core.ignorecase\u2019, \u2018\u2013recurse-submodule=repo1_path\u2019, \u2018\u2013recurse-submodule=repo2_path\u2019]:param kwargs: \u2013 odbt = ObjectDatabase Type, allowing to determine the object database implementation used by the returned Repo instance All remaining keyword arguments are given to the git-clone command","title":"git_clone"},{"location":"providers/git/git_clone/#inputs","text":"Name Type Default Required Description url string to_path string progress string env object multi_options array kwargs object {} X","title":"Inputs"},{"location":"providers/git/git_clone/#arguments","text":"Position Argument Type","title":"Arguments"},{"location":"providers/git/git_clone/#output","text":"None","title":"Output"},{"location":"providers/git/meta_repo/","text":"meta_repo \u00b6 Hook to create meta repo.:param command: Des... Inputs \u00b6 Name Type Default Required Description command string repos object repo_tree object select boolean True X protocol string https X token string base_url string github.com X git_org string base_dir string /home/runner/work/tackle-box/tackle-box/tackle/providers/git X repo_tree_overrides array Arguments \u00b6 Position Argument Type Output \u00b6 None","title":"meta_repo"},{"location":"providers/git/meta_repo/#meta_repo","text":"Hook to create meta repo.:param command: Des...","title":"meta_repo"},{"location":"providers/git/meta_repo/#inputs","text":"Name Type Default Required Description command string repos object repo_tree object select boolean True X protocol string https X token string base_url string github.com X git_org string base_dir string /home/runner/work/tackle-box/tackle-box/tackle/providers/git X repo_tree_overrides array","title":"Inputs"},{"location":"providers/git/meta_repo/#arguments","text":"Position Argument Type","title":"Arguments"},{"location":"providers/git/meta_repo/#output","text":"None","title":"Output"},{"location":"providers/pyinquirer/","text":"pyinquirer \u00b6 None Hooks \u00b6 Type Description Return editor Hook for PyInquirer editor type prompts.https://github.com/CITGuru/PyInquirer/blob/master/examples/expand.py:param message: String message to show when prompting.:param choices: A list of strings or list of k/v pairs per above description:param name: A key to insert the output value to. If not provided defaults to inserting into parent key input Hook for PyInquirer 'input' type prompts.Example: https://github.com/CITGuru/PyInquirer/blob/master/examples/input.py:param message: String message to show when prompting.:param choices: A list of strings or list of k/v pairs per above description:param name: A key to insert the output value to. If not provided defaults to inserting into parent key:return: String answer confirm Hook to confirm with a message and return a boolean. rawlist Hook for PyInquirer 'rawlist' type prompts.Example: https://github.com/CITGuru/PyInquirer/blob/master/examples/rawlist.py:param message: String message to show when prompting.:param choices: A list of strings or list of k/v pairs per above description:param name: A key to insert the output value to. If not provided defaults to inserting into parent key:return: String for the answer expand Hook for PyInquirer expand type prompt.Example: https://github.com/CITGuru/PyInquirer/blob/master/examples/expand.py:param message: String message to show when prompting.:param choices: A list of strings or list of k/v pairs per above description:param name: A key to insert the output value to. If not provided defaults to inserting into parent key:return: List of answers select Hook for PyInquirer 'list' type prompts.Takes in two forms of choices inputs.1. list of string2. list of maps with the key as the output, the value as displayed question:param message: String message to show when prompting.:param choices: A list of strings or list of k/v pairs per above description:param name: A key to insert the output value to. If not provided defaults to inserting into parent key:param index::return: String for answer password Hook for PyInquirer password type prompts. checkbox Hook for PyInquirer type prompts.Takes in three forms of choices inputs.1. list of string2. list of maps with all keys = name 3. list of maps with the key as the output, the value as displayed question:param message: String message to show when prompting.:param choices: A list of strings or list of k/v pairs per above description:param name: A key to insert the output value to. If not provided defaults to inserting into parent key:param qmark: A marker to select with like \ud83d\ude03:return: List of answers","title":"Prompts"},{"location":"providers/pyinquirer/#pyinquirer","text":"None","title":"pyinquirer"},{"location":"providers/pyinquirer/#hooks","text":"Type Description Return editor Hook for PyInquirer editor type prompts.https://github.com/CITGuru/PyInquirer/blob/master/examples/expand.py:param message: String message to show when prompting.:param choices: A list of strings or list of k/v pairs per above description:param name: A key to insert the output value to. If not provided defaults to inserting into parent key input Hook for PyInquirer 'input' type prompts.Example: https://github.com/CITGuru/PyInquirer/blob/master/examples/input.py:param message: String message to show when prompting.:param choices: A list of strings or list of k/v pairs per above description:param name: A key to insert the output value to. If not provided defaults to inserting into parent key:return: String answer confirm Hook to confirm with a message and return a boolean. rawlist Hook for PyInquirer 'rawlist' type prompts.Example: https://github.com/CITGuru/PyInquirer/blob/master/examples/rawlist.py:param message: String message to show when prompting.:param choices: A list of strings or list of k/v pairs per above description:param name: A key to insert the output value to. If not provided defaults to inserting into parent key:return: String for the answer expand Hook for PyInquirer expand type prompt.Example: https://github.com/CITGuru/PyInquirer/blob/master/examples/expand.py:param message: String message to show when prompting.:param choices: A list of strings or list of k/v pairs per above description:param name: A key to insert the output value to. If not provided defaults to inserting into parent key:return: List of answers select Hook for PyInquirer 'list' type prompts.Takes in two forms of choices inputs.1. list of string2. list of maps with the key as the output, the value as displayed question:param message: String message to show when prompting.:param choices: A list of strings or list of k/v pairs per above description:param name: A key to insert the output value to. If not provided defaults to inserting into parent key:param index::return: String for answer password Hook for PyInquirer password type prompts. checkbox Hook for PyInquirer type prompts.Takes in three forms of choices inputs.1. list of string2. list of maps with all keys = name 3. list of maps with the key as the output, the value as displayed question:param message: String message to show when prompting.:param choices: A list of strings or list of k/v pairs per above description:param name: A key to insert the output value to. If not provided defaults to inserting into parent key:param qmark: A marker to select with like \ud83d\ude03:return: List of answers","title":"Hooks"},{"location":"providers/pyinquirer/checkbox/","text":"checkbox \u00b6 Hook for PyInquirer type prompts.Takes in three forms of choices inputs.1. list of string2. list of maps with all keys = name 3. list of maps with the key as the output, the value as displayed question:param message: String message to show when prompting.:param choices: A list of strings or list of k/v pairs per above description:param name: A key to insert the output value to. If not provided defaults to inserting into parent key:param qmark: A marker to select with like \ud83d\ude03:return: List of answers Inputs \u00b6 Name Type Default Required Description message string String message to show when prompting. index boolean False X Boolean to return the output in a list. default Any [] X Default for the return value choices Any Either a list of strings or dictionary . checked boolean False X Boolean if the default choices should all be checked. name string tmp X Arguments \u00b6 Position Argument Type 1 message str Output \u00b6 list","title":"checkbox"},{"location":"providers/pyinquirer/checkbox/#checkbox","text":"Hook for PyInquirer type prompts.Takes in three forms of choices inputs.1. list of string2. list of maps with all keys = name 3. list of maps with the key as the output, the value as displayed question:param message: String message to show when prompting.:param choices: A list of strings or list of k/v pairs per above description:param name: A key to insert the output value to. If not provided defaults to inserting into parent key:param qmark: A marker to select with like \ud83d\ude03:return: List of answers","title":"checkbox"},{"location":"providers/pyinquirer/checkbox/#inputs","text":"Name Type Default Required Description message string String message to show when prompting. index boolean False X Boolean to return the output in a list. default Any [] X Default for the return value choices Any Either a list of strings or dictionary . checked boolean False X Boolean if the default choices should all be checked. name string tmp X","title":"Inputs"},{"location":"providers/pyinquirer/checkbox/#arguments","text":"Position Argument Type 1 message str","title":"Arguments"},{"location":"providers/pyinquirer/checkbox/#output","text":"list","title":"Output"},{"location":"providers/pyinquirer/confirm/","text":"confirm \u00b6 Hook to confirm with a message and return a boolean. Inputs \u00b6 Name Type Default Required Description default Any True X Default choice. message string String message to show when prompting. name string tmp X Extra key to embed into. Artifact of API. Arguments \u00b6 Position Argument Type 1 message str Output \u00b6 bool","title":"confirm"},{"location":"providers/pyinquirer/confirm/#confirm","text":"Hook to confirm with a message and return a boolean.","title":"confirm"},{"location":"providers/pyinquirer/confirm/#inputs","text":"Name Type Default Required Description default Any True X Default choice. message string String message to show when prompting. name string tmp X Extra key to embed into. Artifact of API.","title":"Inputs"},{"location":"providers/pyinquirer/confirm/#arguments","text":"Position Argument Type 1 message str","title":"Arguments"},{"location":"providers/pyinquirer/confirm/#output","text":"bool","title":"Output"},{"location":"providers/pyinquirer/editor/","text":"editor \u00b6 Hook for PyInquirer editor type prompts.https://github.com/CITGuru/PyInquirer/blob/master/examples/expand.py:param message: String message to show when prompting.:param choices: A list of strings or list of k/v pairs per above description:param name: A key to insert the output value to. If not provided defaults to inserting into parent key Inputs \u00b6 Name Type Default Required Description default Any Default selection. name string tmp X Extra key to embed into. Artifact of API. message string String message to show when prompting. Arguments \u00b6 Position Argument Type 1 message str 2 default any Output \u00b6 bool","title":"editor"},{"location":"providers/pyinquirer/editor/#editor","text":"Hook for PyInquirer editor type prompts.https://github.com/CITGuru/PyInquirer/blob/master/examples/expand.py:param message: String message to show when prompting.:param choices: A list of strings or list of k/v pairs per above description:param name: A key to insert the output value to. If not provided defaults to inserting into parent key","title":"editor"},{"location":"providers/pyinquirer/editor/#inputs","text":"Name Type Default Required Description default Any Default selection. name string tmp X Extra key to embed into. Artifact of API. message string String message to show when prompting.","title":"Inputs"},{"location":"providers/pyinquirer/editor/#arguments","text":"Position Argument Type 1 message str 2 default any","title":"Arguments"},{"location":"providers/pyinquirer/editor/#output","text":"bool","title":"Output"},{"location":"providers/pyinquirer/expand/","text":"expand \u00b6 Hook for PyInquirer expand type prompt.Example: https://github.com/CITGuru/PyInquirer/blob/master/examples/expand.py:param message: String message to show when prompting.:param choices: A list of strings or list of k/v pairs per above description:param name: A key to insert the output value to. If not provided defaults to inserting into parent key:return: List of answers Inputs \u00b6 Name Type Default Required Description default Any Default selection. name string tmp X Extra key to embed into. Artifact of API. message string String message to show when prompting. Arguments \u00b6 Position Argument Type 1 message str 2 default any Output \u00b6 None","title":"expand"},{"location":"providers/pyinquirer/expand/#expand","text":"Hook for PyInquirer expand type prompt.Example: https://github.com/CITGuru/PyInquirer/blob/master/examples/expand.py:param message: String message to show when prompting.:param choices: A list of strings or list of k/v pairs per above description:param name: A key to insert the output value to. If not provided defaults to inserting into parent key:return: List of answers","title":"expand"},{"location":"providers/pyinquirer/expand/#inputs","text":"Name Type Default Required Description default Any Default selection. name string tmp X Extra key to embed into. Artifact of API. message string String message to show when prompting.","title":"Inputs"},{"location":"providers/pyinquirer/expand/#arguments","text":"Position Argument Type 1 message str 2 default any","title":"Arguments"},{"location":"providers/pyinquirer/expand/#output","text":"None","title":"Output"},{"location":"providers/pyinquirer/input/","text":"input \u00b6 Hook for PyInquirer 'input' type prompts.Example: https://github.com/CITGuru/PyInquirer/blob/master/examples/input.py:param message: String message to show when prompting.:param choices: A list of strings or list of k/v pairs per above description:param name: A key to insert the output value to. If not provided defaults to inserting into parent key:return: String answer Inputs \u00b6 Name Type Default Required Description default Any Default choice. message string String message to show when prompting. name string tmp X Extra key to embed into. Artifact of API. Arguments \u00b6 Position Argument Type 1 message str Output \u00b6 None","title":"input"},{"location":"providers/pyinquirer/input/#input","text":"Hook for PyInquirer 'input' type prompts.Example: https://github.com/CITGuru/PyInquirer/blob/master/examples/input.py:param message: String message to show when prompting.:param choices: A list of strings or list of k/v pairs per above description:param name: A key to insert the output value to. If not provided defaults to inserting into parent key:return: String answer","title":"input"},{"location":"providers/pyinquirer/input/#inputs","text":"Name Type Default Required Description default Any Default choice. message string String message to show when prompting. name string tmp X Extra key to embed into. Artifact of API.","title":"Inputs"},{"location":"providers/pyinquirer/input/#arguments","text":"Position Argument Type 1 message str","title":"Arguments"},{"location":"providers/pyinquirer/input/#output","text":"None","title":"Output"},{"location":"providers/pyinquirer/password/","text":"password \u00b6 Hook for PyInquirer password type prompts. Inputs \u00b6 Name Type Default Required Description default Any Default choice. message string String message to show when prompting. name string tmp X Extra key to embed into. Artifact of API. Arguments \u00b6 Position Argument Type 1 message str 2 default any Output \u00b6 bool","title":"password"},{"location":"providers/pyinquirer/password/#password","text":"Hook for PyInquirer password type prompts.","title":"password"},{"location":"providers/pyinquirer/password/#inputs","text":"Name Type Default Required Description default Any Default choice. message string String message to show when prompting. name string tmp X Extra key to embed into. Artifact of API.","title":"Inputs"},{"location":"providers/pyinquirer/password/#arguments","text":"Position Argument Type 1 message str 2 default any","title":"Arguments"},{"location":"providers/pyinquirer/password/#output","text":"bool","title":"Output"},{"location":"providers/pyinquirer/rawlist/","text":"rawlist \u00b6 Hook for PyInquirer 'rawlist' type prompts.Example: https://github.com/CITGuru/PyInquirer/blob/master/examples/rawlist.py:param message: String message to show when prompting.:param choices: A list of strings or list of k/v pairs per above description:param name: A key to insert the output value to. If not provided defaults to inserting into parent key:return: String for the answer Inputs \u00b6 Name Type Default Required Description default Any Default choice. message string String message to show when prompting. name string tmp X Extra key to embed into. Artifact of API. Arguments \u00b6 Position Argument Type 1 message str 2 default any Output \u00b6 None","title":"rawlist"},{"location":"providers/pyinquirer/rawlist/#rawlist","text":"Hook for PyInquirer 'rawlist' type prompts.Example: https://github.com/CITGuru/PyInquirer/blob/master/examples/rawlist.py:param message: String message to show when prompting.:param choices: A list of strings or list of k/v pairs per above description:param name: A key to insert the output value to. If not provided defaults to inserting into parent key:return: String for the answer","title":"rawlist"},{"location":"providers/pyinquirer/rawlist/#inputs","text":"Name Type Default Required Description default Any Default choice. message string String message to show when prompting. name string tmp X Extra key to embed into. Artifact of API.","title":"Inputs"},{"location":"providers/pyinquirer/rawlist/#arguments","text":"Position Argument Type 1 message str 2 default any","title":"Arguments"},{"location":"providers/pyinquirer/rawlist/#output","text":"None","title":"Output"},{"location":"providers/pyinquirer/select/","text":"select \u00b6 Hook for PyInquirer 'list' type prompts.Takes in two forms of choices inputs.1. list of string2. list of maps with the key as the output, the value as displayed question:param message: String message to show when prompting.:param choices: A list of strings or list of k/v pairs per above description:param name: A key to insert the output value to. If not provided defaults to inserting into parent key:param index::return: String for answer Inputs \u00b6 Name Type Default Required Description message string String message to show when prompting. default Any Default choice. name string tmp X Extra key to embed into. Artifact of API. choices Any List of strings or dicts with keys as output and values as display. index boolean False X Boolean to return the index instead of the answer Arguments \u00b6 Position Argument Type 1 message str Output \u00b6 str","title":"select"},{"location":"providers/pyinquirer/select/#select","text":"Hook for PyInquirer 'list' type prompts.Takes in two forms of choices inputs.1. list of string2. list of maps with the key as the output, the value as displayed question:param message: String message to show when prompting.:param choices: A list of strings or list of k/v pairs per above description:param name: A key to insert the output value to. If not provided defaults to inserting into parent key:param index::return: String for answer","title":"select"},{"location":"providers/pyinquirer/select/#inputs","text":"Name Type Default Required Description message string String message to show when prompting. default Any Default choice. name string tmp X Extra key to embed into. Artifact of API. choices Any List of strings or dicts with keys as output and values as display. index boolean False X Boolean to return the index instead of the answer","title":"Inputs"},{"location":"providers/pyinquirer/select/#arguments","text":"Position Argument Type 1 message str","title":"Arguments"},{"location":"providers/pyinquirer/select/#output","text":"str","title":"Output"},{"location":"providers/requests/","text":"requests \u00b6 None Hooks \u00b6 Type Description Return delete Hook for Requests 'delete' type prompts. Link get Hook for Requests 'get' type prompts. Link patch Hook for Requests 'patch' type prompts. Link post Hook for Requests 'post' type prompts. Link put Hook for Requests 'put' type prompts. Link Requirements \u00b6 Requirement requests","title":"Requests"},{"location":"providers/requests/#requests","text":"None","title":"requests"},{"location":"providers/requests/#hooks","text":"Type Description Return delete Hook for Requests 'delete' type prompts. Link get Hook for Requests 'get' type prompts. Link patch Hook for Requests 'patch' type prompts. Link post Hook for Requests 'post' type prompts. Link put Hook for Requests 'put' type prompts. Link","title":"Hooks"},{"location":"providers/requests/#requirements","text":"Requirement requests","title":"Requirements"},{"location":"providers/requests/delete/","text":"delete \u00b6 Hook for Requests 'delete' type prompts. Link Inputs \u00b6 Name Type Default Required Description url string URL for the new Request object. kwargs Any {} X Optional arguments that request takes. no_exit boolean False X Whether to exit on non-200 response. Arguments \u00b6 Position Argument Type 1 url str 2 kwargs union Output \u00b6 None","title":"delete"},{"location":"providers/requests/delete/#delete","text":"Hook for Requests 'delete' type prompts. Link","title":"delete"},{"location":"providers/requests/delete/#inputs","text":"Name Type Default Required Description url string URL for the new Request object. kwargs Any {} X Optional arguments that request takes. no_exit boolean False X Whether to exit on non-200 response.","title":"Inputs"},{"location":"providers/requests/delete/#arguments","text":"Position Argument Type 1 url str 2 kwargs union","title":"Arguments"},{"location":"providers/requests/delete/#output","text":"None","title":"Output"},{"location":"providers/requests/get/","text":"get \u00b6 Hook for Requests 'get' type prompts. Link Inputs \u00b6 Name Type Default Required Description url string URL for the new Request object. kwargs Any {} X Optional arguments that request takes. params object Dictionary, list of tuples or bytes to send in the query string for the Request. no_exit boolean False X Whether to exit on non-200 response. Arguments \u00b6 Position Argument Type 1 url str 2 kwargs union 3 params dict Output \u00b6 dict","title":"get"},{"location":"providers/requests/get/#get","text":"Hook for Requests 'get' type prompts. Link","title":"get"},{"location":"providers/requests/get/#inputs","text":"Name Type Default Required Description url string URL for the new Request object. kwargs Any {} X Optional arguments that request takes. params object Dictionary, list of tuples or bytes to send in the query string for the Request. no_exit boolean False X Whether to exit on non-200 response.","title":"Inputs"},{"location":"providers/requests/get/#arguments","text":"Position Argument Type 1 url str 2 kwargs union 3 params dict","title":"Arguments"},{"location":"providers/requests/get/#output","text":"dict","title":"Output"},{"location":"providers/requests/patch/","text":"patch \u00b6 Hook for Requests 'patch' type prompts. Link Inputs \u00b6 Name Type Default Required Description url string URL for the new Request object. kwargs Any {} X Optional arguments that request takes. data Any Dictionary, list of tuples, bytes, or file-like object to send in the body of the Request. input_json object Json data to send in the body of the Request. no_exit boolean False X Whether to exit on non-200 response. Arguments \u00b6 Position Argument Type 1 url str 2 data any 3 kwargs union Output \u00b6 None","title":"patch"},{"location":"providers/requests/patch/#patch","text":"Hook for Requests 'patch' type prompts. Link","title":"patch"},{"location":"providers/requests/patch/#inputs","text":"Name Type Default Required Description url string URL for the new Request object. kwargs Any {} X Optional arguments that request takes. data Any Dictionary, list of tuples, bytes, or file-like object to send in the body of the Request. input_json object Json data to send in the body of the Request. no_exit boolean False X Whether to exit on non-200 response.","title":"Inputs"},{"location":"providers/requests/patch/#arguments","text":"Position Argument Type 1 url str 2 data any 3 kwargs union","title":"Arguments"},{"location":"providers/requests/patch/#output","text":"None","title":"Output"},{"location":"providers/requests/post/","text":"post \u00b6 Hook for Requests 'post' type prompts. Link Inputs \u00b6 Name Type Default Required Description url string URL for the new Request object. kwargs Any {} X Optional arguments that request takes. data Any Dictionary, list of tuples, bytes, or file-like object to send in the body of the Request. input_json object no_exit boolean False X Whether to exit on non-200 response. Arguments \u00b6 Position Argument Type 1 url str 2 data any 3 kwargs union Output \u00b6 dict","title":"post"},{"location":"providers/requests/post/#post","text":"Hook for Requests 'post' type prompts. Link","title":"post"},{"location":"providers/requests/post/#inputs","text":"Name Type Default Required Description url string URL for the new Request object. kwargs Any {} X Optional arguments that request takes. data Any Dictionary, list of tuples, bytes, or file-like object to send in the body of the Request. input_json object no_exit boolean False X Whether to exit on non-200 response.","title":"Inputs"},{"location":"providers/requests/post/#arguments","text":"Position Argument Type 1 url str 2 data any 3 kwargs union","title":"Arguments"},{"location":"providers/requests/post/#output","text":"dict","title":"Output"},{"location":"providers/requests/put/","text":"put \u00b6 Hook for Requests 'put' type prompts. Link Inputs \u00b6 Name Type Default Required Description url string URL for the new Request object. kwargs Any {} X Optional arguments that request takes. data Any Dictionary, list of tuples, bytes, or file-like object to send in the body of the Request. input_json object Json data to send in the body of the Request. no_exit boolean False X Whether to exit on non-200 response. Arguments \u00b6 Position Argument Type 1 url str 2 data any 3 kwargs union Output \u00b6 None","title":"put"},{"location":"providers/requests/put/#put","text":"Hook for Requests 'put' type prompts. Link","title":"put"},{"location":"providers/requests/put/#inputs","text":"Name Type Default Required Description url string URL for the new Request object. kwargs Any {} X Optional arguments that request takes. data Any Dictionary, list of tuples, bytes, or file-like object to send in the body of the Request. input_json object Json data to send in the body of the Request. no_exit boolean False X Whether to exit on non-200 response.","title":"Inputs"},{"location":"providers/requests/put/#arguments","text":"Position Argument Type 1 url str 2 data any 3 kwargs union","title":"Arguments"},{"location":"providers/requests/put/#output","text":"None","title":"Output"},{"location":"providers/rich/","text":"rich \u00b6 None Hooks \u00b6 Type Description Return table Hook for creating tables with rich - github.com/willmcgugan/rich. markdown Hook for printing markdown and returning the output. Requirements \u00b6 Requirement rich","title":"Rich"},{"location":"providers/rich/#rich","text":"None","title":"rich"},{"location":"providers/rich/#hooks","text":"Type Description Return table Hook for creating tables with rich - github.com/willmcgugan/rich. markdown Hook for printing markdown and returning the output.","title":"Hooks"},{"location":"providers/rich/#requirements","text":"Requirement rich","title":"Requirements"},{"location":"providers/rich/markdown/","text":"markdown \u00b6 Hook for printing markdown and returning the output. Inputs \u00b6 Name Type Default Required Description text string Arguments \u00b6 Position Argument Type 1 text str Output \u00b6 None","title":"markdown"},{"location":"providers/rich/markdown/#markdown","text":"Hook for printing markdown and returning the output.","title":"markdown"},{"location":"providers/rich/markdown/#inputs","text":"Name Type Default Required Description text string","title":"Inputs"},{"location":"providers/rich/markdown/#arguments","text":"Position Argument Type 1 text str","title":"Arguments"},{"location":"providers/rich/markdown/#output","text":"None","title":"Output"},{"location":"providers/rich/table/","text":"table \u00b6 Hook for creating tables with rich - github.com/willmcgugan/rich. Inputs \u00b6 Name Type Default Required Description column_names array [] X List of column names sort boolean False X Boolean to sort contents or contents_split contents Any List of lists to put into columns / rows contents_split array List of strings to separate into columns based on separator separator string A string to separate the strings in the contents Arguments \u00b6 Position Argument Type Output \u00b6 None","title":"table"},{"location":"providers/rich/table/#table","text":"Hook for creating tables with rich - github.com/willmcgugan/rich.","title":"table"},{"location":"providers/rich/table/#inputs","text":"Name Type Default Required Description column_names array [] X List of column names sort boolean False X Boolean to sort contents or contents_split contents Any List of lists to put into columns / rows contents_split array List of strings to separate into columns based on separator separator string A string to separate the strings in the contents","title":"Inputs"},{"location":"providers/rich/table/#arguments","text":"Position Argument Type","title":"Arguments"},{"location":"providers/rich/table/#output","text":"None","title":"Output"},{"location":"providers/system/","text":"system \u00b6 None Hooks \u00b6 Type Description Return listdir Hook for listdir . Lists the contents of a directory.:return: A list of contents of the path if input is string, A map with keys of items if input path is list. keys Hook for returning the keys of a dict as a list.:param src: The input dict or list of dicts return the keys for:return: List of keys or list of list of keys if input is list merge Hook for recursively merging dict objects with input maps.:param src: The input dict to update:param input: A dict or list of dicts to update the input dict :return: An updated dict object. pop Hook for recursively merging dict objects with input maps.:param src: The input dict to update:param item: A list or string of items to remove from a dictionary or list:return: An updated dict object. update Hook for updating dict objects with items. pprint Wraps python pprint builtin.https://docs.python.org/3/library/pprint.html#pprint.PrettyPrinter print Hook for printing an input and returning the output.Follows: https://docs.python.org/3/library/functions.html#printprint(*objects, sep=' ', end='\\n', file=sys.stdout, flush=False) random_hex Hook for random_hex . Lists the contents of a directory. random_string Hook for random_string . Lists the contents of a directory. find_in_child Hook to find the absolute path to a file or directory in child directories.:return: string: Absolute path to the target file find_in_parent Hook to find the absolute path to a file or directory in parent directories.:return: string: Absolute path to the target file path_exists Hook for os package 'path.exists'. isdir Hook for os package 'path.isdir'. isfile Hook for os package 'path.isfile'. path_join Hook joining paths. mkdir Hook creating a directory. jinja Hook for jinja templates. Returns string path to the output file. concat Hook to concatenate a list of items.:param inputs: A list append to:param item: A list or string to append to input list:return: An appended list object. append Hook for updating dict objects with items. list_from_dict Hook generating a list from a dict based on the keys.:param input: A list append to:param item: A list or string to append to input list:return: An appended list object. list_remove Hook for updating dict objects with items.:param input: A list append to:param item: A list or string to remove to input list:param filter: A regex to remove items from list with:return: A list without removed objects objects. unzipfile Hook to unzip a file. zipfile Hook to zip a file or directory. yaml Hook for yaml. chmod Hook removing a file or directory.:param src: String or list of sources, either directories or files:param dst: String for path to copy to:param create_path: Boolean to create the directory path if it does not exist. Defaults to true:return: None copy Hook coying a file/files or directory/directories to a location.:param src: String or list of sources, either a directories or files:param dst: String for path to copy to:param create_path: Boolean to create the directory path if it does not exist. Defaults to true:return: None create_file Hook to create an empty file - like touch.:param path: String or list of paths to create. file Hook to read and write to a file. move Hook for moving a directory or directories to a location.:param src: String or list of sources, either directories or files:param dst: String for path to copy to:param create_path: Boolean to create the directory path if it does not exist. Defaults to true:return: None remove Hook for removing a directory or directories.:param path: String or list of paths to remove:return: None shred Hook for shredding file/files.:param src: String or list of sources, either directories or files:param dst: String for path to copy to:param create_path: Boolean to create the directory path if it does not exist. Defaults to true:return: None command System calls. shell shell hook for system calls.Streams the output of the process.:param command: The command to run on the host:return: String output of command set_env Hook for setting environment variables. export Hook for setting environment variables that returns NoneSets with input dict. Gets with input string.:param input: Dict for setting and string for getting environment variables:param fallback: A fallback for getting.:return: input get_env Hook for getting environment variables. unset Hook for unsetting environment variables. json Hook for json. If no contents is provided, the hook reads from path. Otherwise it writes the contents . When writing, returns path. When reading, returns dict. join Join a list of strings with a separator. split Hook for splitting a string into as list based on a separator. webbrowser Hook for registering a variable based on an input. Useful with rendering. symlink Hook creating symlinks wrapping os.symlink functionality.","title":"System"},{"location":"providers/system/#system","text":"None","title":"system"},{"location":"providers/system/#hooks","text":"Type Description Return listdir Hook for listdir . Lists the contents of a directory.:return: A list of contents of the path if input is string, A map with keys of items if input path is list. keys Hook for returning the keys of a dict as a list.:param src: The input dict or list of dicts return the keys for:return: List of keys or list of list of keys if input is list merge Hook for recursively merging dict objects with input maps.:param src: The input dict to update:param input: A dict or list of dicts to update the input dict :return: An updated dict object. pop Hook for recursively merging dict objects with input maps.:param src: The input dict to update:param item: A list or string of items to remove from a dictionary or list:return: An updated dict object. update Hook for updating dict objects with items. pprint Wraps python pprint builtin.https://docs.python.org/3/library/pprint.html#pprint.PrettyPrinter print Hook for printing an input and returning the output.Follows: https://docs.python.org/3/library/functions.html#printprint(*objects, sep=' ', end='\\n', file=sys.stdout, flush=False) random_hex Hook for random_hex . Lists the contents of a directory. random_string Hook for random_string . Lists the contents of a directory. find_in_child Hook to find the absolute path to a file or directory in child directories.:return: string: Absolute path to the target file find_in_parent Hook to find the absolute path to a file or directory in parent directories.:return: string: Absolute path to the target file path_exists Hook for os package 'path.exists'. isdir Hook for os package 'path.isdir'. isfile Hook for os package 'path.isfile'. path_join Hook joining paths. mkdir Hook creating a directory. jinja Hook for jinja templates. Returns string path to the output file. concat Hook to concatenate a list of items.:param inputs: A list append to:param item: A list or string to append to input list:return: An appended list object. append Hook for updating dict objects with items. list_from_dict Hook generating a list from a dict based on the keys.:param input: A list append to:param item: A list or string to append to input list:return: An appended list object. list_remove Hook for updating dict objects with items.:param input: A list append to:param item: A list or string to remove to input list:param filter: A regex to remove items from list with:return: A list without removed objects objects. unzipfile Hook to unzip a file. zipfile Hook to zip a file or directory. yaml Hook for yaml. chmod Hook removing a file or directory.:param src: String or list of sources, either directories or files:param dst: String for path to copy to:param create_path: Boolean to create the directory path if it does not exist. Defaults to true:return: None copy Hook coying a file/files or directory/directories to a location.:param src: String or list of sources, either a directories or files:param dst: String for path to copy to:param create_path: Boolean to create the directory path if it does not exist. Defaults to true:return: None create_file Hook to create an empty file - like touch.:param path: String or list of paths to create. file Hook to read and write to a file. move Hook for moving a directory or directories to a location.:param src: String or list of sources, either directories or files:param dst: String for path to copy to:param create_path: Boolean to create the directory path if it does not exist. Defaults to true:return: None remove Hook for removing a directory or directories.:param path: String or list of paths to remove:return: None shred Hook for shredding file/files.:param src: String or list of sources, either directories or files:param dst: String for path to copy to:param create_path: Boolean to create the directory path if it does not exist. Defaults to true:return: None command System calls. shell shell hook for system calls.Streams the output of the process.:param command: The command to run on the host:return: String output of command set_env Hook for setting environment variables. export Hook for setting environment variables that returns NoneSets with input dict. Gets with input string.:param input: Dict for setting and string for getting environment variables:param fallback: A fallback for getting.:return: input get_env Hook for getting environment variables. unset Hook for unsetting environment variables. json Hook for json. If no contents is provided, the hook reads from path. Otherwise it writes the contents . When writing, returns path. When reading, returns dict. join Join a list of strings with a separator. split Hook for splitting a string into as list based on a separator. webbrowser Hook for registering a variable based on an input. Useful with rendering. symlink Hook creating symlinks wrapping os.symlink functionality.","title":"Hooks"},{"location":"providers/system/append/","text":"append \u00b6 Hook for updating dict objects with items. Inputs \u00b6 Name Type Default Required Description input array A list append to. item Any A list or string to append to input list. Arguments \u00b6 Position Argument Type 1 input list 2 item union Output \u00b6 None","title":"append"},{"location":"providers/system/append/#append","text":"Hook for updating dict objects with items.","title":"append"},{"location":"providers/system/append/#inputs","text":"Name Type Default Required Description input array A list append to. item Any A list or string to append to input list.","title":"Inputs"},{"location":"providers/system/append/#arguments","text":"Position Argument Type 1 input list 2 item union","title":"Arguments"},{"location":"providers/system/append/#output","text":"None","title":"Output"},{"location":"providers/system/chmod/","text":"chmod \u00b6 Hook removing a file or directory.:param src: String or list of sources, either directories or files:param dst: String for path to copy to:param create_path: Boolean to create the directory path if it does not exist. Defaults to true:return: None Inputs \u00b6 Name Type Default Required Description path Any mode string Arguments \u00b6 Position Argument Type Output \u00b6 NoneType","title":"chmod"},{"location":"providers/system/chmod/#chmod","text":"Hook removing a file or directory.:param src: String or list of sources, either directories or files:param dst: String for path to copy to:param create_path: Boolean to create the directory path if it does not exist. Defaults to true:return: None","title":"chmod"},{"location":"providers/system/chmod/#inputs","text":"Name Type Default Required Description path Any mode string","title":"Inputs"},{"location":"providers/system/chmod/#arguments","text":"Position Argument Type","title":"Arguments"},{"location":"providers/system/chmod/#output","text":"NoneType","title":"Output"},{"location":"providers/system/command/","text":"command \u00b6 System calls. Inputs \u00b6 Name Type Default Required Description command string A shell command. ignore_error boolean False X Ignore errors. Arguments \u00b6 Position Argument Type 1 command str Output \u00b6 None","title":"command"},{"location":"providers/system/command/#command","text":"System calls.","title":"command"},{"location":"providers/system/command/#inputs","text":"Name Type Default Required Description command string A shell command. ignore_error boolean False X Ignore errors.","title":"Inputs"},{"location":"providers/system/command/#arguments","text":"Position Argument Type 1 command str","title":"Arguments"},{"location":"providers/system/command/#output","text":"None","title":"Output"},{"location":"providers/system/concat/","text":"concat \u00b6 Hook to concatenate a list of items.:param inputs: A list append to:param item: A list or string to append to input list:return: An appended list object. Inputs \u00b6 Name Type Default Required Description input array Arguments \u00b6 Position Argument Type Output \u00b6 None","title":"concat"},{"location":"providers/system/concat/#concat","text":"Hook to concatenate a list of items.:param inputs: A list append to:param item: A list or string to append to input list:return: An appended list object.","title":"concat"},{"location":"providers/system/concat/#inputs","text":"Name Type Default Required Description input array","title":"Inputs"},{"location":"providers/system/concat/#arguments","text":"Position Argument Type","title":"Arguments"},{"location":"providers/system/concat/#output","text":"None","title":"Output"},{"location":"providers/system/copy/","text":"copy \u00b6 Hook coying a file/files or directory/directories to a location.:param src: String or list of sources, either a directories or files:param dst: String for path to copy to:param create_path: Boolean to create the directory path if it does not exist. Defaults to true:return: None Inputs \u00b6 Name Type Default Required Description src Any String or list of sources, either a directories or files dst string create_path boolean True X Arguments \u00b6 Position Argument Type Output \u00b6 NoneType","title":"copy"},{"location":"providers/system/copy/#copy","text":"Hook coying a file/files or directory/directories to a location.:param src: String or list of sources, either a directories or files:param dst: String for path to copy to:param create_path: Boolean to create the directory path if it does not exist. Defaults to true:return: None","title":"copy"},{"location":"providers/system/copy/#inputs","text":"Name Type Default Required Description src Any String or list of sources, either a directories or files dst string create_path boolean True X","title":"Inputs"},{"location":"providers/system/copy/#arguments","text":"Position Argument Type","title":"Arguments"},{"location":"providers/system/copy/#output","text":"NoneType","title":"Output"},{"location":"providers/system/create_file/","text":"create_file \u00b6 Hook to create an empty file - like touch.:param path: String or list of paths to create. Inputs \u00b6 Name Type Default Required Description path Any Arguments \u00b6 Position Argument Type Output \u00b6 union","title":"create_file"},{"location":"providers/system/create_file/#create_file","text":"Hook to create an empty file - like touch.:param path: String or list of paths to create.","title":"create_file"},{"location":"providers/system/create_file/#inputs","text":"Name Type Default Required Description path Any","title":"Inputs"},{"location":"providers/system/create_file/#arguments","text":"Position Argument Type","title":"Arguments"},{"location":"providers/system/create_file/#output","text":"union","title":"Output"},{"location":"providers/system/export/","text":"export \u00b6 Hook for setting environment variables that returns NoneSets with input dict. Gets with input string.:param input: Dict for setting and string for getting environment variables:param fallback: A fallback for getting.:return: input Inputs \u00b6 Name Type Default Required Description environment_variable string The name of the environment variable to set. value string The value to set it. Arguments \u00b6 Position Argument Type 1 environment_variable str 2 value str Output \u00b6 None","title":"export"},{"location":"providers/system/export/#export","text":"Hook for setting environment variables that returns NoneSets with input dict. Gets with input string.:param input: Dict for setting and string for getting environment variables:param fallback: A fallback for getting.:return: input","title":"export"},{"location":"providers/system/export/#inputs","text":"Name Type Default Required Description environment_variable string The name of the environment variable to set. value string The value to set it.","title":"Inputs"},{"location":"providers/system/export/#arguments","text":"Position Argument Type 1 environment_variable str 2 value str","title":"Arguments"},{"location":"providers/system/export/#output","text":"None","title":"Output"},{"location":"providers/system/file/","text":"file \u00b6 Hook to read and write to a file. Inputs \u00b6 Name Type Default Required Description path string Path to read or write file. contents Any If writing to file, the contents to write. Arguments \u00b6 Position Argument Type 1 path str 2 contents any Output \u00b6 union","title":"file"},{"location":"providers/system/file/#file","text":"Hook to read and write to a file.","title":"file"},{"location":"providers/system/file/#inputs","text":"Name Type Default Required Description path string Path to read or write file. contents Any If writing to file, the contents to write.","title":"Inputs"},{"location":"providers/system/file/#arguments","text":"Position Argument Type 1 path str 2 contents any","title":"Arguments"},{"location":"providers/system/file/#output","text":"union","title":"Output"},{"location":"providers/system/find_in_child/","text":"find_in_child \u00b6 Hook to find the absolute path to a file or directory in child directories.:return: string: Absolute path to the target file Inputs \u00b6 Name Type Default Required Description target string The name of the file to find the absolute path to fallback Any String to fallback on if the target is not found. starting_dir string . X The starting directory to search from. Defaults to current working directory. Arguments \u00b6 Position Argument Type 1 target str Output \u00b6 None","title":"find_in_child"},{"location":"providers/system/find_in_child/#find_in_child","text":"Hook to find the absolute path to a file or directory in child directories.:return: string: Absolute path to the target file","title":"find_in_child"},{"location":"providers/system/find_in_child/#inputs","text":"Name Type Default Required Description target string The name of the file to find the absolute path to fallback Any String to fallback on if the target is not found. starting_dir string . X The starting directory to search from. Defaults to current working directory.","title":"Inputs"},{"location":"providers/system/find_in_child/#arguments","text":"Position Argument Type 1 target str","title":"Arguments"},{"location":"providers/system/find_in_child/#output","text":"None","title":"Output"},{"location":"providers/system/find_in_parent/","text":"find_in_parent \u00b6 Hook to find the absolute path to a file or directory in parent directories.:return: string: Absolute path to the target file Inputs \u00b6 Name Type Default Required Description target string The name of the file to find the absolute path to fallback Any String to fallback on if the target is not found. starting_dir string . X The starting directory to search from. Defaults to current working directory. Arguments \u00b6 Position Argument Type 1 target str Output \u00b6 None","title":"find_in_parent"},{"location":"providers/system/find_in_parent/#find_in_parent","text":"Hook to find the absolute path to a file or directory in parent directories.:return: string: Absolute path to the target file","title":"find_in_parent"},{"location":"providers/system/find_in_parent/#inputs","text":"Name Type Default Required Description target string The name of the file to find the absolute path to fallback Any String to fallback on if the target is not found. starting_dir string . X The starting directory to search from. Defaults to current working directory.","title":"Inputs"},{"location":"providers/system/find_in_parent/#arguments","text":"Position Argument Type 1 target str","title":"Arguments"},{"location":"providers/system/find_in_parent/#output","text":"None","title":"Output"},{"location":"providers/system/get_env/","text":"get_env \u00b6 Hook for getting environment variables. Inputs \u00b6 Name Type Default Required Description environment_variable string Dict for setting and string for getting environment variables fallback string A fallback for getting. Arguments \u00b6 Position Argument Type 1 environment_variable str 2 fallback str Output \u00b6 None","title":"get_env"},{"location":"providers/system/get_env/#get_env","text":"Hook for getting environment variables.","title":"get_env"},{"location":"providers/system/get_env/#inputs","text":"Name Type Default Required Description environment_variable string Dict for setting and string for getting environment variables fallback string A fallback for getting.","title":"Inputs"},{"location":"providers/system/get_env/#arguments","text":"Position Argument Type 1 environment_variable str 2 fallback str","title":"Arguments"},{"location":"providers/system/get_env/#output","text":"None","title":"Output"},{"location":"providers/system/isdir/","text":"isdir \u00b6 Hook for os package 'path.isdir'. Inputs \u00b6 Name Type Default Required Description path string The path to a directory Arguments \u00b6 Position Argument Type 1 path str Output \u00b6 bool","title":"isdir"},{"location":"providers/system/isdir/#isdir","text":"Hook for os package 'path.isdir'.","title":"isdir"},{"location":"providers/system/isdir/#inputs","text":"Name Type Default Required Description path string The path to a directory","title":"Inputs"},{"location":"providers/system/isdir/#arguments","text":"Position Argument Type 1 path str","title":"Arguments"},{"location":"providers/system/isdir/#output","text":"bool","title":"Output"},{"location":"providers/system/isfile/","text":"isfile \u00b6 Hook for os package 'path.isfile'. Inputs \u00b6 Name Type Default Required Description path string The path to a file Arguments \u00b6 Position Argument Type 1 path str Output \u00b6 bool","title":"isfile"},{"location":"providers/system/isfile/#isfile","text":"Hook for os package 'path.isfile'.","title":"isfile"},{"location":"providers/system/isfile/#inputs","text":"Name Type Default Required Description path string The path to a file","title":"Inputs"},{"location":"providers/system/isfile/#arguments","text":"Position Argument Type 1 path str","title":"Arguments"},{"location":"providers/system/isfile/#output","text":"bool","title":"Output"},{"location":"providers/system/jinja/","text":"jinja \u00b6 Hook for jinja templates. Returns string path to the output file. Inputs \u00b6 Name Type Default Required Description file_system_loader string . X template_path string Path to the template to render output_path string Path to the output file context Any extra_context object {} X A dict to use to render render_context object A render context that invalidates the default context. additional_context object A map to use as additional context when rendering. Arguments \u00b6 Position Argument Type 1 template_path str 2 output_path str Output \u00b6 dict","title":"jinja"},{"location":"providers/system/jinja/#jinja","text":"Hook for jinja templates. Returns string path to the output file.","title":"jinja"},{"location":"providers/system/jinja/#inputs","text":"Name Type Default Required Description file_system_loader string . X template_path string Path to the template to render output_path string Path to the output file context Any extra_context object {} X A dict to use to render render_context object A render context that invalidates the default context. additional_context object A map to use as additional context when rendering.","title":"Inputs"},{"location":"providers/system/jinja/#arguments","text":"Position Argument Type 1 template_path str 2 output_path str","title":"Arguments"},{"location":"providers/system/jinja/#output","text":"dict","title":"Output"},{"location":"providers/system/join/","text":"join \u00b6 Join a list of strings with a separator. Inputs \u00b6 Name Type Default Required Description input array A list of strings to join. separator string . X String separator. Arguments \u00b6 Position Argument Type 1 input str Output \u00b6 None","title":"join"},{"location":"providers/system/join/#join","text":"Join a list of strings with a separator.","title":"join"},{"location":"providers/system/join/#inputs","text":"Name Type Default Required Description input array A list of strings to join. separator string . X String separator.","title":"Inputs"},{"location":"providers/system/join/#arguments","text":"Position Argument Type 1 input str","title":"Arguments"},{"location":"providers/system/join/#output","text":"None","title":"Output"},{"location":"providers/system/json/","text":"json \u00b6 Hook for json. If no contents is provided, the hook reads from path. Otherwise it writes the contents . When writing, returns path. When reading, returns dict. Inputs \u00b6 Name Type Default Required Description path string The path to write the file. contents object A dict to write Arguments \u00b6 Position Argument Type 1 path str 2 contents dict Output \u00b6 union","title":"json"},{"location":"providers/system/json/#json","text":"Hook for json. If no contents is provided, the hook reads from path. Otherwise it writes the contents . When writing, returns path. When reading, returns dict.","title":"json"},{"location":"providers/system/json/#inputs","text":"Name Type Default Required Description path string The path to write the file. contents object A dict to write","title":"Inputs"},{"location":"providers/system/json/#arguments","text":"Position Argument Type 1 path str 2 contents dict","title":"Arguments"},{"location":"providers/system/json/#output","text":"union","title":"Output"},{"location":"providers/system/keys/","text":"keys \u00b6 Hook for returning the keys of a dict as a list.:param src: The input dict or list of dicts return the keys for:return: List of keys or list of list of keys if input is list Inputs \u00b6 Name Type Default Required Description src object Arguments \u00b6 Position Argument Type 1 src dict Output \u00b6 None","title":"keys"},{"location":"providers/system/keys/#keys","text":"Hook for returning the keys of a dict as a list.:param src: The input dict or list of dicts return the keys for:return: List of keys or list of list of keys if input is list","title":"keys"},{"location":"providers/system/keys/#inputs","text":"Name Type Default Required Description src object","title":"Inputs"},{"location":"providers/system/keys/#arguments","text":"Position Argument Type 1 src dict","title":"Arguments"},{"location":"providers/system/keys/#output","text":"None","title":"Output"},{"location":"providers/system/list_from_dict/","text":"list_from_dict \u00b6 Hook generating a list from a dict based on the keys.:param input: A list append to:param item: A list or string to append to input list:return: An appended list object. Inputs \u00b6 Name Type Default Required Description keys array input object Arguments \u00b6 Position Argument Type Output \u00b6 None","title":"list_from_dict"},{"location":"providers/system/list_from_dict/#list_from_dict","text":"Hook generating a list from a dict based on the keys.:param input: A list append to:param item: A list or string to append to input list:return: An appended list object.","title":"list_from_dict"},{"location":"providers/system/list_from_dict/#inputs","text":"Name Type Default Required Description keys array input object","title":"Inputs"},{"location":"providers/system/list_from_dict/#arguments","text":"Position Argument Type","title":"Arguments"},{"location":"providers/system/list_from_dict/#output","text":"None","title":"Output"},{"location":"providers/system/list_remove/","text":"list_remove \u00b6 Hook for updating dict objects with items.:param input: A list append to:param item: A list or string to remove to input list:param filter: A regex to remove items from list with:return: A list without removed objects objects. Inputs \u00b6 Name Type Default Required Description input array A list to append to. item Any A list or string to append to input list. Arguments \u00b6 Position Argument Type 1 input list 2 item union Output \u00b6 None","title":"list_remove"},{"location":"providers/system/list_remove/#list_remove","text":"Hook for updating dict objects with items.:param input: A list append to:param item: A list or string to remove to input list:param filter: A regex to remove items from list with:return: A list without removed objects objects.","title":"list_remove"},{"location":"providers/system/list_remove/#inputs","text":"Name Type Default Required Description input array A list to append to. item Any A list or string to append to input list.","title":"Inputs"},{"location":"providers/system/list_remove/#arguments","text":"Position Argument Type 1 input list 2 item union","title":"Arguments"},{"location":"providers/system/list_remove/#output","text":"None","title":"Output"},{"location":"providers/system/listdir/","text":"listdir \u00b6 Hook for listdir . Lists the contents of a directory.:return: A list of contents of the path if input is string, A map with keys of items if input path is list. Inputs \u00b6 Name Type Default Required Description ignore_hidden_files boolean Boolean to ignore hidden files path Any String or list to directories to list sort boolean False X Boolean to sort the output Arguments \u00b6 Position Argument Type 1 path union Output \u00b6 None","title":"listdir"},{"location":"providers/system/listdir/#listdir","text":"Hook for listdir . Lists the contents of a directory.:return: A list of contents of the path if input is string, A map with keys of items if input path is list.","title":"listdir"},{"location":"providers/system/listdir/#inputs","text":"Name Type Default Required Description ignore_hidden_files boolean Boolean to ignore hidden files path Any String or list to directories to list sort boolean False X Boolean to sort the output","title":"Inputs"},{"location":"providers/system/listdir/#arguments","text":"Position Argument Type 1 path union","title":"Arguments"},{"location":"providers/system/listdir/#output","text":"None","title":"Output"},{"location":"providers/system/merge/","text":"merge \u00b6 Hook for recursively merging dict objects with input maps.:param src: The input dict to update:param input: A dict or list of dicts to update the input dict :return: An updated dict object. Inputs \u00b6 Name Type Default Required Description inputs array A list of dictionaries to merge together. Arguments \u00b6 Position Argument Type 1 inputs list Output \u00b6 None","title":"merge"},{"location":"providers/system/merge/#merge","text":"Hook for recursively merging dict objects with input maps.:param src: The input dict to update:param input: A dict or list of dicts to update the input dict :return: An updated dict object.","title":"merge"},{"location":"providers/system/merge/#inputs","text":"Name Type Default Required Description inputs array A list of dictionaries to merge together.","title":"Inputs"},{"location":"providers/system/merge/#arguments","text":"Position Argument Type 1 inputs list","title":"Arguments"},{"location":"providers/system/merge/#output","text":"None","title":"Output"},{"location":"providers/system/mkdir/","text":"mkdir \u00b6 Hook creating a directory. Inputs \u00b6 Name Type Default Required Description path string The path to file or directory Arguments \u00b6 Position Argument Type 1 path str Output \u00b6 str","title":"mkdir"},{"location":"providers/system/mkdir/#mkdir","text":"Hook creating a directory.","title":"mkdir"},{"location":"providers/system/mkdir/#inputs","text":"Name Type Default Required Description path string The path to file or directory","title":"Inputs"},{"location":"providers/system/mkdir/#arguments","text":"Position Argument Type 1 path str","title":"Arguments"},{"location":"providers/system/mkdir/#output","text":"str","title":"Output"},{"location":"providers/system/move/","text":"move \u00b6 Hook for moving a directory or directories to a location.:param src: String or list of sources, either directories or files:param dst: String for path to copy to:param create_path: Boolean to create the directory path if it does not exist. Defaults to true:return: None Inputs \u00b6 Name Type Default Required Description src Any create_path boolean True X dst string Arguments \u00b6 Position Argument Type 1 src union 2 dst str Output \u00b6 NoneType","title":"move"},{"location":"providers/system/move/#move","text":"Hook for moving a directory or directories to a location.:param src: String or list of sources, either directories or files:param dst: String for path to copy to:param create_path: Boolean to create the directory path if it does not exist. Defaults to true:return: None","title":"move"},{"location":"providers/system/move/#inputs","text":"Name Type Default Required Description src Any create_path boolean True X dst string","title":"Inputs"},{"location":"providers/system/move/#arguments","text":"Position Argument Type 1 src union 2 dst str","title":"Arguments"},{"location":"providers/system/move/#output","text":"NoneType","title":"Output"},{"location":"providers/system/path_exists/","text":"path_exists \u00b6 Hook for os package 'path.exists'. Inputs \u00b6 Name Type Default Required Description path string The path to file or directory Arguments \u00b6 Position Argument Type 1 path str Output \u00b6 bool","title":"path_exists"},{"location":"providers/system/path_exists/#path_exists","text":"Hook for os package 'path.exists'.","title":"path_exists"},{"location":"providers/system/path_exists/#inputs","text":"Name Type Default Required Description path string The path to file or directory","title":"Inputs"},{"location":"providers/system/path_exists/#arguments","text":"Position Argument Type 1 path str","title":"Arguments"},{"location":"providers/system/path_exists/#output","text":"bool","title":"Output"},{"location":"providers/system/path_join/","text":"path_join \u00b6 Hook joining paths. Inputs \u00b6 Name Type Default Required Description paths array List of items in a path to file or directory. Arguments \u00b6 Position Argument Type 1 paths list Output \u00b6 None","title":"path_join"},{"location":"providers/system/path_join/#path_join","text":"Hook joining paths.","title":"path_join"},{"location":"providers/system/path_join/#inputs","text":"Name Type Default Required Description paths array List of items in a path to file or directory.","title":"Inputs"},{"location":"providers/system/path_join/#arguments","text":"Position Argument Type 1 paths list","title":"Arguments"},{"location":"providers/system/path_join/#output","text":"None","title":"Output"},{"location":"providers/system/pop/","text":"pop \u00b6 Hook for recursively merging dict objects with input maps.:param src: The input dict to update:param item: A list or string of items to remove from a dictionary or list:return: An updated dict object. Inputs \u00b6 Name Type Default Required Description src Any item Any Arguments \u00b6 Position Argument Type 1 src union 2 item union Output \u00b6 None","title":"pop"},{"location":"providers/system/pop/#pop","text":"Hook for recursively merging dict objects with input maps.:param src: The input dict to update:param item: A list or string of items to remove from a dictionary or list:return: An updated dict object.","title":"pop"},{"location":"providers/system/pop/#inputs","text":"Name Type Default Required Description src Any item Any","title":"Inputs"},{"location":"providers/system/pop/#arguments","text":"Position Argument Type 1 src union 2 item union","title":"Arguments"},{"location":"providers/system/pop/#output","text":"None","title":"Output"},{"location":"providers/system/pprint/","text":"pprint \u00b6 Wraps python pprint builtin.https://docs.python.org/3/library/pprint.html#pprint.PrettyPrinter Inputs \u00b6 Name Type Default Required Description objects Any indent integer 1 X width integer 80 X depth integer compact boolean False X sort_dicts boolean True X underscore_numbers boolean False X Arguments \u00b6 Position Argument Type 1 objects any Output \u00b6 None","title":"pprint"},{"location":"providers/system/pprint/#pprint","text":"Wraps python pprint builtin.https://docs.python.org/3/library/pprint.html#pprint.PrettyPrinter","title":"pprint"},{"location":"providers/system/pprint/#inputs","text":"Name Type Default Required Description objects Any indent integer 1 X width integer 80 X depth integer compact boolean False X sort_dicts boolean True X underscore_numbers boolean False X","title":"Inputs"},{"location":"providers/system/pprint/#arguments","text":"Position Argument Type 1 objects any","title":"Arguments"},{"location":"providers/system/pprint/#output","text":"None","title":"Output"},{"location":"providers/system/print/","text":"print \u00b6 Hook for printing an input and returning the output.Follows: https://docs.python.org/3/library/functions.html#printprint(*objects, sep=' ', end='\\n', file=sys.stdout, flush=False) Inputs \u00b6 Name Type Default Required Description objects Any The objects to print. sep string X Separator between printed objects. end string X What to print at the end flush boolean False X No clue. Arguments \u00b6 Position Argument Type 1 objects any Output \u00b6 None","title":"print"},{"location":"providers/system/print/#print","text":"Hook for printing an input and returning the output.Follows: https://docs.python.org/3/library/functions.html#printprint(*objects, sep=' ', end='\\n', file=sys.stdout, flush=False)","title":"print"},{"location":"providers/system/print/#inputs","text":"Name Type Default Required Description objects Any The objects to print. sep string X Separator between printed objects. end string X What to print at the end flush boolean False X No clue.","title":"Inputs"},{"location":"providers/system/print/#arguments","text":"Position Argument Type 1 objects any","title":"Arguments"},{"location":"providers/system/print/#output","text":"None","title":"Output"},{"location":"providers/system/random_hex/","text":"random_hex \u00b6 Hook for random_hex . Lists the contents of a directory. Inputs \u00b6 Name Type Default Required Description length integer 8 X Number for number of digits - default 8 Arguments \u00b6 Position Argument Type 1 length int Output \u00b6 str","title":"random_hex"},{"location":"providers/system/random_hex/#random_hex","text":"Hook for random_hex . Lists the contents of a directory.","title":"random_hex"},{"location":"providers/system/random_hex/#inputs","text":"Name Type Default Required Description length integer 8 X Number for number of digits - default 8","title":"Inputs"},{"location":"providers/system/random_hex/#arguments","text":"Position Argument Type 1 length int","title":"Arguments"},{"location":"providers/system/random_hex/#output","text":"str","title":"Output"},{"location":"providers/system/random_string/","text":"random_string \u00b6 Hook for random_string . Lists the contents of a directory. Inputs \u00b6 Name Type Default Required Description string_case string lower X Case of output, one of upper or lower length integer 8 X Length of the random string. Arguments \u00b6 Position Argument Type 1 length int 2 string_case str Output \u00b6 None","title":"random_string"},{"location":"providers/system/random_string/#random_string","text":"Hook for random_string . Lists the contents of a directory.","title":"random_string"},{"location":"providers/system/random_string/#inputs","text":"Name Type Default Required Description string_case string lower X Case of output, one of upper or lower length integer 8 X Length of the random string.","title":"Inputs"},{"location":"providers/system/random_string/#arguments","text":"Position Argument Type 1 length int 2 string_case str","title":"Arguments"},{"location":"providers/system/random_string/#output","text":"None","title":"Output"},{"location":"providers/system/remove/","text":"remove \u00b6 Hook for removing a directory or directories.:param path: String or list of paths to remove:return: None Inputs \u00b6 Name Type Default Required Description path Any fail_silently boolean False X Arguments \u00b6 Position Argument Type 1 path union Output \u00b6 NoneType","title":"remove"},{"location":"providers/system/remove/#remove","text":"Hook for removing a directory or directories.:param path: String or list of paths to remove:return: None","title":"remove"},{"location":"providers/system/remove/#inputs","text":"Name Type Default Required Description path Any fail_silently boolean False X","title":"Inputs"},{"location":"providers/system/remove/#arguments","text":"Position Argument Type 1 path union","title":"Arguments"},{"location":"providers/system/remove/#output","text":"NoneType","title":"Output"},{"location":"providers/system/set_env/","text":"set_env \u00b6 Hook for setting environment variables. Inputs \u00b6 Name Type Default Required Description environment_variable string The name of the environment variable to set. value string The value to set it. Arguments \u00b6 Position Argument Type 1 environment_variable str 2 value str Output \u00b6 None","title":"set_env"},{"location":"providers/system/set_env/#set_env","text":"Hook for setting environment variables.","title":"set_env"},{"location":"providers/system/set_env/#inputs","text":"Name Type Default Required Description environment_variable string The name of the environment variable to set. value string The value to set it.","title":"Inputs"},{"location":"providers/system/set_env/#arguments","text":"Position Argument Type 1 environment_variable str 2 value str","title":"Arguments"},{"location":"providers/system/set_env/#output","text":"None","title":"Output"},{"location":"providers/system/shell/","text":"shell \u00b6 shell hook for system calls.Streams the output of the process.:param command: The command to run on the host:return: String output of command Inputs \u00b6 Name Type Default Required Description command string ignore_error boolean False X Arguments \u00b6 Position Argument Type 1 command str Output \u00b6 None","title":"shell"},{"location":"providers/system/shell/#shell","text":"shell hook for system calls.Streams the output of the process.:param command: The command to run on the host:return: String output of command","title":"shell"},{"location":"providers/system/shell/#inputs","text":"Name Type Default Required Description command string ignore_error boolean False X","title":"Inputs"},{"location":"providers/system/shell/#arguments","text":"Position Argument Type 1 command str","title":"Arguments"},{"location":"providers/system/shell/#output","text":"None","title":"Output"},{"location":"providers/system/shred/","text":"shred \u00b6 Hook for shredding file/files.:param src: String or list of sources, either directories or files:param dst: String for path to copy to:param create_path: Boolean to create the directory path if it does not exist. Defaults to true:return: None Inputs \u00b6 Name Type Default Required Description src Any passes integer 10 X Arguments \u00b6 Position Argument Type Output \u00b6 NoneType","title":"shred"},{"location":"providers/system/shred/#shred","text":"Hook for shredding file/files.:param src: String or list of sources, either directories or files:param dst: String for path to copy to:param create_path: Boolean to create the directory path if it does not exist. Defaults to true:return: None","title":"shred"},{"location":"providers/system/shred/#inputs","text":"Name Type Default Required Description src Any passes integer 10 X","title":"Inputs"},{"location":"providers/system/shred/#arguments","text":"Position Argument Type","title":"Arguments"},{"location":"providers/system/shred/#output","text":"NoneType","title":"Output"},{"location":"providers/system/split/","text":"split \u00b6 Hook for splitting a string into as list based on a separator. Inputs \u00b6 Name Type Default Required Description input string A list of string to split or just a string separator string . X String separator Arguments \u00b6 Position Argument Type 1 input str Output \u00b6 None","title":"split"},{"location":"providers/system/split/#split","text":"Hook for splitting a string into as list based on a separator.","title":"split"},{"location":"providers/system/split/#inputs","text":"Name Type Default Required Description input string A list of string to split or just a string separator string . X String separator","title":"Inputs"},{"location":"providers/system/split/#arguments","text":"Position Argument Type 1 input str","title":"Arguments"},{"location":"providers/system/split/#output","text":"None","title":"Output"},{"location":"providers/system/symlink/","text":"symlink \u00b6 Hook creating symlinks wrapping os.symlink functionality. Inputs \u00b6 Name Type Default Required Description src string String or list of sources, either a directories or files dst string String for path to copy to target_is_directory boolean False X The default value of this parameter is False. If the specified target path is directory then its value should be True. overwrite boolean False X Overwrite the destination. Arguments \u00b6 Position Argument Type Output \u00b6 NoneType","title":"symlink"},{"location":"providers/system/symlink/#symlink","text":"Hook creating symlinks wrapping os.symlink functionality.","title":"symlink"},{"location":"providers/system/symlink/#inputs","text":"Name Type Default Required Description src string String or list of sources, either a directories or files dst string String for path to copy to target_is_directory boolean False X The default value of this parameter is False. If the specified target path is directory then its value should be True. overwrite boolean False X Overwrite the destination.","title":"Inputs"},{"location":"providers/system/symlink/#arguments","text":"Position Argument Type","title":"Arguments"},{"location":"providers/system/symlink/#output","text":"NoneType","title":"Output"},{"location":"providers/system/unset/","text":"unset \u00b6 Hook for unsetting environment variables. Inputs \u00b6 Name Type Default Required Description environment_variable string The name of the environment variable to set. Arguments \u00b6 Position Argument Type 1 environment_variable str Output \u00b6 None","title":"unset"},{"location":"providers/system/unset/#unset","text":"Hook for unsetting environment variables.","title":"unset"},{"location":"providers/system/unset/#inputs","text":"Name Type Default Required Description environment_variable string The name of the environment variable to set.","title":"Inputs"},{"location":"providers/system/unset/#arguments","text":"Position Argument Type 1 environment_variable str","title":"Arguments"},{"location":"providers/system/unset/#output","text":"None","title":"Output"},{"location":"providers/system/unzipfile/","text":"unzipfile \u00b6 Hook to unzip a file. Inputs \u00b6 Name Type Default Required Description input string Input path output string . X Output path, default to current directory Arguments \u00b6 Position Argument Type Output \u00b6 None","title":"unzipfile"},{"location":"providers/system/unzipfile/#unzipfile","text":"Hook to unzip a file.","title":"unzipfile"},{"location":"providers/system/unzipfile/#inputs","text":"Name Type Default Required Description input string Input path output string . X Output path, default to current directory","title":"Inputs"},{"location":"providers/system/unzipfile/#arguments","text":"Position Argument Type","title":"Arguments"},{"location":"providers/system/unzipfile/#output","text":"None","title":"Output"},{"location":"providers/system/update/","text":"update \u00b6 Hook for updating dict objects with items. Inputs \u00b6 Name Type Default Required Description src object A dict or list of dicts to update the input src input object A dict or list of dicts to update the input src Arguments \u00b6 Position Argument Type 1 src dict 2 input dict Output \u00b6 None","title":"update"},{"location":"providers/system/update/#update","text":"Hook for updating dict objects with items.","title":"update"},{"location":"providers/system/update/#inputs","text":"Name Type Default Required Description src object A dict or list of dicts to update the input src input object A dict or list of dicts to update the input src","title":"Inputs"},{"location":"providers/system/update/#arguments","text":"Position Argument Type 1 src dict 2 input dict","title":"Arguments"},{"location":"providers/system/update/#output","text":"None","title":"Output"},{"location":"providers/system/webbrowser/","text":"webbrowser \u00b6 Hook for registering a variable based on an input. Useful with rendering. Inputs \u00b6 Name Type Default Required Description url string String url to open in browser. Arguments \u00b6 Position Argument Type 1 url str Output \u00b6 None","title":"webbrowser"},{"location":"providers/system/webbrowser/#webbrowser","text":"Hook for registering a variable based on an input. Useful with rendering.","title":"webbrowser"},{"location":"providers/system/webbrowser/#inputs","text":"Name Type Default Required Description url string String url to open in browser.","title":"Inputs"},{"location":"providers/system/webbrowser/#arguments","text":"Position Argument Type 1 url str","title":"Arguments"},{"location":"providers/system/webbrowser/#output","text":"None","title":"Output"},{"location":"providers/system/yaml/","text":"yaml \u00b6 Hook for yaml. Inputs \u00b6 Name Type Default Required Description remove Any Parameter or regex to remove from list or dict. contents Any Supplied dictionary or list to write. update object Use the python update dict method on contents before writing filter array List or string to values to. path string The file path to put read or write to. merge_dict object Dict input that recursively overwrites the contents . in_place boolean False X Boolean to read the contents of the path and then write after modifications. append_items Any List to append to append_key key. append_keys Any String or list of hierarchical keys to append item to. Defaults mode string The mode that the file should write. Defaults to write 'w'. See https://docs.python.org/3/library/functions.html#open write boolean Arguments \u00b6 Position Argument Type 1 path str 2 contents union Output \u00b6 None","title":"yaml"},{"location":"providers/system/yaml/#yaml","text":"Hook for yaml.","title":"yaml"},{"location":"providers/system/yaml/#inputs","text":"Name Type Default Required Description remove Any Parameter or regex to remove from list or dict. contents Any Supplied dictionary or list to write. update object Use the python update dict method on contents before writing filter array List or string to values to. path string The file path to put read or write to. merge_dict object Dict input that recursively overwrites the contents . in_place boolean False X Boolean to read the contents of the path and then write after modifications. append_items Any List to append to append_key key. append_keys Any String or list of hierarchical keys to append item to. Defaults mode string The mode that the file should write. Defaults to write 'w'. See https://docs.python.org/3/library/functions.html#open write boolean","title":"Inputs"},{"location":"providers/system/yaml/#arguments","text":"Position Argument Type 1 path str 2 contents union","title":"Arguments"},{"location":"providers/system/yaml/#output","text":"None","title":"Output"},{"location":"providers/system/zipfile/","text":"zipfile \u00b6 Hook to zip a file or directory. Inputs \u00b6 Name Type Default Required Description input string Input path output string Output path Arguments \u00b6 Position Argument Type Output \u00b6 None","title":"zipfile"},{"location":"providers/system/zipfile/#zipfile","text":"Hook to zip a file or directory.","title":"zipfile"},{"location":"providers/system/zipfile/#inputs","text":"Name Type Default Required Description input string Input path output string Output path","title":"Inputs"},{"location":"providers/system/zipfile/#arguments","text":"Position Argument Type","title":"Arguments"},{"location":"providers/system/zipfile/#output","text":"None","title":"Output"},{"location":"providers/tackle/","text":"tackle \u00b6 Hooks that interface with tackle's parser and context. Core to most tackle scripts. Hooks \u00b6 Type Description Return import Hook for importing external tackle-box providers. Does not actually execute thebase tackle in the provider but merely makes the hooks and functions available tobe used in the context. Takes any type as an argument to to build src and version import targets.### ExampleExpanded strings - Used as a private hook call where key is deleted post exec arbitrary key: _>: input src: robcxyz/tackle-demo version: v0.1.0 generate Hook for generating project outputs. Recursively renders all files and folders in agiven target directory to an output. If there is a \"templates\" directory and a fileor directory that matches the templates input param, use that as target. provider_docs Hook building provider docs. delete_key Hook for getting a key based on a key path which is a list with keys and numbersfor indexes in a list. get_key Hook for getting a key based on a key path which is a list with keys and numbersfor indexes in a list. set_key Hook for setting a key based on a key path which is a list with keys and numbersfor indexes in a list. type Hook for getting the type of a variable. var Hook for rendering a variable based on an input. Only useful for rendering asotherwise you wouldn't need this hook at all.Alternatively just use: yamlkey->: {{some_other_key}} Which under the hood is just rewriting the input before processing as this: yamlkey->: var \"{{some_other_key}}\" For unrendered values you would omit any hook logic. debug Hook for debugging that prints the output context and pauses runtime. block Hook for blocks of hooks.This is a special case where the hooks input variables are not rendereduntil it is later executed. Each item is looped over and parsed like anormal pass. Useful if you have a block of hooks that should be groupedinto a single conditional / looped execution.Render context is a little different than normal where both the contextfrom outside of the hook and within the hook are made available. Forinstance in this contrived example: stuff: thingsblock->: merge: true stuff->: print other_things things->: print \"{{ stuff }}\" --if \"{{ stuff == 'things' }}\" The output would be: stuff: other_things Because the higher level stuff takes precidance where as:param items: Map of inputs assert Hook for asserting an input is equal to a value. tackle Hook for calling external tackle providers. match Hook for match / case statements. Takes a dict where the keys are matched to avalue. If the value has an arrow in it (ie key->: ... ) the arrow is stripped away.All matched values are ran as hooks. Examples \u00b6 Basic \u00b6 The most minimal implementation example : type : provider_docs chdir : \"..\" provider : docs","title":"Tackle"},{"location":"providers/tackle/#tackle","text":"Hooks that interface with tackle's parser and context. Core to most tackle scripts.","title":"tackle"},{"location":"providers/tackle/#hooks","text":"Type Description Return import Hook for importing external tackle-box providers. Does not actually execute thebase tackle in the provider but merely makes the hooks and functions available tobe used in the context. Takes any type as an argument to to build src and version import targets.### ExampleExpanded strings - Used as a private hook call where key is deleted post exec arbitrary key: _>: input src: robcxyz/tackle-demo version: v0.1.0 generate Hook for generating project outputs. Recursively renders all files and folders in agiven target directory to an output. If there is a \"templates\" directory and a fileor directory that matches the templates input param, use that as target. provider_docs Hook building provider docs. delete_key Hook for getting a key based on a key path which is a list with keys and numbersfor indexes in a list. get_key Hook for getting a key based on a key path which is a list with keys and numbersfor indexes in a list. set_key Hook for setting a key based on a key path which is a list with keys and numbersfor indexes in a list. type Hook for getting the type of a variable. var Hook for rendering a variable based on an input. Only useful for rendering asotherwise you wouldn't need this hook at all.Alternatively just use: yamlkey->: {{some_other_key}} Which under the hood is just rewriting the input before processing as this: yamlkey->: var \"{{some_other_key}}\" For unrendered values you would omit any hook logic. debug Hook for debugging that prints the output context and pauses runtime. block Hook for blocks of hooks.This is a special case where the hooks input variables are not rendereduntil it is later executed. Each item is looped over and parsed like anormal pass. Useful if you have a block of hooks that should be groupedinto a single conditional / looped execution.Render context is a little different than normal where both the contextfrom outside of the hook and within the hook are made available. Forinstance in this contrived example: stuff: thingsblock->: merge: true stuff->: print other_things things->: print \"{{ stuff }}\" --if \"{{ stuff == 'things' }}\" The output would be: stuff: other_things Because the higher level stuff takes precidance where as:param items: Map of inputs assert Hook for asserting an input is equal to a value. tackle Hook for calling external tackle providers. match Hook for match / case statements. Takes a dict where the keys are matched to avalue. If the value has an arrow in it (ie key->: ... ) the arrow is stripped away.All matched values are ran as hooks.","title":"Hooks"},{"location":"providers/tackle/#examples","text":"","title":"Examples"},{"location":"providers/tackle/#basic","text":"The most minimal implementation example : type : provider_docs chdir : \"..\" provider : docs","title":"Basic"},{"location":"providers/tackle/assert/","text":"assert \u00b6 Hooks that interface with tackle's parser and context. Core to most tackle scripts. Inputs \u00b6 Name Type Default Required Description input Any value Any Arguments \u00b6 Position Argument Type 1 input any 2 value any Output \u00b6 None","title":"assert"},{"location":"providers/tackle/assert/#assert","text":"Hooks that interface with tackle's parser and context. Core to most tackle scripts.","title":"assert"},{"location":"providers/tackle/assert/#inputs","text":"Name Type Default Required Description input Any value Any","title":"Inputs"},{"location":"providers/tackle/assert/#arguments","text":"Position Argument Type 1 input any 2 value any","title":"Arguments"},{"location":"providers/tackle/assert/#output","text":"None","title":"Output"},{"location":"providers/tackle/block/","text":"block \u00b6 Hooks that interface with tackle's parser and context. Core to most tackle scripts. Inputs \u00b6 Name Type Default Required Description items object Items to be parsed like a normal input. Arguments \u00b6 Position Argument Type Output \u00b6 dict","title":"block"},{"location":"providers/tackle/block/#block","text":"Hooks that interface with tackle's parser and context. Core to most tackle scripts.","title":"block"},{"location":"providers/tackle/block/#inputs","text":"Name Type Default Required Description items object Items to be parsed like a normal input.","title":"Inputs"},{"location":"providers/tackle/block/#arguments","text":"Position Argument Type","title":"Arguments"},{"location":"providers/tackle/block/#output","text":"dict","title":"Output"},{"location":"providers/tackle/debug/","text":"debug \u00b6 Hooks that interface with tackle's parser and context. Core to most tackle scripts. Inputs \u00b6 Name Type Default Required Description Arguments \u00b6 Position Argument Type Output \u00b6 None","title":"debug"},{"location":"providers/tackle/debug/#debug","text":"Hooks that interface with tackle's parser and context. Core to most tackle scripts.","title":"debug"},{"location":"providers/tackle/debug/#inputs","text":"Name Type Default Required Description","title":"Inputs"},{"location":"providers/tackle/debug/#arguments","text":"Position Argument Type","title":"Arguments"},{"location":"providers/tackle/debug/#output","text":"None","title":"Output"},{"location":"providers/tackle/delete_key/","text":"delete_key \u00b6 Hooks that interface with tackle's parser and context. Core to most tackle scripts. Inputs \u00b6 Name Type Default Required Description path Any A list or string with a separator for the path to the value you want to update with strings for keys and ints for indexes in the list. sep string / X For string paths, a separator for key path. Arguments \u00b6 Position Argument Type 1 path any Output \u00b6 None","title":"delete_key"},{"location":"providers/tackle/delete_key/#delete_key","text":"Hooks that interface with tackle's parser and context. Core to most tackle scripts.","title":"delete_key"},{"location":"providers/tackle/delete_key/#inputs","text":"Name Type Default Required Description path Any A list or string with a separator for the path to the value you want to update with strings for keys and ints for indexes in the list. sep string / X For string paths, a separator for key path.","title":"Inputs"},{"location":"providers/tackle/delete_key/#arguments","text":"Position Argument Type 1 path any","title":"Arguments"},{"location":"providers/tackle/delete_key/#output","text":"None","title":"Output"},{"location":"providers/tackle/generate/","text":"generate \u00b6 Hooks that interface with tackle's parser and context. Core to most tackle scripts. Inputs \u00b6 Name Type Default Required Description templates Any Path or list of paths to a templatable directory or file to recursively render the contents. output string . X Path to put the output file(s). copy_without_render Any [] X overwrite_if_exists boolean False X Overwrite the output if exists. skip_if_file_exists boolean False X Skip creating if path exists. render_context object A render context that invalidates the default context. additional_context Any A map to use as additional context when rendering. base_dir string env_ Any file_system_loader_ Any file_path_separator_ string Arguments \u00b6 Position Argument Type 1 templates union 2 output str Output \u00b6 None","title":"generate"},{"location":"providers/tackle/generate/#generate","text":"Hooks that interface with tackle's parser and context. Core to most tackle scripts.","title":"generate"},{"location":"providers/tackle/generate/#inputs","text":"Name Type Default Required Description templates Any Path or list of paths to a templatable directory or file to recursively render the contents. output string . X Path to put the output file(s). copy_without_render Any [] X overwrite_if_exists boolean False X Overwrite the output if exists. skip_if_file_exists boolean False X Skip creating if path exists. render_context object A render context that invalidates the default context. additional_context Any A map to use as additional context when rendering. base_dir string env_ Any file_system_loader_ Any file_path_separator_ string","title":"Inputs"},{"location":"providers/tackle/generate/#arguments","text":"Position Argument Type 1 templates union 2 output str","title":"Arguments"},{"location":"providers/tackle/generate/#output","text":"None","title":"Output"},{"location":"providers/tackle/get_key/","text":"get_key \u00b6 Hooks that interface with tackle's parser and context. Core to most tackle scripts. Inputs \u00b6 Name Type Default Required Description path Any A list or string with a separator for the path to the value you want to update with strings for keys and ints for indexes in the list. sep string / X For string paths, a separator for key path. Arguments \u00b6 Position Argument Type 1 path any Output \u00b6 None","title":"get_key"},{"location":"providers/tackle/get_key/#get_key","text":"Hooks that interface with tackle's parser and context. Core to most tackle scripts.","title":"get_key"},{"location":"providers/tackle/get_key/#inputs","text":"Name Type Default Required Description path Any A list or string with a separator for the path to the value you want to update with strings for keys and ints for indexes in the list. sep string / X For string paths, a separator for key path.","title":"Inputs"},{"location":"providers/tackle/get_key/#arguments","text":"Position Argument Type 1 path any","title":"Arguments"},{"location":"providers/tackle/get_key/#output","text":"None","title":"Output"},{"location":"providers/tackle/import/","text":"import \u00b6 Hooks that interface with tackle's parser and context. Core to most tackle scripts. Inputs \u00b6 Name Type Default Required Description src Any A str/list/dict as above. version string Version of src for remote imports. Arguments \u00b6 Position Argument Type 1 src any Output \u00b6 None","title":"import"},{"location":"providers/tackle/import/#import","text":"Hooks that interface with tackle's parser and context. Core to most tackle scripts.","title":"import"},{"location":"providers/tackle/import/#inputs","text":"Name Type Default Required Description src Any A str/list/dict as above. version string Version of src for remote imports.","title":"Inputs"},{"location":"providers/tackle/import/#arguments","text":"Position Argument Type 1 src any","title":"Arguments"},{"location":"providers/tackle/import/#output","text":"None","title":"Output"},{"location":"providers/tackle/match/","text":"match \u00b6 Hooks that interface with tackle's parser and context. Core to most tackle scripts. Inputs \u00b6 Name Type Default Required Description value string case object A dictionary where the keys are cases to be matched. Runs hooks if present. Arguments \u00b6 Position Argument Type 1 value str Output \u00b6 union","title":"match"},{"location":"providers/tackle/match/#match","text":"Hooks that interface with tackle's parser and context. Core to most tackle scripts.","title":"match"},{"location":"providers/tackle/match/#inputs","text":"Name Type Default Required Description value string case object A dictionary where the keys are cases to be matched. Runs hooks if present.","title":"Inputs"},{"location":"providers/tackle/match/#arguments","text":"Position Argument Type 1 value str","title":"Arguments"},{"location":"providers/tackle/match/#output","text":"union","title":"Output"},{"location":"providers/tackle/provider_docs/","text":"provider_docs \u00b6 Hooks that interface with tackle's parser and context. Core to most tackle scripts. Inputs \u00b6 Name Type Default Required Description path string . X The path to the provider. output string . X The path to output the docs to. provider string The provider name. templates_dir string A path to a directory with hook-doc.md and provider-doc.md . hooks_dir string hooks X Directory hooks are in. meta_file string .tackle.meta.yaml X A file to keep metadata about the provider. Is renedered like a tackle file. See examples. Arguments \u00b6 Position Argument Type 1 path str 2 output str Output \u00b6 dict","title":"provider_docs"},{"location":"providers/tackle/provider_docs/#provider_docs","text":"Hooks that interface with tackle's parser and context. Core to most tackle scripts.","title":"provider_docs"},{"location":"providers/tackle/provider_docs/#inputs","text":"Name Type Default Required Description path string . X The path to the provider. output string . X The path to output the docs to. provider string The provider name. templates_dir string A path to a directory with hook-doc.md and provider-doc.md . hooks_dir string hooks X Directory hooks are in. meta_file string .tackle.meta.yaml X A file to keep metadata about the provider. Is renedered like a tackle file. See examples.","title":"Inputs"},{"location":"providers/tackle/provider_docs/#arguments","text":"Position Argument Type 1 path str 2 output str","title":"Arguments"},{"location":"providers/tackle/provider_docs/#output","text":"dict","title":"Output"},{"location":"providers/tackle/set_key/","text":"set_key \u00b6 Hooks that interface with tackle's parser and context. Core to most tackle scripts. Inputs \u00b6 Name Type Default Required Description path Any A list or string with a separator for the path to the value you want to update with strings for keys and ints for indexes in the list. value Any The value to update the key with. sep string / X For string paths, a separator for key path. Arguments \u00b6 Position Argument Type 1 path any 2 value any Output \u00b6 None","title":"set_key"},{"location":"providers/tackle/set_key/#set_key","text":"Hooks that interface with tackle's parser and context. Core to most tackle scripts.","title":"set_key"},{"location":"providers/tackle/set_key/#inputs","text":"Name Type Default Required Description path Any A list or string with a separator for the path to the value you want to update with strings for keys and ints for indexes in the list. value Any The value to update the key with. sep string / X For string paths, a separator for key path.","title":"Inputs"},{"location":"providers/tackle/set_key/#arguments","text":"Position Argument Type 1 path any 2 value any","title":"Arguments"},{"location":"providers/tackle/set_key/#output","text":"None","title":"Output"},{"location":"providers/tackle/tackle/","text":"tackle \u00b6 Hooks that interface with tackle's parser and context. Core to most tackle scripts. Inputs \u00b6 Name Type Default Required Description input_string string The input can be one of repo, file path, directory with tackle.yaml, zip file, or if left blank parent tackle file. checkout string The branch or version to checkout for repo type inputs_strings. context_file string The file to run inside a repo input. additional_context object Any additional context to use when calling the hook. Like existing context. context object A context to use that overrides the current context. password string A password to use for repo inputs. directory string The directory to run inside for repo inputs. override object A dictionary of keys to override. Arguments \u00b6 Position Argument Type 1 input_string str Output \u00b6 dict Examples \u00b6 Basic \u00b6 The most minimal implementation example : type : provider_docs chdir : \"..\" provider : docs","title":"tackle"},{"location":"providers/tackle/tackle/#tackle","text":"Hooks that interface with tackle's parser and context. Core to most tackle scripts.","title":"tackle"},{"location":"providers/tackle/tackle/#inputs","text":"Name Type Default Required Description input_string string The input can be one of repo, file path, directory with tackle.yaml, zip file, or if left blank parent tackle file. checkout string The branch or version to checkout for repo type inputs_strings. context_file string The file to run inside a repo input. additional_context object Any additional context to use when calling the hook. Like existing context. context object A context to use that overrides the current context. password string A password to use for repo inputs. directory string The directory to run inside for repo inputs. override object A dictionary of keys to override.","title":"Inputs"},{"location":"providers/tackle/tackle/#arguments","text":"Position Argument Type 1 input_string str","title":"Arguments"},{"location":"providers/tackle/tackle/#output","text":"dict","title":"Output"},{"location":"providers/tackle/tackle/#examples","text":"","title":"Examples"},{"location":"providers/tackle/tackle/#basic","text":"The most minimal implementation example : type : provider_docs chdir : \"..\" provider : docs","title":"Basic"},{"location":"providers/tackle/type/","text":"type \u00b6 Hooks that interface with tackle's parser and context. Core to most tackle scripts. Inputs \u00b6 Name Type Default Required Description input Any Any variable input. Arguments \u00b6 Position Argument Type 1 input any Output \u00b6 None","title":"type"},{"location":"providers/tackle/type/#type","text":"Hooks that interface with tackle's parser and context. Core to most tackle scripts.","title":"type"},{"location":"providers/tackle/type/#inputs","text":"Name Type Default Required Description input Any Any variable input.","title":"Inputs"},{"location":"providers/tackle/type/#arguments","text":"Position Argument Type 1 input any","title":"Arguments"},{"location":"providers/tackle/type/#output","text":"None","title":"Output"},{"location":"providers/tackle/var/","text":"var \u00b6 Hooks that interface with tackle's parser and context. Core to most tackle scripts. Inputs \u00b6 Name Type Default Required Description input Any Any variable input. Arguments \u00b6 Position Argument Type 1 input any Output \u00b6 None","title":"var"},{"location":"providers/tackle/var/#var","text":"Hooks that interface with tackle's parser and context. Core to most tackle scripts.","title":"var"},{"location":"providers/tackle/var/#inputs","text":"Name Type Default Required Description input Any Any variable input.","title":"Inputs"},{"location":"providers/tackle/var/#arguments","text":"Position Argument Type 1 input any","title":"Arguments"},{"location":"providers/tackle/var/#output","text":"None","title":"Output"},{"location":"providers/toml/","text":"toml \u00b6 None Hooks \u00b6 Type Description Return toml Hook for toml.:param path: The file path to put read or write to:param contents: Supplied dictionary or list to write.:param in_place: Boolean to read the contents of the path and then write after modifications.:param remove: Parameter or regex to remove from list or dict:param update: Use the python update dict method on contents before writing:param filter: List or string to values to.:param merge_dict: Dict input that recursively overwrites the contents .:param append_items: List to append to append_key key.:param append_key: String or list of hierarchical keys to append item to. Defaults to root element.:param mode: The mode that the file should write. Defaults to write 'w'. Seee https://docs.python.org/3/library/functions.html#open Requirements \u00b6 Requirement toml>=0.10.0","title":"TOML"},{"location":"providers/toml/#toml","text":"None","title":"toml"},{"location":"providers/toml/#hooks","text":"Type Description Return toml Hook for toml.:param path: The file path to put read or write to:param contents: Supplied dictionary or list to write.:param in_place: Boolean to read the contents of the path and then write after modifications.:param remove: Parameter or regex to remove from list or dict:param update: Use the python update dict method on contents before writing:param filter: List or string to values to.:param merge_dict: Dict input that recursively overwrites the contents .:param append_items: List to append to append_key key.:param append_key: String or list of hierarchical keys to append item to. Defaults to root element.:param mode: The mode that the file should write. Defaults to write 'w'. Seee https://docs.python.org/3/library/functions.html#open","title":"Hooks"},{"location":"providers/toml/#requirements","text":"Requirement toml>=0.10.0","title":"Requirements"},{"location":"providers/toml/toml/","text":"toml \u00b6 Hook for toml.:param path: The file path to put read or write to:param contents: Supplied dictionary or list to write.:param in_place: Boolean to read the contents of the path and then write after modifications.:param remove: Parameter or regex to remove from list or dict:param update: Use the python update dict method on contents before writing:param filter: List or string to values to.:param merge_dict: Dict input that recursively overwrites the contents .:param append_items: List to append to append_key key.:param append_key: String or list of hierarchical keys to append item to. Defaults to root element.:param mode: The mode that the file should write. Defaults to write 'w'. Seee https://docs.python.org/3/library/functions.html#open Inputs \u00b6 Name Type Default Required Description remove Any contents Any update object filter array path string merge_dict object in_place boolean False X append_items Any append_keys Any mode string write boolean Arguments \u00b6 Position Argument Type Output \u00b6 None","title":"toml"},{"location":"providers/toml/toml/#toml","text":"Hook for toml.:param path: The file path to put read or write to:param contents: Supplied dictionary or list to write.:param in_place: Boolean to read the contents of the path and then write after modifications.:param remove: Parameter or regex to remove from list or dict:param update: Use the python update dict method on contents before writing:param filter: List or string to values to.:param merge_dict: Dict input that recursively overwrites the contents .:param append_items: List to append to append_key key.:param append_key: String or list of hierarchical keys to append item to. Defaults to root element.:param mode: The mode that the file should write. Defaults to write 'w'. Seee https://docs.python.org/3/library/functions.html#open","title":"toml"},{"location":"providers/toml/toml/#inputs","text":"Name Type Default Required Description remove Any contents Any update object filter array path string merge_dict object in_place boolean False X append_items Any append_keys Any mode string write boolean","title":"Inputs"},{"location":"providers/toml/toml/#arguments","text":"Position Argument Type","title":"Arguments"},{"location":"providers/toml/toml/#output","text":"None","title":"Output"},{"location":"tutorials/","text":"Tutorials \u00b6 Code Generation Kubernetes Utilities","title":"Tutorials"},{"location":"tutorials/#tutorials","text":"Code Generation Kubernetes Utilities","title":"Tutorials"},{"location":"tutorials/code-generation/","text":"Code Generation Tutorial \u00b6 The basic structure of any code generator is to build some kind of context and then render a set of files to a target directory. Most code generators out there have only one way of building the rendering context. For instance: create-react-app All configuration options baked in cookiecutter User inputs based on a json config file tackle-box is a fork of this project openapi-generator User points to an OpenAPI spec Tackle-box being more of a DSL allows all these configuration options in a completely modular way with the only catch that you need to explicitly declare all the functionality in a tackle file. This tutorial walks through how to setup code generators based on each of the above patterns. Code Generator Examples \u00b6 Coming soon Creating Your Own Code Generator \u00b6 The following sections outline key concepts when creating your own code generator. Tackle File Structure \u00b6 Tackle files are all parsed sequentially such that when you build a code generator, the render context must come before the hook call that generates the code, the generate hook . For instance given this file structure: \u251c\u2500\u2500 templates \u2502 \u2514\u2500\u2500 file1.py \u2502 \u2514\u2500\u2500 file2.py \u2514\u2500\u2500 tackle.yaml With this tackle file: # Arbitrary context key : value list : - item1 - item2 # Use the generate hook generate code : -> : generate input : templates output : src # Or in compact form generate code-> : generate templates src If it was in a github repo it could then be called in the command line with tackle <your org>/<your repo> . The output would be a src directory with the templates rendered with jinja based on the preceding context (ie key and list ) in the current working directory. Prompting a user for inputs \u00b6 If one instead wanted to prompt the user for items which would be used to render the templates, one would call various prompt hooks from the pyinquirer provider. Some common ones include: input - Input strings select - List of options where the user can only choose one checkbox - Multi select that returns a list confirm - Simple confirmation that returns a boolean For instance: # Arbitrary context project_slug-> : input What is the project's slug (ie head directory)? license : -> : select What license type? choices : - Apache - MIT makefile_sections : -> : checkbox What utilities to include in makefile? choices : - build - docs - tests ci_enable-> : confirm Do you want to setup CI? generate ci-> : generate templates/.github \"{{project_slug}}/\" --if \"{{ci_enable}}\" generate code-> : generate templates/src \"{{project_slug}}\" Ingesting a spec and transforming it to a render context \u00b6 Coming soon - creating OpenAPI transformer hook Using other tackle providers \u00b6 Code generators are great at setting up boilerplate such as licenses and makefiles but each one shouldn't have to come up with its own license / makefile generator. Tackle box being modular is perfect for this where instead of implementing these items in your code generator, call these items as providers. For instance if you wanted to include a license, in the tackle file include: license-> : tackle robcxyz/tackle-license Which is itself a code generator and will generate the appropriate license and return a map including all the selections and context used to generate the license. If one alternatively wanted to run a number of providers: providers : -> : checkbox What additional items do you want to add to the generated code? checked : true choices : - license - makefile - bazel call providers-> : tackle robcxyz/tackle-{{item}} --for {{providers}} Testing code generators \u00b6 Coming soon","title":"Code Generation"},{"location":"tutorials/code-generation/#code-generation-tutorial","text":"The basic structure of any code generator is to build some kind of context and then render a set of files to a target directory. Most code generators out there have only one way of building the rendering context. For instance: create-react-app All configuration options baked in cookiecutter User inputs based on a json config file tackle-box is a fork of this project openapi-generator User points to an OpenAPI spec Tackle-box being more of a DSL allows all these configuration options in a completely modular way with the only catch that you need to explicitly declare all the functionality in a tackle file. This tutorial walks through how to setup code generators based on each of the above patterns.","title":"Code Generation Tutorial"},{"location":"tutorials/code-generation/#code-generator-examples","text":"Coming soon","title":"Code Generator Examples"},{"location":"tutorials/code-generation/#creating-your-own-code-generator","text":"The following sections outline key concepts when creating your own code generator.","title":"Creating Your Own Code Generator"},{"location":"tutorials/code-generation/#tackle-file-structure","text":"Tackle files are all parsed sequentially such that when you build a code generator, the render context must come before the hook call that generates the code, the generate hook . For instance given this file structure: \u251c\u2500\u2500 templates \u2502 \u2514\u2500\u2500 file1.py \u2502 \u2514\u2500\u2500 file2.py \u2514\u2500\u2500 tackle.yaml With this tackle file: # Arbitrary context key : value list : - item1 - item2 # Use the generate hook generate code : -> : generate input : templates output : src # Or in compact form generate code-> : generate templates src If it was in a github repo it could then be called in the command line with tackle <your org>/<your repo> . The output would be a src directory with the templates rendered with jinja based on the preceding context (ie key and list ) in the current working directory.","title":"Tackle File Structure"},{"location":"tutorials/code-generation/#prompting-a-user-for-inputs","text":"If one instead wanted to prompt the user for items which would be used to render the templates, one would call various prompt hooks from the pyinquirer provider. Some common ones include: input - Input strings select - List of options where the user can only choose one checkbox - Multi select that returns a list confirm - Simple confirmation that returns a boolean For instance: # Arbitrary context project_slug-> : input What is the project's slug (ie head directory)? license : -> : select What license type? choices : - Apache - MIT makefile_sections : -> : checkbox What utilities to include in makefile? choices : - build - docs - tests ci_enable-> : confirm Do you want to setup CI? generate ci-> : generate templates/.github \"{{project_slug}}/\" --if \"{{ci_enable}}\" generate code-> : generate templates/src \"{{project_slug}}\"","title":"Prompting a user for inputs"},{"location":"tutorials/code-generation/#ingesting-a-spec-and-transforming-it-to-a-render-context","text":"Coming soon - creating OpenAPI transformer hook","title":"Ingesting a spec and transforming it to a render context"},{"location":"tutorials/code-generation/#using-other-tackle-providers","text":"Code generators are great at setting up boilerplate such as licenses and makefiles but each one shouldn't have to come up with its own license / makefile generator. Tackle box being modular is perfect for this where instead of implementing these items in your code generator, call these items as providers. For instance if you wanted to include a license, in the tackle file include: license-> : tackle robcxyz/tackle-license Which is itself a code generator and will generate the appropriate license and return a map including all the selections and context used to generate the license. If one alternatively wanted to run a number of providers: providers : -> : checkbox What additional items do you want to add to the generated code? checked : true choices : - license - makefile - bazel call providers-> : tackle robcxyz/tackle-{{item}} --for {{providers}}","title":"Using other tackle providers"},{"location":"tutorials/code-generation/#testing-code-generators","text":"Coming soon","title":"Testing code generators"},{"location":"tutorials/kubernetes/","text":"","title":"Kubernetes"},{"location":"tutorials/utilities/","text":"","title":"Utilities"}]}