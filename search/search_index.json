{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Tackle-box Docs \u00b6 Tackle box is a declarative DSL for building modular utilities and code generators. Tool is plugins based and can easily be extended by writing additional hooks or importing external providers creating a web of interoperable CLIs. Installation Use Cases Project Structure Calling from Command Line Creating Providers Using Providers Writing Tackle Files Hook Methods Writing Hooks Testing Providers Tackle File Examples Tutorials Provider Docs","title":"Index"},{"location":"#tackle-box-docs","text":"Tackle box is a declarative DSL for building modular utilities and code generators. Tool is plugins based and can easily be extended by writing additional hooks or importing external providers creating a web of interoperable CLIs. Installation Use Cases Project Structure Calling from Command Line Creating Providers Using Providers Writing Tackle Files Hook Methods Writing Hooks Testing Providers Tackle File Examples Tutorials Provider Docs","title":"Tackle-box Docs"},{"location":"authors/","text":"Credits \u00b6 Tackle Box Devs \u00b6 Development Leads \u00b6 Rob Cannon ( @robcxyz ) Contributors \u00b6 Richard Mah ( @shinyfoil ) Cookiecutter Devs \u00b6 Development Leads \u00b6 Audrey Roy Greenfeld ( @audreyr ) Daniel Roy Greenfeld ( @pydanny ) Raphael Pierzina ( @hackebrot ) Core Committers \u00b6 Michael Joseph ( @michaeljoseph ) Paul Moore ( @pfmoore ) Andrey Shpak ( @insspb ) Sorin Sbarnea ( @ssbarnea ) F\u00e1bio C. Barrionuevo da Luz ( @luzfcb ) Contributors \u00b6 Steven Loria ( @sloria ) Goran Peretin ( @gperetin ) Hamish Downer ( @foobacca ) Thomas Orozco ( @krallin ) Jindrich Smitka ( @s-m-i-t-a ) Benjamin Schwarze ( @benjixx ) Raphi ( @raphigaziano ) Thomas Chiroux ( @ThomasChiroux ) Sergi Almacellas Abellana ( @pokoli ) Alex Gaynor ( @alex ) Rolo ( @rolo ) Pablo ( @oubiga ) Bruno Rocha ( @rochacbruno ) Alexander Artemenko ( @svetlyak40wt ) Mahmoud Abdelkader ( @mahmoudimus ) Leonardo Borges Avelino ( @lborgav ) Chris Trotman ( @solarnz ) Rolf ( @relekang ) Noah Kantrowitz ( @coderanger ) Vincent Bernat ( @vincentbernat ) Germ\u00e1n Moya ( @pbacterio ) Ned Batchelder ( @nedbat ) Dave Dash ( @davedash ) Johan Charpentier ( @cyberj ) \u00c9ric Araujo ( @merwok ) saxix ( @saxix ) Tzu-ping Chung ( @uranusjr ) Caleb Hattingh ( @cjrh ) Flavio Curella ( @fcurella ) Adam Venturella ( @aventurella ) Monty Taylor ( @emonty ) schacki ( @schacki ) Ryan Olson ( @ryanolson ) Trey Hunner ( @treyhunner ) Russell Keith-Magee ( @freakboy3742 ) Mishbah Razzaque ( @mishbahr ) Robin Andeer ( @robinandeer ) Rachel Sanders ( @trustrachel ) R\u00e9my Hubscher ( @Natim ) Dino Petron3 ( @dinopetrone ) Peter Inglesby ( @inglesp ) Ramiro Batista da Luz ( @ramiroluz ) Omer Katz ( @thedrow ) lord63 ( @lord63 ) Randy Syring ( @rsyring ) Mark Jones ( @mark0978 ) Marc Abramowitz ( @msabramo ) Lucian Ursu ( @LucianU ) Osvaldo Santana Neto ( @osantana ) Matthias84 ( @Matthias84 ) Simeon Visser ( @svisser ) Guruprasad ( @lgp171188 ) Charles-Axel Dein ( @charlax ) Diego Garcia ( @drgarcia1986 ) maiksensi ( @maiksensi ) Andrew Conti ( @agconti ) Valentin Lab ( @vaab ) Ilja Bauer ( @iljabauer ) Elias Dorneles ( @eliasdorneles ) Matias Saguir ( @mativs ) Johannes ( @johtso ) macrotim ( @macrotim ) Will McGinnis ( @wdm0006 ) C\u00e9dric Krier ( @cedk ) Tim Osborn ( @ptim ) Aaron Gallagher ( @habnabit ) mozillazg ( @mozillazg ) Joachim Jablon ( @ewjoachim ) Andrew Ittner ( @tephyr ) Diane DeMers Chen ( @purplediane ) zzzirk ( @zzzirk ) Carol Willing ( @willingc ) phoebebauer ( @phoebebauer ) Adam Chainz ( @adamchainz ) Sul\u00e9 ( @suledev ) Evan Palmer ( @palmerev ) Bruce Eckel ( @BruceEckel ) Robert Lyon ( @ivanlyon ) Terry Bates ( @terryjbates ) Brett Cannon ( @brettcannon ) Michael Warkentin ( @mwarkentin ) Bart\u0142omiej Kurzeja ( @B3QL ) Thomas O'Donnell ( @andytom ) Jeremy Carbaugh ( @jcarbaugh ) Nathan Cheung ( @cheungnj ) Abd\u00f3 Roig-Maranges ( @aroig ) Steve Piercy ( @stevepiercy ) Corey ( @coreysnyder04 ) Dmitry Evstratov ( @devstrat ) Eyal Levin ( @eyalev ) mathagician ( @mathagician ) Guillaume Gelin ( @ramnes ) @delirious-lettuce ( @delirious-lettuce ) Gasper Vozel ( @karantan ) Joshua Carp ( @jmcarp ) @meahow ( @meahow ) Andrea Grandi ( @andreagrandi ) Issa Jubril ( @jubrilissa ) Nytiennzo Madooray ( @Nythiennzo ) Erik Bachorski ( @dornheimer ) cclauss ( @cclauss ) Andy Craze ( @accraze ) Anthony Sottile ( @asottile ) Jonathan Sick ( @jonathansick ) Hugo ( @hugovk ) Min ho Kim ( @minho42 ) Ryan Ly ( @rly ) Akintola Rahmat ( @mihrab34 ) Jai Ram Rideout ( @jairideout ) Diego Carrasco Gubernatis ( @dacog ) Wagner Negr\u00e3o ( @wagnernegrao ) Josh Barnes ( @jcb91 ) Nikita Sobolev ( @sobolevn ) Matt Stibbs ( @mattstibbs ) MinchinWeb ( @MinchinWeb ) kishan ( @kishan ) tonytheleg ( @tonytheleg ) Roman Hartmann ( @RomHartmann ) DSEnvel ( @DSEnvel ) kishan ( @kishan ) Bruno Alla ( @browniebroke ) nicain ( @nicain ) Carsten R\u00f6snick-Neugebauer ( @croesnick ) igorbasko01 ( @igorbasko01 ) Dan Booth Dev ( @DanBoothDev ) Pablo Panero ( @ppanero ) Chuan-Heng Hsiao ( @chhsiao1981 ) Mohammad Hossein Sekhavat ( @mhsekhavat ) Amey Joshi ( @amey589 ) Paul Harrison ( @smoothml )","title":"Authors"},{"location":"authors/#credits","text":"","title":"Credits"},{"location":"authors/#tackle-box-devs","text":"","title":"Tackle Box Devs"},{"location":"authors/#development-leads","text":"Rob Cannon ( @robcxyz )","title":"Development Leads"},{"location":"authors/#contributors","text":"Richard Mah ( @shinyfoil )","title":"Contributors"},{"location":"authors/#cookiecutter-devs","text":"","title":"Cookiecutter Devs"},{"location":"authors/#development-leads_1","text":"Audrey Roy Greenfeld ( @audreyr ) Daniel Roy Greenfeld ( @pydanny ) Raphael Pierzina ( @hackebrot )","title":"Development Leads"},{"location":"authors/#core-committers","text":"Michael Joseph ( @michaeljoseph ) Paul Moore ( @pfmoore ) Andrey Shpak ( @insspb ) Sorin Sbarnea ( @ssbarnea ) F\u00e1bio C. Barrionuevo da Luz ( @luzfcb )","title":"Core Committers"},{"location":"authors/#contributors_1","text":"Steven Loria ( @sloria ) Goran Peretin ( @gperetin ) Hamish Downer ( @foobacca ) Thomas Orozco ( @krallin ) Jindrich Smitka ( @s-m-i-t-a ) Benjamin Schwarze ( @benjixx ) Raphi ( @raphigaziano ) Thomas Chiroux ( @ThomasChiroux ) Sergi Almacellas Abellana ( @pokoli ) Alex Gaynor ( @alex ) Rolo ( @rolo ) Pablo ( @oubiga ) Bruno Rocha ( @rochacbruno ) Alexander Artemenko ( @svetlyak40wt ) Mahmoud Abdelkader ( @mahmoudimus ) Leonardo Borges Avelino ( @lborgav ) Chris Trotman ( @solarnz ) Rolf ( @relekang ) Noah Kantrowitz ( @coderanger ) Vincent Bernat ( @vincentbernat ) Germ\u00e1n Moya ( @pbacterio ) Ned Batchelder ( @nedbat ) Dave Dash ( @davedash ) Johan Charpentier ( @cyberj ) \u00c9ric Araujo ( @merwok ) saxix ( @saxix ) Tzu-ping Chung ( @uranusjr ) Caleb Hattingh ( @cjrh ) Flavio Curella ( @fcurella ) Adam Venturella ( @aventurella ) Monty Taylor ( @emonty ) schacki ( @schacki ) Ryan Olson ( @ryanolson ) Trey Hunner ( @treyhunner ) Russell Keith-Magee ( @freakboy3742 ) Mishbah Razzaque ( @mishbahr ) Robin Andeer ( @robinandeer ) Rachel Sanders ( @trustrachel ) R\u00e9my Hubscher ( @Natim ) Dino Petron3 ( @dinopetrone ) Peter Inglesby ( @inglesp ) Ramiro Batista da Luz ( @ramiroluz ) Omer Katz ( @thedrow ) lord63 ( @lord63 ) Randy Syring ( @rsyring ) Mark Jones ( @mark0978 ) Marc Abramowitz ( @msabramo ) Lucian Ursu ( @LucianU ) Osvaldo Santana Neto ( @osantana ) Matthias84 ( @Matthias84 ) Simeon Visser ( @svisser ) Guruprasad ( @lgp171188 ) Charles-Axel Dein ( @charlax ) Diego Garcia ( @drgarcia1986 ) maiksensi ( @maiksensi ) Andrew Conti ( @agconti ) Valentin Lab ( @vaab ) Ilja Bauer ( @iljabauer ) Elias Dorneles ( @eliasdorneles ) Matias Saguir ( @mativs ) Johannes ( @johtso ) macrotim ( @macrotim ) Will McGinnis ( @wdm0006 ) C\u00e9dric Krier ( @cedk ) Tim Osborn ( @ptim ) Aaron Gallagher ( @habnabit ) mozillazg ( @mozillazg ) Joachim Jablon ( @ewjoachim ) Andrew Ittner ( @tephyr ) Diane DeMers Chen ( @purplediane ) zzzirk ( @zzzirk ) Carol Willing ( @willingc ) phoebebauer ( @phoebebauer ) Adam Chainz ( @adamchainz ) Sul\u00e9 ( @suledev ) Evan Palmer ( @palmerev ) Bruce Eckel ( @BruceEckel ) Robert Lyon ( @ivanlyon ) Terry Bates ( @terryjbates ) Brett Cannon ( @brettcannon ) Michael Warkentin ( @mwarkentin ) Bart\u0142omiej Kurzeja ( @B3QL ) Thomas O'Donnell ( @andytom ) Jeremy Carbaugh ( @jcarbaugh ) Nathan Cheung ( @cheungnj ) Abd\u00f3 Roig-Maranges ( @aroig ) Steve Piercy ( @stevepiercy ) Corey ( @coreysnyder04 ) Dmitry Evstratov ( @devstrat ) Eyal Levin ( @eyalev ) mathagician ( @mathagician ) Guillaume Gelin ( @ramnes ) @delirious-lettuce ( @delirious-lettuce ) Gasper Vozel ( @karantan ) Joshua Carp ( @jmcarp ) @meahow ( @meahow ) Andrea Grandi ( @andreagrandi ) Issa Jubril ( @jubrilissa ) Nytiennzo Madooray ( @Nythiennzo ) Erik Bachorski ( @dornheimer ) cclauss ( @cclauss ) Andy Craze ( @accraze ) Anthony Sottile ( @asottile ) Jonathan Sick ( @jonathansick ) Hugo ( @hugovk ) Min ho Kim ( @minho42 ) Ryan Ly ( @rly ) Akintola Rahmat ( @mihrab34 ) Jai Ram Rideout ( @jairideout ) Diego Carrasco Gubernatis ( @dacog ) Wagner Negr\u00e3o ( @wagnernegrao ) Josh Barnes ( @jcb91 ) Nikita Sobolev ( @sobolevn ) Matt Stibbs ( @mattstibbs ) MinchinWeb ( @MinchinWeb ) kishan ( @kishan ) tonytheleg ( @tonytheleg ) Roman Hartmann ( @RomHartmann ) DSEnvel ( @DSEnvel ) kishan ( @kishan ) Bruno Alla ( @browniebroke ) nicain ( @nicain ) Carsten R\u00f6snick-Neugebauer ( @croesnick ) igorbasko01 ( @igorbasko01 ) Dan Booth Dev ( @DanBoothDev ) Pablo Panero ( @ppanero ) Chuan-Heng Hsiao ( @chhsiao1981 ) Mohammad Hossein Sekhavat ( @mhsekhavat ) Amey Joshi ( @amey589 ) Paul Harrison ( @smoothml )","title":"Contributors"},{"location":"command-line/","text":"Command Line \u00b6 Tackle-box is extremely flexible on the inputs that it accepts to run against. Basically any file, directory, or repo are acceptable inputs or no input at all. This document describes the logic behind how tackle takes in inputs including how additional args, kwargs, and flags are interpreted from the command line. Calling tackle from the command line and from within a tackle file with a tackle hook is the same except for how additional arguments are interpreted. Targets \u00b6 Targets are the first argument in any tackle call. For instance: tackle TARGET arg1 arg2 --key value --flag File \u00b6 Tackle can be called against any yaml file or json. Tackle runs the file as if it is in the current directory. tackle some/file/location.yaml Directory \u00b6 Tackle can be called against any directory and looks for a \"tackle file\", a file that matches tackle.yaml/yml/json or .tackle.yaml/yml/json and runs against that. tackle some/directory/location Repository \u00b6 Tackle can be called against any repository looking input which similar to a directory input, looks for a \"tackle file\" and runs against that. Repository sources can be abbreviated such that the following items are equivalent. https://github.com/robcxyz/tackle-provider github.com/robcxyz/tackle-provider robcxyz/tackle-provider tackle robcxyz/tackle-provider Zipfile \u00b6 Tackle can also run against a zip file. tackle path/to/some/zipfile.zip No argument supplied \u00b6 When no input argument is supplied, tackle by default looks in the parent directories for the nearest tackle file and runs that. This is useful if you want to store a collection of calls at some location that you want to use from your present directory. tackle Argument matches tackle file's key \u00b6 When an input is supplied but it does not match any of the above criteria, by default tackle checks if there is a key in the parent directory and runs from that key. Logic is described in the next section. tackle a-tackle-file.yaml a-key # a-key is a key in the tackle file Additional Arguments / Keys / Flags \u00b6 The preceding section described how targets are handled but tackle can also take in arbitrary args, key value pairs, and flags which are interpreted. tackle target ARGs --KEYs VALUEs --FLAGs Extra Arguments \u00b6 Additional arguments are interpeted as the user doesn't want to run an entire tackle file but run a specific set of keys. So for instance given the following tackle file: File: key_a-> : print Key A key_b-> : print Key B Command: tackle file.yaml key_a Only key_a would be run. This is useful if you want to only run a subsection of a tackle file or jump straight to a command. Extra Key Values and Flags \u00b6 Additional key value pairs and flags are interpreted by command line calls as being overrides to the context. For instance given the following tackle file and call: File: key_a-> : input What to set `key_a`? key_b-> : print \"{{key_a}}\" Command: tackle file.yaml --key_a \"stuff and things\" Would result in no prompt and \"stuff and things\" printed to the user. Flags are the same as key value pairs but override with True. Additional Command Line Arguments \u00b6 print \u00b6 When the print flag is specified, the context after parsing is printed out to the screen which can then be piped to a file. tackle --print TARGET","title":"Command Line"},{"location":"command-line/#command-line","text":"Tackle-box is extremely flexible on the inputs that it accepts to run against. Basically any file, directory, or repo are acceptable inputs or no input at all. This document describes the logic behind how tackle takes in inputs including how additional args, kwargs, and flags are interpreted from the command line. Calling tackle from the command line and from within a tackle file with a tackle hook is the same except for how additional arguments are interpreted.","title":"Command Line"},{"location":"command-line/#targets","text":"Targets are the first argument in any tackle call. For instance: tackle TARGET arg1 arg2 --key value --flag","title":"Targets"},{"location":"command-line/#file","text":"Tackle can be called against any yaml file or json. Tackle runs the file as if it is in the current directory. tackle some/file/location.yaml","title":"File"},{"location":"command-line/#directory","text":"Tackle can be called against any directory and looks for a \"tackle file\", a file that matches tackle.yaml/yml/json or .tackle.yaml/yml/json and runs against that. tackle some/directory/location","title":"Directory"},{"location":"command-line/#repository","text":"Tackle can be called against any repository looking input which similar to a directory input, looks for a \"tackle file\" and runs against that. Repository sources can be abbreviated such that the following items are equivalent. https://github.com/robcxyz/tackle-provider github.com/robcxyz/tackle-provider robcxyz/tackle-provider tackle robcxyz/tackle-provider","title":"Repository"},{"location":"command-line/#zipfile","text":"Tackle can also run against a zip file. tackle path/to/some/zipfile.zip","title":"Zipfile"},{"location":"command-line/#no-argument-supplied","text":"When no input argument is supplied, tackle by default looks in the parent directories for the nearest tackle file and runs that. This is useful if you want to store a collection of calls at some location that you want to use from your present directory. tackle","title":"No argument supplied"},{"location":"command-line/#argument-matches-tackle-files-key","text":"When an input is supplied but it does not match any of the above criteria, by default tackle checks if there is a key in the parent directory and runs from that key. Logic is described in the next section. tackle a-tackle-file.yaml a-key # a-key is a key in the tackle file","title":"Argument matches tackle file's key"},{"location":"command-line/#additional-arguments-keys-flags","text":"The preceding section described how targets are handled but tackle can also take in arbitrary args, key value pairs, and flags which are interpreted. tackle target ARGs --KEYs VALUEs --FLAGs","title":"Additional Arguments / Keys / Flags"},{"location":"command-line/#extra-arguments","text":"Additional arguments are interpeted as the user doesn't want to run an entire tackle file but run a specific set of keys. So for instance given the following tackle file: File: key_a-> : print Key A key_b-> : print Key B Command: tackle file.yaml key_a Only key_a would be run. This is useful if you want to only run a subsection of a tackle file or jump straight to a command.","title":"Extra Arguments"},{"location":"command-line/#extra-key-values-and-flags","text":"Additional key value pairs and flags are interpreted by command line calls as being overrides to the context. For instance given the following tackle file and call: File: key_a-> : input What to set `key_a`? key_b-> : print \"{{key_a}}\" Command: tackle file.yaml --key_a \"stuff and things\" Would result in no prompt and \"stuff and things\" printed to the user. Flags are the same as key value pairs but override with True.","title":"Extra Key Values and Flags"},{"location":"command-line/#additional-command-line-arguments","text":"","title":"Additional Command Line Arguments"},{"location":"command-line/#print","text":"When the print flag is specified, the context after parsing is printed out to the screen which can then be piped to a file. tackle --print TARGET","title":"print"},{"location":"contributing/","text":"Contributing \u00b6 Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. Types of Contributions Contributor Setup Contributor Guidelines Contributor Testing Core Committer Guide Types of Contributions \u00b6 You can contribute in many ways: Create Tackle Providers \u00b6 Some providers to list in the README would be great. If you create a tackle provider, submit a pull request adding it to README.md. Report Bugs \u00b6 Report bugs at https://github.com/robcxyz/tackle-box/issues . If you are reporting a bug, please include: Your operating system name and version. Any details about your local setup that might be helpful in troubleshooting. If you can, provide detailed steps to reproduce the bug. If you don't have steps to reproduce the bug, just note your observations in as much detail as you can. Questions to start a discussion about the issue are welcome. Fix Bugs \u00b6 Look through the GitHub issues for bugs. Anything tagged with \"bug\" is open to whoever wants to implement it. Implement Features \u00b6 Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"please-help\" is open to whoever wants to implement it. Please do not combine multiple feature enhancements into a single pull request. Write Documentation \u00b6 Tackle-box could always use more documentation, whether as part of the official tackle-box docs, in docstrings, or even on the web in blog posts, articles, and such. If you want to review your changes on the documentation locally, you can do: pip install -r docs/requirements.txt mkdoc serve This will compile the documentation, open it in your browser and start watching the files for changes, recompiling as you save. Submit Feedback \u00b6 The best way to send feedback is to file an issue at https://github.com/robcxyz/tackle-box/issues . If you are proposing a feature: Explain in detail how it would work. Keep the scope as narrow as possible, to make it easier to implement. Remember that this is a volunteer-driven project, and that contributions are welcome :) Setting Up the Code for Local Development \u00b6 Here's how to set up tackle for local development. Fork the tackle-box repo on GitHub. Clone your fork locally: git clone git@github.com:your_name_here/tackle-box.git Install your local copy into a virtualenv. Assuming you have virtualenvwrapper installed, this is how you set up your fork for local development: cd tackle-box/ python3 -m venv env source env/bin/activate python setup.py develop Create a branch for local development: git checkout -b name-of-your-bugfix-or-feature Now you can make your changes locally. When you're done making changes, check that your changes pass the tests and lint check: pip install tox tox Please note that tox runs lint check automatically, since we have a test environment for it. If you feel like running only the lint environment, please use the following command: tox -e lint Ensure that your feature or commit is fully covered by tests. Check report after regular tox run. You can also run coverage only report and get html report with statement by statement highlighting: tox -e cov-report You report will be placed to htmlcov directory. Please do not include this directory to your commits. By default this directory in our .gitignore file. Commit your changes and push your branch to GitHub: git add . git commit -m \"Your detailed description of your changes.\" git push origin name-of-your-bugfix-or-feature Submit a pull request through the GitHub website. Contributor Guidelines \u00b6 Pull Request Guidelines \u00b6 Before you submit a pull request, check that it meets these guidelines: The pull request should include tests. If the pull request adds functionality, the docs should be updated. Put your new functionality into a function with a docstring, and add the feature to the list in README.md. The pull request must pass all CI/CD jobs before being ready for review. If one CI/CD job is failing for unrelated reasons you may want to create another PR to fix that first. Coding Standards \u00b6 PEP8 Functions over class methods Quotes via http://stackoverflow.com/a/56190/5549 Use double quotes around strings that are used for interpolation or that are natural language messages Use single quotes for small symbol-like strings (but break the rules if the strings contain quotes) Use triple double quotes for docstrings and raw string literals for regular expressions even if they aren't needed. Example: LIGHT_MESSAGES = { 'English' : \"There are %(number_of_lights)s lights.\" , 'Pirate' : \"Arr! Thar be %(number_of_lights)s lights.\" } def lights_message ( language , number_of_lights ): \"\"\"Return a language-appropriate string reporting the light count.\"\"\" return LIGHT_MESSAGES [ language ] % locals () def is_pirate ( message ): \"\"\"Return True if the given message sounds piratical.\"\"\" return re . search ( r \"(?i)(arr|avast|yohoho)!\" , message ) is not None Write new code in Python 3. Testing with tox \u00b6 Tox uses py.test under the hood, hence it supports the same syntax for selecting tests. For further information please consult the pytest usage docs . To run a particular test class with tox: tox -e py '-k TestFindHooks' To run some tests with names matching a string expression: tox -e py '-k generate' Will run all tests matching \"generate\", test_generate_files for example. To run just one method: tox -e py '-k \"TestFindHooks and test_find_hook\"' To run all tests using various versions of python in virtualenvs defined in tox.ini, just run tox: tox This configuration file setup the pytest-cov plugin and it is an additional dependency. It generate a coverage report after the tests. It is possible to tests with some versions of python, to do this the command is: tox -e py36,pypy3 Will run py.test with the python3.6 and pypy3 interpreters, for example. Core Committer Guide \u00b6 Vision and Scope \u00b6 Core committers, use this section to: Guide your instinct and decisions as a core committer Limit the codebase from growing infinitely Command-Line Accessible \u00b6 Provides a command-line utility that creates projects from tackle-boxes Extremely easy to use without having to think too hard Flexible for more complex use via optional arguments API Accessible \u00b6 Entirely function-based and stateless (Class-free by intentional design) Usable in pieces for developers of template generation tools Being Jinja2-specific \u00b6 Sets a standard baseline for project template creators, facilitating reuse Minimizes the learning curve for those who already use Flask or Django Minimizes scope of tackle-box codebase Extensible \u00b6 Being extendable by people with different ideas for Jinja2-based project template tools. Entirely function-based Aim for statelessness Lets anyone write more opinionated tools Freedom for tackle-box users to build and extend. No officially-maintained tackle-box providers, only ones by individuals Commercial project-friendly licensing, allowing for private tackle-box and private tackle-box-based tools Inclusive \u00b6 Cross-platform and cross-version support are more important than features/functionality Fixing Windows bugs even if it's a pain, to allow for use by more beginner coders Stable \u00b6 Aim for 100% test coverage and covering corner cases No pull requests will be accepted that drop test coverage on any platform, including Windows Conservative decisions patterned after CPython's conservative decisions with stability in mind Stable APIs that tool builders can rely on New features require a +1 from 3 core committers VCS-Hosted Templates \u00b6 Tackle-box providers are intentionally hosted VCS repos as-is. They are easily forkable It's easy for users to browse forks and files They are searchable via standard Github search interface Minimizes the need for packaging-related cruft files Easy to create a public project template and host it for free Easy to collaborate Process: Pull Requests \u00b6 If a pull request is untriaged: Look at the roadmap Set it for the milestone where it makes the most sense Add it to the roadmap How to prioritize pull requests, from most to least important: Fixes for broken tests. Broken means broken on any supported platform or Python version. Extra tests to cover corner cases. Minor edits to docs. Bug fixes. Major edits to docs. Features. Process: Issues \u00b6 If an issue is a bug that needs an urgent fix, mark it for the next patch release. Then either fix it or mark as please-help. For other issues: encourage friendly discussion, moderate debate, offer your thoughts. New features require a +1 from 2 other core committers (besides yourself). Process: Roadmap \u00b6 The roadmap located here Due dates are flexible. Core committers can change them as needed. Note that GitHub sort on them is buggy. How to number milestones: Follow semantic versioning. Look at: http://semver.org Milestone size: If a milestone contains too much, move some to the next milestone. Err on the side of more frequent patch releases. Process: Pull Request merging and HISTORY.md maintenance \u00b6 If you merge a pull request, you're responsible for updating AUTHORS.md and HISTORY.md When you're processing the first change after a release, create boilerplate following the existing pattern: ## x.y.z (Development) The goals of this release are TODO: release summary of features Features: * Feature description, thanks to [ @contributor ]( https://github.com/contributor ) (#PR). Bug Fixes: * Bug fix description, thanks to [ @contributor ]( https://github.com/contributor ) (#PR). Other changes: * Description of the change, thanks to [ @contributor ]( https://github.com/contributor ) (#PR). Process: Accepting Template Pull Requests \u00b6 Run the template to generate the project. Attempt to start/use the rendered project. Merge the template in. Update the history file. note: Adding a template doesn't give authors credit. Process: Your own code changes \u00b6 All code changes, regardless of who does them, need to be reviewed and merged by someone else. This rule applies to all the core committers. Exceptions: Minor corrections and fixes to pull requests submitted by others. While making a formal release, the release manager can make necessary, appropriate changes. Small documentation changes that reinforce existing subject matter. Most commonly being, but not limited to spelling and grammar corrections. Responsibilities \u00b6 Ensure cross-platform compatibility for every change that's accepted. Windows, Mac, Debian & Ubuntu Linux. Ensure that code that goes into core meets all requirements in this checklist: https://gist.github.com/audreyr/4feef90445b9680475f2 Create issues for any major changes and enhancements that you wish to make. Discuss things transparently and get community feedback. Don't add any classes to the codebase unless absolutely needed. Err on the side of using functions. Keep feature versions as small as possible, preferably one new feature per version. Be welcoming to newcomers and encourage diverse new contributors from all backgrounds. Look at Code of Conduct . Becoming a Core Committer \u00b6 Contributors may be given core commit privileges. Preference will be given to those with: Past contributions to cookiecutter or tackle-box and other open-source projects. Contributions to tackle-box include both code (both accepted and pending) and friendly participation in the issue tracker. Quantity and quality are considered. A coding style that the other core committers find simple, minimal, and clean. Access to resources for cross-platform development and testing. Time to devote to the project regularly.","title":"Contributing"},{"location":"contributing/#contributing","text":"Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. Types of Contributions Contributor Setup Contributor Guidelines Contributor Testing Core Committer Guide","title":"Contributing"},{"location":"contributing/#types-of-contributions","text":"You can contribute in many ways:","title":"Types of Contributions"},{"location":"contributing/#create-tackle-providers","text":"Some providers to list in the README would be great. If you create a tackle provider, submit a pull request adding it to README.md.","title":"Create Tackle Providers"},{"location":"contributing/#report-bugs","text":"Report bugs at https://github.com/robcxyz/tackle-box/issues . If you are reporting a bug, please include: Your operating system name and version. Any details about your local setup that might be helpful in troubleshooting. If you can, provide detailed steps to reproduce the bug. If you don't have steps to reproduce the bug, just note your observations in as much detail as you can. Questions to start a discussion about the issue are welcome.","title":"Report Bugs"},{"location":"contributing/#fix-bugs","text":"Look through the GitHub issues for bugs. Anything tagged with \"bug\" is open to whoever wants to implement it.","title":"Fix Bugs"},{"location":"contributing/#implement-features","text":"Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"please-help\" is open to whoever wants to implement it. Please do not combine multiple feature enhancements into a single pull request.","title":"Implement Features"},{"location":"contributing/#write-documentation","text":"Tackle-box could always use more documentation, whether as part of the official tackle-box docs, in docstrings, or even on the web in blog posts, articles, and such. If you want to review your changes on the documentation locally, you can do: pip install -r docs/requirements.txt mkdoc serve This will compile the documentation, open it in your browser and start watching the files for changes, recompiling as you save.","title":"Write Documentation"},{"location":"contributing/#submit-feedback","text":"The best way to send feedback is to file an issue at https://github.com/robcxyz/tackle-box/issues . If you are proposing a feature: Explain in detail how it would work. Keep the scope as narrow as possible, to make it easier to implement. Remember that this is a volunteer-driven project, and that contributions are welcome :)","title":"Submit Feedback"},{"location":"contributing/#setting-up-the-code-for-local-development","text":"Here's how to set up tackle for local development. Fork the tackle-box repo on GitHub. Clone your fork locally: git clone git@github.com:your_name_here/tackle-box.git Install your local copy into a virtualenv. Assuming you have virtualenvwrapper installed, this is how you set up your fork for local development: cd tackle-box/ python3 -m venv env source env/bin/activate python setup.py develop Create a branch for local development: git checkout -b name-of-your-bugfix-or-feature Now you can make your changes locally. When you're done making changes, check that your changes pass the tests and lint check: pip install tox tox Please note that tox runs lint check automatically, since we have a test environment for it. If you feel like running only the lint environment, please use the following command: tox -e lint Ensure that your feature or commit is fully covered by tests. Check report after regular tox run. You can also run coverage only report and get html report with statement by statement highlighting: tox -e cov-report You report will be placed to htmlcov directory. Please do not include this directory to your commits. By default this directory in our .gitignore file. Commit your changes and push your branch to GitHub: git add . git commit -m \"Your detailed description of your changes.\" git push origin name-of-your-bugfix-or-feature Submit a pull request through the GitHub website.","title":"Setting Up the Code for Local Development"},{"location":"contributing/#contributor-guidelines","text":"","title":"Contributor Guidelines"},{"location":"contributing/#pull-request-guidelines","text":"Before you submit a pull request, check that it meets these guidelines: The pull request should include tests. If the pull request adds functionality, the docs should be updated. Put your new functionality into a function with a docstring, and add the feature to the list in README.md. The pull request must pass all CI/CD jobs before being ready for review. If one CI/CD job is failing for unrelated reasons you may want to create another PR to fix that first.","title":"Pull Request Guidelines"},{"location":"contributing/#coding-standards","text":"PEP8 Functions over class methods Quotes via http://stackoverflow.com/a/56190/5549 Use double quotes around strings that are used for interpolation or that are natural language messages Use single quotes for small symbol-like strings (but break the rules if the strings contain quotes) Use triple double quotes for docstrings and raw string literals for regular expressions even if they aren't needed. Example: LIGHT_MESSAGES = { 'English' : \"There are %(number_of_lights)s lights.\" , 'Pirate' : \"Arr! Thar be %(number_of_lights)s lights.\" } def lights_message ( language , number_of_lights ): \"\"\"Return a language-appropriate string reporting the light count.\"\"\" return LIGHT_MESSAGES [ language ] % locals () def is_pirate ( message ): \"\"\"Return True if the given message sounds piratical.\"\"\" return re . search ( r \"(?i)(arr|avast|yohoho)!\" , message ) is not None Write new code in Python 3.","title":"Coding Standards"},{"location":"contributing/#testing-with-tox","text":"Tox uses py.test under the hood, hence it supports the same syntax for selecting tests. For further information please consult the pytest usage docs . To run a particular test class with tox: tox -e py '-k TestFindHooks' To run some tests with names matching a string expression: tox -e py '-k generate' Will run all tests matching \"generate\", test_generate_files for example. To run just one method: tox -e py '-k \"TestFindHooks and test_find_hook\"' To run all tests using various versions of python in virtualenvs defined in tox.ini, just run tox: tox This configuration file setup the pytest-cov plugin and it is an additional dependency. It generate a coverage report after the tests. It is possible to tests with some versions of python, to do this the command is: tox -e py36,pypy3 Will run py.test with the python3.6 and pypy3 interpreters, for example.","title":"Testing with tox"},{"location":"contributing/#core-committer-guide","text":"","title":"Core Committer Guide"},{"location":"contributing/#vision-and-scope","text":"Core committers, use this section to: Guide your instinct and decisions as a core committer Limit the codebase from growing infinitely","title":"Vision and Scope"},{"location":"contributing/#command-line-accessible","text":"Provides a command-line utility that creates projects from tackle-boxes Extremely easy to use without having to think too hard Flexible for more complex use via optional arguments","title":"Command-Line Accessible"},{"location":"contributing/#api-accessible","text":"Entirely function-based and stateless (Class-free by intentional design) Usable in pieces for developers of template generation tools","title":"API Accessible"},{"location":"contributing/#being-jinja2-specific","text":"Sets a standard baseline for project template creators, facilitating reuse Minimizes the learning curve for those who already use Flask or Django Minimizes scope of tackle-box codebase","title":"Being Jinja2-specific"},{"location":"contributing/#extensible","text":"Being extendable by people with different ideas for Jinja2-based project template tools. Entirely function-based Aim for statelessness Lets anyone write more opinionated tools Freedom for tackle-box users to build and extend. No officially-maintained tackle-box providers, only ones by individuals Commercial project-friendly licensing, allowing for private tackle-box and private tackle-box-based tools","title":"Extensible"},{"location":"contributing/#inclusive","text":"Cross-platform and cross-version support are more important than features/functionality Fixing Windows bugs even if it's a pain, to allow for use by more beginner coders","title":"Inclusive"},{"location":"contributing/#stable","text":"Aim for 100% test coverage and covering corner cases No pull requests will be accepted that drop test coverage on any platform, including Windows Conservative decisions patterned after CPython's conservative decisions with stability in mind Stable APIs that tool builders can rely on New features require a +1 from 3 core committers","title":"Stable"},{"location":"contributing/#vcs-hosted-templates","text":"Tackle-box providers are intentionally hosted VCS repos as-is. They are easily forkable It's easy for users to browse forks and files They are searchable via standard Github search interface Minimizes the need for packaging-related cruft files Easy to create a public project template and host it for free Easy to collaborate","title":"VCS-Hosted Templates"},{"location":"contributing/#process-pull-requests","text":"If a pull request is untriaged: Look at the roadmap Set it for the milestone where it makes the most sense Add it to the roadmap How to prioritize pull requests, from most to least important: Fixes for broken tests. Broken means broken on any supported platform or Python version. Extra tests to cover corner cases. Minor edits to docs. Bug fixes. Major edits to docs. Features.","title":"Process: Pull Requests"},{"location":"contributing/#process-issues","text":"If an issue is a bug that needs an urgent fix, mark it for the next patch release. Then either fix it or mark as please-help. For other issues: encourage friendly discussion, moderate debate, offer your thoughts. New features require a +1 from 2 other core committers (besides yourself).","title":"Process: Issues"},{"location":"contributing/#process-roadmap","text":"The roadmap located here Due dates are flexible. Core committers can change them as needed. Note that GitHub sort on them is buggy. How to number milestones: Follow semantic versioning. Look at: http://semver.org Milestone size: If a milestone contains too much, move some to the next milestone. Err on the side of more frequent patch releases.","title":"Process: Roadmap"},{"location":"contributing/#process-pull-request-merging-and-historymd-maintenance","text":"If you merge a pull request, you're responsible for updating AUTHORS.md and HISTORY.md When you're processing the first change after a release, create boilerplate following the existing pattern: ## x.y.z (Development) The goals of this release are TODO: release summary of features Features: * Feature description, thanks to [ @contributor ]( https://github.com/contributor ) (#PR). Bug Fixes: * Bug fix description, thanks to [ @contributor ]( https://github.com/contributor ) (#PR). Other changes: * Description of the change, thanks to [ @contributor ]( https://github.com/contributor ) (#PR).","title":"Process: Pull Request merging and HISTORY.md maintenance"},{"location":"contributing/#process-accepting-template-pull-requests","text":"Run the template to generate the project. Attempt to start/use the rendered project. Merge the template in. Update the history file. note: Adding a template doesn't give authors credit.","title":"Process: Accepting Template Pull Requests"},{"location":"contributing/#process-your-own-code-changes","text":"All code changes, regardless of who does them, need to be reviewed and merged by someone else. This rule applies to all the core committers. Exceptions: Minor corrections and fixes to pull requests submitted by others. While making a formal release, the release manager can make necessary, appropriate changes. Small documentation changes that reinforce existing subject matter. Most commonly being, but not limited to spelling and grammar corrections.","title":"Process: Your own code changes"},{"location":"contributing/#responsibilities","text":"Ensure cross-platform compatibility for every change that's accepted. Windows, Mac, Debian & Ubuntu Linux. Ensure that code that goes into core meets all requirements in this checklist: https://gist.github.com/audreyr/4feef90445b9680475f2 Create issues for any major changes and enhancements that you wish to make. Discuss things transparently and get community feedback. Don't add any classes to the codebase unless absolutely needed. Err on the side of using functions. Keep feature versions as small as possible, preferably one new feature per version. Be welcoming to newcomers and encourage diverse new contributors from all backgrounds. Look at Code of Conduct .","title":"Responsibilities"},{"location":"contributing/#becoming-a-core-committer","text":"Contributors may be given core commit privileges. Preference will be given to those with: Past contributions to cookiecutter or tackle-box and other open-source projects. Contributions to tackle-box include both code (both accepted and pending) and friendly participation in the issue tracker. Quantity and quality are considered. A coding style that the other core committers find simple, minimal, and clean. Access to resources for cross-platform development and testing. Time to devote to the project regularly.","title":"Becoming a Core Committer"},{"location":"creating-providers/","text":"Providers \u00b6 This document covers all aspects of creating providers including the semantics of the file structure and dependencies. For writing hooks which are contained within providers, check out the writing hooks document. As a recap, providers are collections of hooks and / or tackle files that call additional hooks. They can be stored remotely in a git repository and then ran / imported from tackle files or called directly from the command line . For more information about tackle box's structure, check out the project structure docs. Quick Start \u00b6 Since tackle box is a code generator, it makes sense for it to be able to generate the boilerplate to create providers. The quickest way to do that is with the tackle-provider provider which can be run as: tackle robcxyz/tackle-provider The provider will then go through a number of configuration options such as: What type of license (ie Apache vs MIT vs closed source) Types of tests (unittest vs pytest) Intention of the provider (code generator vs utility) Using this provider one can create a functional provider in minutes that when pushed to github can be called with tackle <your org>/<your repo> . Components \u00b6 Requirements \u00b6 Tackle providers can have their own python requirements.txt allowing python packages to be used within hooks. Requirements can be installed in two ways, by default on import or lazily if one of the hook's is called. To install dependencies by default, simply include the requirements.txt at the base of the provider and they will be installed on any import error (ie missing some dependency within the hook). To have dependencies - [] TODO","title":"Creating Providers"},{"location":"creating-providers/#providers","text":"This document covers all aspects of creating providers including the semantics of the file structure and dependencies. For writing hooks which are contained within providers, check out the writing hooks document. As a recap, providers are collections of hooks and / or tackle files that call additional hooks. They can be stored remotely in a git repository and then ran / imported from tackle files or called directly from the command line . For more information about tackle box's structure, check out the project structure docs.","title":"Providers"},{"location":"creating-providers/#quick-start","text":"Since tackle box is a code generator, it makes sense for it to be able to generate the boilerplate to create providers. The quickest way to do that is with the tackle-provider provider which can be run as: tackle robcxyz/tackle-provider The provider will then go through a number of configuration options such as: What type of license (ie Apache vs MIT vs closed source) Types of tests (unittest vs pytest) Intention of the provider (code generator vs utility) Using this provider one can create a functional provider in minutes that when pushed to github can be called with tackle <your org>/<your repo> .","title":"Quick Start"},{"location":"creating-providers/#components","text":"","title":"Components"},{"location":"creating-providers/#requirements","text":"Tackle providers can have their own python requirements.txt allowing python packages to be used within hooks. Requirements can be installed in two ways, by default on import or lazily if one of the hook's is called. To install dependencies by default, simply include the requirements.txt at the base of the provider and they will be installed on any import error (ie missing some dependency within the hook). To have dependencies - [] TODO","title":"Requirements"},{"location":"debugging-tackle/","text":"Debugging \u00b6 Currently tackle has no way of debugging like a traditional language would by setting breakpoints within tackle files. Hopefully this will change in the future but until that happens, rudimentary debugging can be done by inserting debug hooks into tackle-files to see what the parser can see at a given point in a document. For instance: stuff : things public-> : var stuff private_> : var stuff d-> : debug Would show: Public Context {'public': 'things', 'stuff': 'things'} Private Context {'private': 'things'} ? CONTINUE (Y/n) Allowing users to debug tackle files by showing what is in each memory space.","title":"Debugging"},{"location":"debugging-tackle/#debugging","text":"Currently tackle has no way of debugging like a traditional language would by setting breakpoints within tackle files. Hopefully this will change in the future but until that happens, rudimentary debugging can be done by inserting debug hooks into tackle-files to see what the parser can see at a given point in a document. For instance: stuff : things public-> : var stuff private_> : var stuff d-> : debug Would show: Public Context {'public': 'things', 'stuff': 'things'} Private Context {'private': 'things'} ? CONTINUE (Y/n) Allowing users to debug tackle files by showing what is in each memory space.","title":"Debugging"},{"location":"declarative-hooks/","text":"Declarative Hooks \u00b6 TODO - This is a new topic and is still a WIP - What are declarative hooks - The exec method and return - Creating fields with types and arguments - Multiple inheritance - WIP - Methods - WIP - OpenAPI - WIP Declarative hooks are very similar to python hooks in that they offer a way interface with business logic from within a tackle file but instead of being written in python, they are written within tackle files themselves. They are useful when you want to create reusable logic, interface with schemas, or create CLI's with rich option sets out of tackle files. They have strongly typed input parameters and can have object-oriented properties such as inheritance and methods that can be passed between hooks. Basic Usage \u00b6 Declarative hooks are keys that end with an arrow to the left, <- for public hooks / <_ for private hooks (more on this later), which is the same as hook calls but in the opposite direction. For instance the following shows both a declarative hook and a call of that hook. declarative_hook<- : input : str hook_call : -> : declarative_hook input : stuff Declarative hooks have no required fields as in the example above the hook is simply used to validate the input and by default will simply return the input parameters. exec method \u00b6 If you want the hook to actually do something, the hook will need to have an exec method similar to how a python hooks have the same. As a simple example, here we are creating a hook greeter that prints Hello world! : greeter<- : exec : target : world hi_> : print Hello {{target}}! call-> : greeter By default, declarative hooks return the entire context from the exec method so in the example above, the output would be: call : target : world This is because the key hi_> is a private hook call (see memory management for more info) and only the public context is returned. return key \u00b6 If you want to only return a part of the exec call, the return key is available for this. For instance given the following example: greeter<- : exec : target : world hi-> : print Hello {{target}}! return : target call-> : greeter The output would now be: call : world As the return key dereferences the target from the exec method. TODO: Future versions will allow more flexible return inputs Input fields \u00b6 In each of the previous examples, the input type for the target field was infered by the default value but it is possible to make the input fields strongly typed just like python hooks . This can be done in two different ways, by giving the type as a string or as a map with named fields the same as pydantic's Field function. When the types are given as literals, they are also by default required. For instance the following hook would require each of the inputs with their corresponding type. some_hook<- : a_str : str a_bool : bool a_int : int a_float : float a_list : list a_dict : dict call : -> : some_hook a_str : foo a_bool : true a_int : 1 a_float : 1.2 a_list : [ 'stuff' , 'things' ] a_dict : { 'stuff' : 'things' } Additionally, hook fields can be declared with key value pairs corresponding to pydantic's Field inputs. For instance the following would be able to validate the type of an input field of type string: some_hook<- : input : type : str default : foo regex : ^foo.* pass-> : some_hook --input foo-bar fail-> : some_hook --input bar The type field does not need to be populated if given a default and the same type can be inferred. some_hook<- : input : default : - stuff - things call : -> : some_hook --input foo --try except : p-> : print Wrong type!! Advanced Topics \u00b6 Methods \u00b6 WIP / TODO Inheritance \u00b6 WIP / TODO Schema Support \u00b6 WIP / TODO","title":"Declarative Hooks"},{"location":"declarative-hooks/#declarative-hooks","text":"TODO - This is a new topic and is still a WIP - What are declarative hooks - The exec method and return - Creating fields with types and arguments - Multiple inheritance - WIP - Methods - WIP - OpenAPI - WIP Declarative hooks are very similar to python hooks in that they offer a way interface with business logic from within a tackle file but instead of being written in python, they are written within tackle files themselves. They are useful when you want to create reusable logic, interface with schemas, or create CLI's with rich option sets out of tackle files. They have strongly typed input parameters and can have object-oriented properties such as inheritance and methods that can be passed between hooks.","title":"Declarative Hooks"},{"location":"declarative-hooks/#basic-usage","text":"Declarative hooks are keys that end with an arrow to the left, <- for public hooks / <_ for private hooks (more on this later), which is the same as hook calls but in the opposite direction. For instance the following shows both a declarative hook and a call of that hook. declarative_hook<- : input : str hook_call : -> : declarative_hook input : stuff Declarative hooks have no required fields as in the example above the hook is simply used to validate the input and by default will simply return the input parameters.","title":"Basic Usage"},{"location":"declarative-hooks/#exec-method","text":"If you want the hook to actually do something, the hook will need to have an exec method similar to how a python hooks have the same. As a simple example, here we are creating a hook greeter that prints Hello world! : greeter<- : exec : target : world hi_> : print Hello {{target}}! call-> : greeter By default, declarative hooks return the entire context from the exec method so in the example above, the output would be: call : target : world This is because the key hi_> is a private hook call (see memory management for more info) and only the public context is returned.","title":"exec method"},{"location":"declarative-hooks/#return-key","text":"If you want to only return a part of the exec call, the return key is available for this. For instance given the following example: greeter<- : exec : target : world hi-> : print Hello {{target}}! return : target call-> : greeter The output would now be: call : world As the return key dereferences the target from the exec method. TODO: Future versions will allow more flexible return inputs","title":"return key"},{"location":"declarative-hooks/#input-fields","text":"In each of the previous examples, the input type for the target field was infered by the default value but it is possible to make the input fields strongly typed just like python hooks . This can be done in two different ways, by giving the type as a string or as a map with named fields the same as pydantic's Field function. When the types are given as literals, they are also by default required. For instance the following hook would require each of the inputs with their corresponding type. some_hook<- : a_str : str a_bool : bool a_int : int a_float : float a_list : list a_dict : dict call : -> : some_hook a_str : foo a_bool : true a_int : 1 a_float : 1.2 a_list : [ 'stuff' , 'things' ] a_dict : { 'stuff' : 'things' } Additionally, hook fields can be declared with key value pairs corresponding to pydantic's Field inputs. For instance the following would be able to validate the type of an input field of type string: some_hook<- : input : type : str default : foo regex : ^foo.* pass-> : some_hook --input foo-bar fail-> : some_hook --input bar The type field does not need to be populated if given a default and the same type can be inferred. some_hook<- : input : default : - stuff - things call : -> : some_hook --input foo --try except : p-> : print Wrong type!!","title":"Input fields"},{"location":"declarative-hooks/#advanced-topics","text":"","title":"Advanced Topics"},{"location":"declarative-hooks/#methods","text":"WIP / TODO","title":"Methods"},{"location":"declarative-hooks/#inheritance","text":"WIP / TODO","title":"Inheritance"},{"location":"declarative-hooks/#schema-support","text":"WIP / TODO","title":"Schema Support"},{"location":"demos/","text":"Demos \u00b6 In this section we will go over a number of demos of Tackle Box along with the main takeaways. To walk through all the demos, run: tackle robcxyz/tackle-demo","title":"Demos"},{"location":"demos/#demos","text":"In this section we will go over a number of demos of Tackle Box along with the main takeaways. To walk through all the demos, run: tackle robcxyz/tackle-demo","title":"Demos"},{"location":"development-roadmap/","text":"Development Roadmap \u00b6 Tackle-box is still a work in progress with the following new features planned. Functions Help on Providers and Files IDE Autocomplete Providers allowing import of jinja extensions Functions \u00b6 Hooks are supposed to be written in an imperative language (ie python) though it would be good to have a declarative form of being able to call groups of hooks which could be called functions. Functions would have the same properties of hooks in that they will have arguments and parameters with types and defaults along with an exec method which is then run when the function is called. Functions will be extracted from the tackle file from keys with an arrow in the opposite direction of a hook (ie <- for public / <_ for private) before it is parsed and then made available during the main parsing sequential run. Functions would be importable within providers so that providers can share reusable groups of logic. For instance this could be an example of a function: function_example<- : args : - name : param1 - name : param2 kwargs : param1 : type : str param2 : type : list default : [] param3 : type : bool default : false exec : call1-> : another_hook param1 param2 call2-> : another_hook call1 param3 return : call2 Which could then be called like: a_list : - stuff - things called from a hook-> : function_example foo \"{{ a_list }}\" called within a hook : -> : some_hook param : $function_example foo \"{{ a_list }}\" Functions can then refer to other functions to also create nested logic. Functions will also support inheritance patterns to be able to extend a schema in or implement another function's methods. Ultimately these functions should have some object-oriented properties with the ability to use schemas such as OpenAPI to form the basis of extending functions with methods. Still working out the nomenclature for all of this so please raise issues if you have a suggestion around how to formalize these ideas. Help on Providers and Files \u00b6 No CLI is complete without some kind of help screen that describes the actions that can be taken. Early thinking was that these help dialogues could be triggered by running a reserved parameter help when calling tackle. For instance running tackle robcxyz/tackle-provider help should display what the provider is able to do. These help items could be: Keys calling hooks with a help kwarg Public functions The format should be similar to other help screens (ie calling tackle --help ) and make the tool more of a declarative CLI. If this happens, a reserved key could exist that would be the default action when calling the provider. For instance calling tackle robcxyz/tackle-provider help with this in the context: -> : help : This would be the providers general help section Could further enrich a help screen with general provider information. Since the default behavior when running the hook is just to parse the whole file, wouldn't make sense to have this hook do anything more unless that is advantageous. Need users input to make that call. IDE Autocomplete \u00b6 Need to extract the json schema from each hook and upload that to schemastore.org/json/ with appropriate catalog.json file. Providers allowing import of jinja extensions \u00b6 Providers give a good import abstraction so it would be cool to be able to allow dynamically importing of various jinja extensions as well.","title":"Development Roadmap"},{"location":"development-roadmap/#development-roadmap","text":"Tackle-box is still a work in progress with the following new features planned. Functions Help on Providers and Files IDE Autocomplete Providers allowing import of jinja extensions","title":"Development Roadmap"},{"location":"development-roadmap/#functions","text":"Hooks are supposed to be written in an imperative language (ie python) though it would be good to have a declarative form of being able to call groups of hooks which could be called functions. Functions would have the same properties of hooks in that they will have arguments and parameters with types and defaults along with an exec method which is then run when the function is called. Functions will be extracted from the tackle file from keys with an arrow in the opposite direction of a hook (ie <- for public / <_ for private) before it is parsed and then made available during the main parsing sequential run. Functions would be importable within providers so that providers can share reusable groups of logic. For instance this could be an example of a function: function_example<- : args : - name : param1 - name : param2 kwargs : param1 : type : str param2 : type : list default : [] param3 : type : bool default : false exec : call1-> : another_hook param1 param2 call2-> : another_hook call1 param3 return : call2 Which could then be called like: a_list : - stuff - things called from a hook-> : function_example foo \"{{ a_list }}\" called within a hook : -> : some_hook param : $function_example foo \"{{ a_list }}\" Functions can then refer to other functions to also create nested logic. Functions will also support inheritance patterns to be able to extend a schema in or implement another function's methods. Ultimately these functions should have some object-oriented properties with the ability to use schemas such as OpenAPI to form the basis of extending functions with methods. Still working out the nomenclature for all of this so please raise issues if you have a suggestion around how to formalize these ideas.","title":"Functions"},{"location":"development-roadmap/#help-on-providers-and-files","text":"No CLI is complete without some kind of help screen that describes the actions that can be taken. Early thinking was that these help dialogues could be triggered by running a reserved parameter help when calling tackle. For instance running tackle robcxyz/tackle-provider help should display what the provider is able to do. These help items could be: Keys calling hooks with a help kwarg Public functions The format should be similar to other help screens (ie calling tackle --help ) and make the tool more of a declarative CLI. If this happens, a reserved key could exist that would be the default action when calling the provider. For instance calling tackle robcxyz/tackle-provider help with this in the context: -> : help : This would be the providers general help section Could further enrich a help screen with general provider information. Since the default behavior when running the hook is just to parse the whole file, wouldn't make sense to have this hook do anything more unless that is advantageous. Need users input to make that call.","title":"Help on Providers and Files"},{"location":"development-roadmap/#ide-autocomplete","text":"Need to extract the json schema from each hook and upload that to schemastore.org/json/ with appropriate catalog.json file.","title":"IDE Autocomplete"},{"location":"development-roadmap/#providers-allowing-import-of-jinja-extensions","text":"Providers give a good import abstraction so it would be cool to be able to allow dynamically importing of various jinja extensions as well.","title":"Providers allowing import of jinja extensions"},{"location":"hook-methods/","text":"Hook Base Methods \u00b6 Every hook has a number of base methods that are implemented alongside the declaration of the hook. This document outlines each of these methods with an example of their use. Loops for / reverse Conditionals if / when / else Methods chdir merge try / except defer - Coming soon Loops \u00b6 Hooks can be called in a loop based on specifying a list input in a for key and will return a list. Within the loop, the iterand is stored in a temporary variable item along with it's indexed position in a variable called index . For instance running: printer : -> : print \"We are at item {{ item }} and index {{ index }}\" for : - stuff - things Would result in: printer : - We are at item stuff and index 0 - We are at item things and index 1 The for key must be a list so if the input is a string, it is rendered by default like in this example which does the same as above: a_list : - stuff - things printer : -> : print \"We are at item {{ item }} and index {{ index }}\" for : a_list Loop iterands can be of any type as in this example: printer : -> : print \"The type is {{ item.type }} for : - name : foo type : stuff - name : bar type : things Additionally, jinja hooks can be used to do some logic that could help with some patterns. For instance the keys hook can be used to create a list of keys from a map which can be used as an iterand. inputs : foo : type : stuff bar : type : things printer : -> : print \"The type is {{ inputs[item].type }} for : \"{{keys(inputs)}}\" reverse \u00b6 To loop through a list in reverse, simply set a reverse key to true as in this example: printer : -> : print \"We are at item {{ item }} and index {{ index }}\" for : - stuff - things reverse : true Would result in: printer : - We are at item things and index 1 - We are at item stuff and index 0 Conditionals \u00b6 if \u00b6 Hooks can be conditionally called with an if key that needs to resolve to some kind of boolean. It is typically based on some kind of jinja expression. For instance: planet-> : select What planet you on? --choices ['earth','mars'] weather : -> : print {{ planet | title }} weather is nice! if : planet == 'earth' Here we can see the if key that by default is wrapped with jinja braces and is evaluated as true or false depending on the value entered into the planet key. Full jinja syntax is supported so other assertions such as whether an item is in a list (ie if: 'a key' in a_list ) is supported. The if key is evaluated after a for loops are entered allowing list comprehensions to be done. For instance this example would only print \"Hello world!\". words : - Hello - cruel - world! expanded : -> : print {{item}} for : words if : item != 'cruel' compact-> : print {{item}} --for words --if \"item != 'cruel'\" when \u00b6 For imposing conditionality before a loop, the when method exists. For instance in this example the when is evaluated first, the loop is entered, and then the if condition is imposed to do a list comprehension. words : [ 'Hello' , 'cruel' , 'world!' ] expanded : -> : print {{item}} for : words when : \"'Hello' in words\" if : item != 'cruel' else \u00b6 If you want to return a different value when the if or when condition resolves to false, use the else key with the value you wish to return otherwise. For instance: name-> : input What is your name? hello : -> : print Hello {{ name }}! if : name != 'Rob' else : Hello me Which can also be rendered. intro : Hello ... else : {{ intro }} me And could have hooks embedded in it. hello : ... else : print('Hello me') Or simply could be a dictionary output with further hooks. hello : ... else : stuff : things-> : print foo Currently only jinja hooks are supported as string values. Future could add support for else->/else_> compact hook calls. Checkout the match hook if needing to do a lot of conditionals which can satisfy regexes when catching cases. Methods \u00b6 chdir \u00b6 Sometimes it is desirable to run the hook in another directory. For this there is the chdir key where the hook is called in the context of the directory being specified. For instance one could run the listdir hook in another directory: contents : -> : listdir chdir : path/to/some/dir merge \u00b6 If the output of the hook call is a map, then one can merge that map into the parent keys. For instance given this block hook : stuff : things to merge-> : merge : true stuff : more things Would result in: stuff : more things Future work will support merging operations for lists as interpreted as an append operation try / except \u00b6 To catch errors, use the try method which also can run a context in the case of failure in an except method. For instance in both these example the print would execute. a failed command-> : command \"exit 1\" --try p-> : print Hello world! a failed command : -> : command \"exit 1\" try : true except : p-> : print Hello world! defer - Coming soon \u00b6 Future versions of tackle fill have a defer functionality similar to Go where one can declare deferred actions that will run if there is a script error or when a tackle file / execution is finished. Details still being worked out .","title":"Hook Methods"},{"location":"hook-methods/#hook-base-methods","text":"Every hook has a number of base methods that are implemented alongside the declaration of the hook. This document outlines each of these methods with an example of their use. Loops for / reverse Conditionals if / when / else Methods chdir merge try / except defer - Coming soon","title":"Hook Base Methods"},{"location":"hook-methods/#loops","text":"Hooks can be called in a loop based on specifying a list input in a for key and will return a list. Within the loop, the iterand is stored in a temporary variable item along with it's indexed position in a variable called index . For instance running: printer : -> : print \"We are at item {{ item }} and index {{ index }}\" for : - stuff - things Would result in: printer : - We are at item stuff and index 0 - We are at item things and index 1 The for key must be a list so if the input is a string, it is rendered by default like in this example which does the same as above: a_list : - stuff - things printer : -> : print \"We are at item {{ item }} and index {{ index }}\" for : a_list Loop iterands can be of any type as in this example: printer : -> : print \"The type is {{ item.type }} for : - name : foo type : stuff - name : bar type : things Additionally, jinja hooks can be used to do some logic that could help with some patterns. For instance the keys hook can be used to create a list of keys from a map which can be used as an iterand. inputs : foo : type : stuff bar : type : things printer : -> : print \"The type is {{ inputs[item].type }} for : \"{{keys(inputs)}}\"","title":"Loops"},{"location":"hook-methods/#reverse","text":"To loop through a list in reverse, simply set a reverse key to true as in this example: printer : -> : print \"We are at item {{ item }} and index {{ index }}\" for : - stuff - things reverse : true Would result in: printer : - We are at item things and index 1 - We are at item stuff and index 0","title":"reverse"},{"location":"hook-methods/#conditionals","text":"","title":"Conditionals"},{"location":"hook-methods/#if","text":"Hooks can be conditionally called with an if key that needs to resolve to some kind of boolean. It is typically based on some kind of jinja expression. For instance: planet-> : select What planet you on? --choices ['earth','mars'] weather : -> : print {{ planet | title }} weather is nice! if : planet == 'earth' Here we can see the if key that by default is wrapped with jinja braces and is evaluated as true or false depending on the value entered into the planet key. Full jinja syntax is supported so other assertions such as whether an item is in a list (ie if: 'a key' in a_list ) is supported. The if key is evaluated after a for loops are entered allowing list comprehensions to be done. For instance this example would only print \"Hello world!\". words : - Hello - cruel - world! expanded : -> : print {{item}} for : words if : item != 'cruel' compact-> : print {{item}} --for words --if \"item != 'cruel'\"","title":"if"},{"location":"hook-methods/#when","text":"For imposing conditionality before a loop, the when method exists. For instance in this example the when is evaluated first, the loop is entered, and then the if condition is imposed to do a list comprehension. words : [ 'Hello' , 'cruel' , 'world!' ] expanded : -> : print {{item}} for : words when : \"'Hello' in words\" if : item != 'cruel'","title":"when"},{"location":"hook-methods/#else","text":"If you want to return a different value when the if or when condition resolves to false, use the else key with the value you wish to return otherwise. For instance: name-> : input What is your name? hello : -> : print Hello {{ name }}! if : name != 'Rob' else : Hello me Which can also be rendered. intro : Hello ... else : {{ intro }} me And could have hooks embedded in it. hello : ... else : print('Hello me') Or simply could be a dictionary output with further hooks. hello : ... else : stuff : things-> : print foo Currently only jinja hooks are supported as string values. Future could add support for else->/else_> compact hook calls. Checkout the match hook if needing to do a lot of conditionals which can satisfy regexes when catching cases.","title":"else"},{"location":"hook-methods/#methods","text":"","title":"Methods"},{"location":"hook-methods/#chdir","text":"Sometimes it is desirable to run the hook in another directory. For this there is the chdir key where the hook is called in the context of the directory being specified. For instance one could run the listdir hook in another directory: contents : -> : listdir chdir : path/to/some/dir","title":"chdir"},{"location":"hook-methods/#merge","text":"If the output of the hook call is a map, then one can merge that map into the parent keys. For instance given this block hook : stuff : things to merge-> : merge : true stuff : more things Would result in: stuff : more things Future work will support merging operations for lists as interpreted as an append operation","title":"merge"},{"location":"hook-methods/#try-except","text":"To catch errors, use the try method which also can run a context in the case of failure in an except method. For instance in both these example the print would execute. a failed command-> : command \"exit 1\" --try p-> : print Hello world! a failed command : -> : command \"exit 1\" try : true except : p-> : print Hello world!","title":"try / except"},{"location":"hook-methods/#defer-coming-soon","text":"Future versions of tackle fill have a defer functionality similar to Go where one can declare deferred actions that will run if there is a script error or when a tackle file / execution is finished. Details still being worked out .","title":"defer - Coming soon"},{"location":"installation/","text":"Installation \u00b6 Tackle-box aims to be cross-platform (linux, windows, mac) and can be installed via python's package manager, pip. pip install tackle-box Binary versions coming soon Windows users: Tackle-box strives to be fully functional on windows but has some incompatibilities . Accepting PRs. Tackle-box has the capability to install additional package dependencies from hooks. If you wish to keep your system python interpreter clean of packages, you should use a virtual environment. python3 -m venv env source env/bin/activate pip install tackle-box Alternatively, to build from source: git clone https://github.com/robcxyz/tackle-box cd tackle-box python3 -m venv env source env/bin/activate python setup.py install","title":"Installation"},{"location":"installation/#installation","text":"Tackle-box aims to be cross-platform (linux, windows, mac) and can be installed via python's package manager, pip. pip install tackle-box Binary versions coming soon Windows users: Tackle-box strives to be fully functional on windows but has some incompatibilities . Accepting PRs. Tackle-box has the capability to install additional package dependencies from hooks. If you wish to keep your system python interpreter clean of packages, you should use a virtual environment. python3 -m venv env source env/bin/activate pip install tackle-box Alternatively, to build from source: git clone https://github.com/robcxyz/tackle-box cd tackle-box python3 -m venv env source env/bin/activate python setup.py install","title":"Installation"},{"location":"jinja/","text":"Jinja \u00b6 At the core of all tackle logic is the jinja templating language which enables the majority of the features in the syntax. Variable \u00b6 By default, all fields in tackle hooks are rendered if they have curly braces. For instance given the following hook call, the output would print stuff then things : stuff : things string-> : print stuff jinja-> : print {{stuff}} For Loops \u00b6 When running within a for loop, tackle automatically keeps track of the iterand and integer index of the loop. For instance the following would print out stuff 0 and things 1 : printer : -> : print {{item}} {{index}} for : - stuff - things Rendering By Default \u00b6 Not all fields need to be wrapped with jinja though including several base methods and hook fields. For instance the if and for methods are automatically interpreted as jinja expressions and do not need to be wrapped with braces. This is because writing an if statement makes little sense unless it is dynamic which jinja is needed for. Along the same thread, inputs of type string for for loops implicitly mean they need to be rendered. For instance the following would print out stuff and things . a_list : - stuff - things printer : -> : print {{item}} if : \"'stuff' in a_list\" for : a_list Note the additional quotes in the if statement which is a yaml parsing nuance of ruamel, the parsing package used by tackle. Hook fields additionally can be marked as being rendered by default in both python and declarative hooks . For instance with the var hook , a python hook used to render variables, the input is rendered by default so the following would work: stuff : things call-> : var stuff check-> : assert \"{{call}}\" things This field can additionally be added to declarative hooks like so: some_hook<- : input : default : foo render_by_default : true stuff : things call-> : some_hook --input stuff check-> : assert \"{{call.input}}\" things Jinja Expressions \u00b6 Jinja offers a rich expression syntax that is similar to python's and allows checking whether items are equal, items are in a list / map, and other things outside the scope of these docs that you can find in jinja's excellent documentation . For instance to conditionally run a key based on a user input: user_input-> : select Input what? --choices ['stuff','things'] run_stuff-> : print Stuff --if user_input=='stuff' run_things : -> : print Things if : user_input == 'things' Or one could check if an item is in a list: Note: checkbox hook is a multi-select prompt that returns a list user_input-> : checkbox Input what? --choices ['stuff','things'] --checked run_stuff-> : print Stuff --if \"'stuff' in user_input\" run_things : -> : print Things if : \"'stuff' in user_input\" Notice in this example the exra quoting which is an artifact of yaml parsing and need to be encapsulated for the parser. Jinja Filters \u00b6 Jinja natively has numerous builtin functions that allow a wide variety of actions similar to tackle but with less options. To see the full list, check out jinja's documentation . List Comprehensions \u00b6 While tackle supports list comprehensions , jinja conveniently does as well and can be done in a single line. input_list : - stuff - and - things reject_list : - and list_comprehension-> : \"{{ input_list | reject('in', reject_list) | list }}\" Here, reject and list are builtin jinja filters, not tackle hooks.","title":"Jinja Templating"},{"location":"jinja/#jinja","text":"At the core of all tackle logic is the jinja templating language which enables the majority of the features in the syntax.","title":"Jinja"},{"location":"jinja/#variable","text":"By default, all fields in tackle hooks are rendered if they have curly braces. For instance given the following hook call, the output would print stuff then things : stuff : things string-> : print stuff jinja-> : print {{stuff}}","title":"Variable"},{"location":"jinja/#for-loops","text":"When running within a for loop, tackle automatically keeps track of the iterand and integer index of the loop. For instance the following would print out stuff 0 and things 1 : printer : -> : print {{item}} {{index}} for : - stuff - things","title":"For Loops"},{"location":"jinja/#rendering-by-default","text":"Not all fields need to be wrapped with jinja though including several base methods and hook fields. For instance the if and for methods are automatically interpreted as jinja expressions and do not need to be wrapped with braces. This is because writing an if statement makes little sense unless it is dynamic which jinja is needed for. Along the same thread, inputs of type string for for loops implicitly mean they need to be rendered. For instance the following would print out stuff and things . a_list : - stuff - things printer : -> : print {{item}} if : \"'stuff' in a_list\" for : a_list Note the additional quotes in the if statement which is a yaml parsing nuance of ruamel, the parsing package used by tackle. Hook fields additionally can be marked as being rendered by default in both python and declarative hooks . For instance with the var hook , a python hook used to render variables, the input is rendered by default so the following would work: stuff : things call-> : var stuff check-> : assert \"{{call}}\" things This field can additionally be added to declarative hooks like so: some_hook<- : input : default : foo render_by_default : true stuff : things call-> : some_hook --input stuff check-> : assert \"{{call.input}}\" things","title":"Rendering By Default"},{"location":"jinja/#jinja-expressions","text":"Jinja offers a rich expression syntax that is similar to python's and allows checking whether items are equal, items are in a list / map, and other things outside the scope of these docs that you can find in jinja's excellent documentation . For instance to conditionally run a key based on a user input: user_input-> : select Input what? --choices ['stuff','things'] run_stuff-> : print Stuff --if user_input=='stuff' run_things : -> : print Things if : user_input == 'things' Or one could check if an item is in a list: Note: checkbox hook is a multi-select prompt that returns a list user_input-> : checkbox Input what? --choices ['stuff','things'] --checked run_stuff-> : print Stuff --if \"'stuff' in user_input\" run_things : -> : print Things if : \"'stuff' in user_input\" Notice in this example the exra quoting which is an artifact of yaml parsing and need to be encapsulated for the parser.","title":"Jinja Expressions"},{"location":"jinja/#jinja-filters","text":"Jinja natively has numerous builtin functions that allow a wide variety of actions similar to tackle but with less options. To see the full list, check out jinja's documentation .","title":"Jinja Filters"},{"location":"jinja/#list-comprehensions","text":"While tackle supports list comprehensions , jinja conveniently does as well and can be done in a single line. input_list : - stuff - and - things reject_list : - and list_comprehension-> : \"{{ input_list | reject('in', reject_list) | list }}\" Here, reject and list are builtin jinja filters, not tackle hooks.","title":"List Comprehensions"},{"location":"memory-management/","text":"Memory Management \u00b6 Tackle has a memory management model that defines both the ability for tackle files to pass context between one another and the order of precedence when rendering variables and assigning values to them. Public vs Private Context \u00b6 For passing variables between files, tackle has the notion of public and private memory spaces that are differentiated based on any kind of hook call that ends in -> or _> respectively. Public contexts are exported when calling a declarative hook / tackle file / provider whereas private contexts stay local to the declarative hook / tackle file / provider. By default, non-hook calls are inserted into the public context. For instance given the following tackle file and running tackle file.yaml -p , with the -p short for --print , an option that prints out the output / public context: stuff : things private_hook_> : input Enter value? public_hook-> : var You entered value {{private_hook}}... Would result in: stuff : things public_hook : You entered value <the value you entered>... Public and private contexts are really only important when operating in schema constrained environments or from a security perspective if calling untrusted external hooks. For instance to enforce a schema with a declarative hook, one could write the following. goto<- : exec : type : journey destination_> : input Where we going? --default moon itinerary-> : var One trip to the {{destination}} trip-> : goto Which when run with tackle file.yaml -p would prompt the user and return: trip : type : journey itinerary : One trip to the moon Where we can see that destination was not included in the output because it is a private hook. This shows how if you need to control the schema, private hooks are an good way manage what is return it while still having the ability to use internal variables and call internal actions. Note, tackle has no notion of private declarative hooks yet but will when declarative methods are more flushed out. Additional Contexts \u00b6 In the prior section the difference between the public and private context is discussed but in fact there are two other contexts that tackle uses called the existing context and the temporary context. Existing Context \u00b6 The existing context is the public context that is passed when calling another tackle file or providers from within a tackle file. It is helpful if you want to build context in one file and then use it in another. For instance a common pattern is to have a data file that holds variables that are then used to render / resolve underlying logic. In the following example we can see the initial file call another file and then use that context to perform an action. calling-tackle.yaml \u00b6 globals-> : tackle globals.yaml --find_in_parent --merge #... do-> : print {{stuff}} Which could then call a file which asks for things like environment and then indexes some data (many ways to do this) allowing the previous file to access variables specific to the environment. globals.yaml \u00b6 environment-> : select --choices ['dev','prod'] dev_> : stuff : things prod_> : stuff : more things merge-> : get {{environment}} --merge Temporary Context \u00b6 When parsing blocks and other hooks that parse their own individual context such as the match hook, an additional context is built so that users don't need to provide the full path to variables that are on the same level. For instance given this block hook, the following would run: trips-> : for : - space - the moon - mars destination-> : \"{{item}}\" info_> : print Let's go to {{destination}}! Notice how within the trip block, the field destination can be referenced directly without its full path which would be trips[index].destination , something that would be a serious pain in complicated nested logic. Render Context Precedence \u00b6 When variables are rendered, they can use any number of different contexts based on an order of precedence described below. Temporary Public Private Existing","title":"Memory Management"},{"location":"memory-management/#memory-management","text":"Tackle has a memory management model that defines both the ability for tackle files to pass context between one another and the order of precedence when rendering variables and assigning values to them.","title":"Memory Management"},{"location":"memory-management/#public-vs-private-context","text":"For passing variables between files, tackle has the notion of public and private memory spaces that are differentiated based on any kind of hook call that ends in -> or _> respectively. Public contexts are exported when calling a declarative hook / tackle file / provider whereas private contexts stay local to the declarative hook / tackle file / provider. By default, non-hook calls are inserted into the public context. For instance given the following tackle file and running tackle file.yaml -p , with the -p short for --print , an option that prints out the output / public context: stuff : things private_hook_> : input Enter value? public_hook-> : var You entered value {{private_hook}}... Would result in: stuff : things public_hook : You entered value <the value you entered>... Public and private contexts are really only important when operating in schema constrained environments or from a security perspective if calling untrusted external hooks. For instance to enforce a schema with a declarative hook, one could write the following. goto<- : exec : type : journey destination_> : input Where we going? --default moon itinerary-> : var One trip to the {{destination}} trip-> : goto Which when run with tackle file.yaml -p would prompt the user and return: trip : type : journey itinerary : One trip to the moon Where we can see that destination was not included in the output because it is a private hook. This shows how if you need to control the schema, private hooks are an good way manage what is return it while still having the ability to use internal variables and call internal actions. Note, tackle has no notion of private declarative hooks yet but will when declarative methods are more flushed out.","title":"Public vs Private Context"},{"location":"memory-management/#additional-contexts","text":"In the prior section the difference between the public and private context is discussed but in fact there are two other contexts that tackle uses called the existing context and the temporary context.","title":"Additional Contexts"},{"location":"memory-management/#existing-context","text":"The existing context is the public context that is passed when calling another tackle file or providers from within a tackle file. It is helpful if you want to build context in one file and then use it in another. For instance a common pattern is to have a data file that holds variables that are then used to render / resolve underlying logic. In the following example we can see the initial file call another file and then use that context to perform an action.","title":"Existing Context"},{"location":"memory-management/#calling-tackleyaml","text":"globals-> : tackle globals.yaml --find_in_parent --merge #... do-> : print {{stuff}} Which could then call a file which asks for things like environment and then indexes some data (many ways to do this) allowing the previous file to access variables specific to the environment.","title":"calling-tackle.yaml"},{"location":"memory-management/#globalsyaml","text":"environment-> : select --choices ['dev','prod'] dev_> : stuff : things prod_> : stuff : more things merge-> : get {{environment}} --merge","title":"globals.yaml"},{"location":"memory-management/#temporary-context","text":"When parsing blocks and other hooks that parse their own individual context such as the match hook, an additional context is built so that users don't need to provide the full path to variables that are on the same level. For instance given this block hook, the following would run: trips-> : for : - space - the moon - mars destination-> : \"{{item}}\" info_> : print Let's go to {{destination}}! Notice how within the trip block, the field destination can be referenced directly without its full path which would be trips[index].destination , something that would be a serious pain in complicated nested logic.","title":"Temporary Context"},{"location":"memory-management/#render-context-precedence","text":"When variables are rendered, they can use any number of different contexts based on an order of precedence described below. Temporary Public Private Existing","title":"Render Context Precedence"},{"location":"notes/","text":"Advanced installation method Notes on 4 ways to call tackle Improve jinja documentation","title":"Notes"},{"location":"project-structure/","text":"Project Structure \u00b6 Tackle box at its core is simply a way to call python objects from yaml files. These python objects are called hooks which are grouped into providers that can be imported / ran from within tackle files . Providers don't necessarily need to have hooks or tackle files but logically would have at least one of them to do anything. So to be explicit: hook A python object that can be called from a yaml based tackle file. Extends the BaseHook class and is located within a hooks directory of a provider provider An importable / callable collection of hooks and / or a tackle file that runs hooks Tackle ships with a core set of native providers to do basic prompting / system operations / code generation Third party providers are generally stored in github repos tackle file A yaml file that runs hooks By default it is a file called tackle.yaml and is located at the base of a provider For instance this is the basic layout of a provider: \u251c\u2500\u2500 hooks \u2502 \u2514\u2500\u2500 hook-1.py \u2502 \u2514\u2500\u2500 hook-2.py \u2514\u2500\u2500 tackle.yaml Which if it was located in github could be called with tackle <github org>/<repo name> For code generators and other utilities that don't have any custom hooks, the provider structure could be as simple as: \u251c\u2500\u2500 templates \u2502 \u2514\u2500\u2500 file1.tpl \u2502 \u2514\u2500\u2500 file2.tpl \u2514\u2500\u2500 tackle.yaml Tackle files can also be run on their own or call one another.","title":"Project Structure"},{"location":"project-structure/#project-structure","text":"Tackle box at its core is simply a way to call python objects from yaml files. These python objects are called hooks which are grouped into providers that can be imported / ran from within tackle files . Providers don't necessarily need to have hooks or tackle files but logically would have at least one of them to do anything. So to be explicit: hook A python object that can be called from a yaml based tackle file. Extends the BaseHook class and is located within a hooks directory of a provider provider An importable / callable collection of hooks and / or a tackle file that runs hooks Tackle ships with a core set of native providers to do basic prompting / system operations / code generation Third party providers are generally stored in github repos tackle file A yaml file that runs hooks By default it is a file called tackle.yaml and is located at the base of a provider For instance this is the basic layout of a provider: \u251c\u2500\u2500 hooks \u2502 \u2514\u2500\u2500 hook-1.py \u2502 \u2514\u2500\u2500 hook-2.py \u2514\u2500\u2500 tackle.yaml Which if it was located in github could be called with tackle <github org>/<repo name> For code generators and other utilities that don't have any custom hooks, the provider structure could be as simple as: \u251c\u2500\u2500 templates \u2502 \u2514\u2500\u2500 file1.tpl \u2502 \u2514\u2500\u2500 file2.tpl \u2514\u2500\u2500 tackle.yaml Tackle files can also be run on their own or call one another.","title":"Project Structure"},{"location":"testing-providers/","text":"Testing Providers \u00b6 WIP","title":"Testing Providers"},{"location":"testing-providers/#testing-providers","text":"WIP","title":"Testing Providers"},{"location":"use-cases/","text":"Use Cases \u00b6 Cool story bro what's this all for? [ ] TODO Code generation Declarative utilities Config file management Kubernetes","title":"Use Cases"},{"location":"use-cases/#use-cases","text":"Cool story bro what's this all for? [ ] TODO Code generation Declarative utilities Config file management Kubernetes","title":"Use Cases"},{"location":"using-providers/","text":"Using Providers \u00b6 From the command line \u00b6 Providers can be called directly from the command line per the calling tackle documentation. For instance: tackle robcxyz/tackle-provider # Or https://github.com/robcxyz/tackle-provider tackle path/to/dir/with/tackle/file tackle path/to/tackle/file.yaml tackle # Checks in parent dir for tackle.yaml file Calling from tackle file \u00b6 Within a tackle file, another provider can be called which would run the tackle file by calling the tackle hook . For instance: call another tackle-> : tackle path/to/local/or/remote/provider Note that at this time additional arguments / keys / flags do not work the same as when calling from the command line and instead act like additional arguments / keys / flags for hooks and instead behave like normal hook calls . Importing hooks from a provider \u00b6 Hooks can be imported from a tackle provider with the import hook. For instance in a tackle file: import_> : path/to/local/or/remote/provider using that hook-> : the_imorted_hook ... Here we use a private hook call to import hooks as the output of this hook call is not needed. Configuration Options \u00b6 Requirements \u00b6 Each provider can have it's own requirements which when the provider is imported / called are automatically installed to support the execution of hooks. Requirements are located at the base of the provider as in the following directory structure: Autogenerated Docs \u00b6 TODO: Document exact process for third party autogenerated provider documentation","title":"Using Providers"},{"location":"using-providers/#using-providers","text":"","title":"Using Providers"},{"location":"using-providers/#from-the-command-line","text":"Providers can be called directly from the command line per the calling tackle documentation. For instance: tackle robcxyz/tackle-provider # Or https://github.com/robcxyz/tackle-provider tackle path/to/dir/with/tackle/file tackle path/to/tackle/file.yaml tackle # Checks in parent dir for tackle.yaml file","title":"From the command line"},{"location":"using-providers/#calling-from-tackle-file","text":"Within a tackle file, another provider can be called which would run the tackle file by calling the tackle hook . For instance: call another tackle-> : tackle path/to/local/or/remote/provider Note that at this time additional arguments / keys / flags do not work the same as when calling from the command line and instead act like additional arguments / keys / flags for hooks and instead behave like normal hook calls .","title":"Calling from tackle file"},{"location":"using-providers/#importing-hooks-from-a-provider","text":"Hooks can be imported from a tackle provider with the import hook. For instance in a tackle file: import_> : path/to/local/or/remote/provider using that hook-> : the_imorted_hook ... Here we use a private hook call to import hooks as the output of this hook call is not needed.","title":"Importing hooks from a provider"},{"location":"using-providers/#configuration-options","text":"","title":"Configuration Options"},{"location":"using-providers/#requirements","text":"Each provider can have it's own requirements which when the provider is imported / called are automatically installed to support the execution of hooks. Requirements are located at the base of the provider as in the following directory structure:","title":"Requirements"},{"location":"using-providers/#autogenerated-docs","text":"TODO: Document exact process for third party autogenerated provider documentation","title":"Autogenerated Docs"},{"location":"writing-hooks/","text":"Creating Hooks \u00b6 This document covers all aspects of writing hooks in python focusing on the API and it's semantics for how it can be used within tackle files. For creating providers and creating dependencies, please check out the creating providers section. Overview \u00b6 Tackle box hooks are any object located within the hooks directory that extends a BaseHook object and implement an exec method as the entrypoint to calling the hook. BaseHook objects are pydantic objects as well such that their attributes need to include type annotations. All of these attributes are then made accessible when calling the hook from a yaml file. There are couple other semantics that will be described in this document such as mapping arguments, excluding from rendering, and auto-generating documentation for your hooks. Basic Example \u00b6 The easiest way to understand this is through a simple example. If we had a file structure like this: \u251c\u2500\u2500 hooks \u2514\u2500\u2500 do_stuff.py # Name of file doesn't matter \u2514\u2500\u2500 tackle.yaml # Not needed We could have a file do_stuff.py that has an object DoStuffHook that extends the BaseHook and implements an exec method which in this case both prints and returns the things attribute. Additionally, there is a private args attribute which can be used to map positional arguments to an attribute, in this case things (more on this later). from tackle import BaseHook , Field class DoStuffHook ( BaseHook ): hook_type : str = \"do_stuff\" things : str = Field ( None , description = \"All the things.\" ) args : list = [ 'things' ] def exec ( self ): print ( self . things ) return self . things One could then run a tackle file that looks like this: compact-expression-> : do_stuff All the things expanded-expression : -> : do_stuff things : All the things Which when run would print out \"All the things\" twice and return the following context. compact-expression : All the things expanded-expression : All the things Concepts \u00b6 Pydantic and Types \u00b6 Pydantic has some idioms to be aware of when writing hooks specifically around types and fields. Every attribute needs to be declared with a type in pydantic and will throw an error if the type is not explicitly declared within the attribute's definition or if the wrong type is fed into the field. Because everything that is output from a hook needs to serializable (i.e. it can't return python objects), many pydantic types aren't usable unless they can be directly serialized back into a structured data format (i.e. a string, int, float, list, or dict). Multiple types for attributes are allowed by use of the Union or Optional types ( see difference ) so that within the exec statement one can qualify the type and process it appropriately. For instance: from tackle import BaseHook from typing import Union class DoStuffHook ( BaseHook ): hook_type : str = \"do_stuff\" things : Union [ str ] = None args : list = [ 'things' ] def exec ( self ): if isinstance ( self . things , list ): for i in self . things : print ( f \"Thing = { i } \" ) elif isinstance ( self . things , str ): print ( self . things ) return self . things Arguments \u00b6 As you may have noticed, tackle-box supports two general types of hook calls, compact and expanded. The only way compact expressions are able to take arguments is through mapping those arguments to fields within hooks. This is done by making an args private attribute which is a list of strings pointing to the attributes the indexed arguments relate to. For instance from our example before: class DoStuffHook ( BaseHook ): hook_type : str = \"do_stuff\" things : str = None more_things : str = None args : list = [ 'things' , 'more_things' ] Now we are adding a field more_things which is another string that one could call like: compact-expression-> : do_stuff All the things Would be the equivalent of: expanded-expression : -> : do_stuff things : All more_things : the things This is because the first argument \"All\" after the hook type \"do_stuff\" is not encapsulated with quotes and so arguments after it are grouped together. If we wanted to call it with two distinct attributes, we'd need to put quotes around them like this: compact-expression-> : do_stuff \"All the things\" \"with other stuff\" Would be the equivalent of: expanded-expression : -> : do_stuff things : All the things more_things : with other stuff Arguments with list and dict types \u00b6 Input arguments can be of any type though in practical terms, the only way to input list/map types is through rendering variable inputs. For instance given this hook: class DoStuffHook ( BaseHook ): hook_type : str = \"do_stuff\" things : dict = None more_things : list = None args : list = [ 'things' , 'more_things' ] One could use input args per the following tackle file: a_map : stuff : things a_list : - stuff - things do-> : do_stuff \"{{ a_map }}\" \"{{ a_list }}\" Controlling Rendering of Fields \u00b6 Sometimes it only makes sense to have inputs be maps or lists so for convenience sake there is a parameter to render strings by default so that users don't need to wrap with braces. For instance in this hook: from tackle import BaseHook , Field class DoStuffHook ( BaseHook ): hook_type : str = \"do_stuff\" things : dict = Field ( None , render_by_default = True ) You can see the extra Field function which when passing render_by_default into it, the string is automatically wrapped with jinja braces and rendered. On top of setting this on a per field basis, one could specify a list of fields like so: from tackle import BaseHook class DoStuffHook ( BaseHook ): hook_type : str = \"do_stuff\" things : dict = None _render_by_default : list = [ 'things' ] Which when ran in a tackle file would be: a_map : stuff : things do-1 : -> : do_stuff a_map do-2 : -> : do_stuff \"{{ a_map }}\" # Validates both are equivalent test-> : assert \"{{ do-1 }}\" \"{{ do-2 }}\" Validators and __init__ \u00b6 While not a tackle specific functionality, pydantic validators and __init__ special methods are supported. from pydantic import validator from tackle import BaseHook class DoStuffHook ( BaseHook ): hook_type : str = \"a_hook\" things : dict = None more_things : list = None args : list = [ 'things' , 'more_things' ] @validator ( 'things' ) def validate ( cls , value ): # Check if the input is valid - throw error otherwise ... return value def __init__ ( self , ** data ): super () . __init__ ( ** data ) # Initialize the object ... def exec ( self ): ... Autogenerated Documentation \u00b6 Documentation can be autogenerated for hooks and providers that looks the same as the official documentation. There are two areas where documentation happens within a hook, in the docstring and within fields themselves. from tackle import BaseHook , Field class DoStuffHook ( BaseHook ): \"\"\"Put your hooks description here. Will be rendered as markdown.\"\"\" hook_type : str = \"do_stuff\" things : dict = Field ( None , description = \"Put the field's description here.\" ) _render_by_default : list = [ 'things' ] More specifics on autogenerated docs can be found in the creating providers docs.","title":"Writing Hooks"},{"location":"writing-hooks/#creating-hooks","text":"This document covers all aspects of writing hooks in python focusing on the API and it's semantics for how it can be used within tackle files. For creating providers and creating dependencies, please check out the creating providers section.","title":"Creating Hooks"},{"location":"writing-hooks/#overview","text":"Tackle box hooks are any object located within the hooks directory that extends a BaseHook object and implement an exec method as the entrypoint to calling the hook. BaseHook objects are pydantic objects as well such that their attributes need to include type annotations. All of these attributes are then made accessible when calling the hook from a yaml file. There are couple other semantics that will be described in this document such as mapping arguments, excluding from rendering, and auto-generating documentation for your hooks.","title":"Overview"},{"location":"writing-hooks/#basic-example","text":"The easiest way to understand this is through a simple example. If we had a file structure like this: \u251c\u2500\u2500 hooks \u2514\u2500\u2500 do_stuff.py # Name of file doesn't matter \u2514\u2500\u2500 tackle.yaml # Not needed We could have a file do_stuff.py that has an object DoStuffHook that extends the BaseHook and implements an exec method which in this case both prints and returns the things attribute. Additionally, there is a private args attribute which can be used to map positional arguments to an attribute, in this case things (more on this later). from tackle import BaseHook , Field class DoStuffHook ( BaseHook ): hook_type : str = \"do_stuff\" things : str = Field ( None , description = \"All the things.\" ) args : list = [ 'things' ] def exec ( self ): print ( self . things ) return self . things One could then run a tackle file that looks like this: compact-expression-> : do_stuff All the things expanded-expression : -> : do_stuff things : All the things Which when run would print out \"All the things\" twice and return the following context. compact-expression : All the things expanded-expression : All the things","title":"Basic Example"},{"location":"writing-hooks/#concepts","text":"","title":"Concepts"},{"location":"writing-hooks/#pydantic-and-types","text":"Pydantic has some idioms to be aware of when writing hooks specifically around types and fields. Every attribute needs to be declared with a type in pydantic and will throw an error if the type is not explicitly declared within the attribute's definition or if the wrong type is fed into the field. Because everything that is output from a hook needs to serializable (i.e. it can't return python objects), many pydantic types aren't usable unless they can be directly serialized back into a structured data format (i.e. a string, int, float, list, or dict). Multiple types for attributes are allowed by use of the Union or Optional types ( see difference ) so that within the exec statement one can qualify the type and process it appropriately. For instance: from tackle import BaseHook from typing import Union class DoStuffHook ( BaseHook ): hook_type : str = \"do_stuff\" things : Union [ str ] = None args : list = [ 'things' ] def exec ( self ): if isinstance ( self . things , list ): for i in self . things : print ( f \"Thing = { i } \" ) elif isinstance ( self . things , str ): print ( self . things ) return self . things","title":"Pydantic and Types"},{"location":"writing-hooks/#arguments","text":"As you may have noticed, tackle-box supports two general types of hook calls, compact and expanded. The only way compact expressions are able to take arguments is through mapping those arguments to fields within hooks. This is done by making an args private attribute which is a list of strings pointing to the attributes the indexed arguments relate to. For instance from our example before: class DoStuffHook ( BaseHook ): hook_type : str = \"do_stuff\" things : str = None more_things : str = None args : list = [ 'things' , 'more_things' ] Now we are adding a field more_things which is another string that one could call like: compact-expression-> : do_stuff All the things Would be the equivalent of: expanded-expression : -> : do_stuff things : All more_things : the things This is because the first argument \"All\" after the hook type \"do_stuff\" is not encapsulated with quotes and so arguments after it are grouped together. If we wanted to call it with two distinct attributes, we'd need to put quotes around them like this: compact-expression-> : do_stuff \"All the things\" \"with other stuff\" Would be the equivalent of: expanded-expression : -> : do_stuff things : All the things more_things : with other stuff","title":"Arguments"},{"location":"writing-hooks/#arguments-with-list-and-dict-types","text":"Input arguments can be of any type though in practical terms, the only way to input list/map types is through rendering variable inputs. For instance given this hook: class DoStuffHook ( BaseHook ): hook_type : str = \"do_stuff\" things : dict = None more_things : list = None args : list = [ 'things' , 'more_things' ] One could use input args per the following tackle file: a_map : stuff : things a_list : - stuff - things do-> : do_stuff \"{{ a_map }}\" \"{{ a_list }}\"","title":"Arguments with list and dict types"},{"location":"writing-hooks/#controlling-rendering-of-fields","text":"Sometimes it only makes sense to have inputs be maps or lists so for convenience sake there is a parameter to render strings by default so that users don't need to wrap with braces. For instance in this hook: from tackle import BaseHook , Field class DoStuffHook ( BaseHook ): hook_type : str = \"do_stuff\" things : dict = Field ( None , render_by_default = True ) You can see the extra Field function which when passing render_by_default into it, the string is automatically wrapped with jinja braces and rendered. On top of setting this on a per field basis, one could specify a list of fields like so: from tackle import BaseHook class DoStuffHook ( BaseHook ): hook_type : str = \"do_stuff\" things : dict = None _render_by_default : list = [ 'things' ] Which when ran in a tackle file would be: a_map : stuff : things do-1 : -> : do_stuff a_map do-2 : -> : do_stuff \"{{ a_map }}\" # Validates both are equivalent test-> : assert \"{{ do-1 }}\" \"{{ do-2 }}\"","title":"Controlling Rendering of Fields"},{"location":"writing-hooks/#validators-and-__init__","text":"While not a tackle specific functionality, pydantic validators and __init__ special methods are supported. from pydantic import validator from tackle import BaseHook class DoStuffHook ( BaseHook ): hook_type : str = \"a_hook\" things : dict = None more_things : list = None args : list = [ 'things' , 'more_things' ] @validator ( 'things' ) def validate ( cls , value ): # Check if the input is valid - throw error otherwise ... return value def __init__ ( self , ** data ): super () . __init__ ( ** data ) # Initialize the object ... def exec ( self ): ...","title":"Validators and __init__"},{"location":"writing-hooks/#autogenerated-documentation","text":"Documentation can be autogenerated for hooks and providers that looks the same as the official documentation. There are two areas where documentation happens within a hook, in the docstring and within fields themselves. from tackle import BaseHook , Field class DoStuffHook ( BaseHook ): \"\"\"Put your hooks description here. Will be rendered as markdown.\"\"\" hook_type : str = \"do_stuff\" things : dict = Field ( None , description = \"Put the field's description here.\" ) _render_by_default : list = [ 'things' ] More specifics on autogenerated docs can be found in the creating providers docs.","title":"Autogenerated Documentation"},{"location":"writing-tackle-files/","text":"Tackle File Parsing Logic \u00b6 This document aims to provide an overview of the core parsing logic for tackle files which are arbitrary yaml files that have hooks embedded in them. Basics \u00b6 Tackle-box sequentially parses arbitrary json or yaml files with the parser only changing the data structure when hooks are called denoted by -> at the end of a key / item in a list. Hooks can perform a variety of different actions such as prompting for inputs, making web requests, or generating code and return values that are stored in the key they were called from. After any key / value / item in a list is parsed, it is available to be referenced / reused in additional hook calls through jinja rendering. Hook Call Forms \u00b6 Hooks can be called in two basic forms, expanded and compact. For instance: expanded : -> : input message : What is your name? # Equivalent to compact-> : input What is your name? In this example we are calling the input hook which has one mapped argument, message , which in the compact form of calling the input allows it to be written in a single line. The exact semantics of how arguments are mapped can be found in the writing hooks documentation. The input hook has several parameters that are not mapped as arguments such as default which can additionally be used in a compact form by including a -- in the parameter name. For instance: expanded : -> : input message : What is your name? default : robcxyz # Equivalent to compact-> : input What is your name? --default robcxyz # Notice the additional argument Tackle-box also enables conditionals, loops, and other base methods that are also able to be expressed in both hook call forms. For instance here we can see a for loop in both forms: ttd : - stuff - and - things expanded : -> : input message : What do you want to do? for : ttd # Strings are rendered by default for `for` loops default : \"{{item}}\" # Here we must explicitly render as default could be a str # Equivalent to compact-> : input What do you want to do? --for ttd --default \"{{ item }}\" For more information on loops and conditional, check out the hook methods documentation. Public vs Private Hook Calls \u00b6 Thus far all the examples have been of public hook calls denoted by -> arrows which run the hook and store the value in the key but sometimes you might want to call hooks but not have the key stored in the output. To do this you would instead run a private hook denoted by _> arrow. Such cases exist when you are dealing with a strict schema and want to embed actions / logic in that schema or you want to keep a clean context and ignore the output of a key. The output of a private hook call is still available to be used later in the same context and is only removed when the context changes such as when a tackle hook is called that parses another tackle file / provider. Special Cases \u00b6 While all logic can be expressed simply through calling hooks, several convenient shorthand forms exist for calling common hooks such as var for rendering a variable and block for parsing a level of the input. Rendering Variables \u00b6 Values / keys are not rendered by default but instead need to be rendered through a hook call. To make this easier, a special case exists where if the value of a hook call is wrapped with braces (ie key->: \"{{ another_key }}\" ) it is recursively rendered right away. For instance: a_map : stuff : things reference-> : \"{{ a_map }}\" Would result in: a_map : stuff : things reference : stuff : things This allows creation of renderable templates in keys that one can reuse depending on what the current context is. For instance: stuff : things a_map : more-stuff : \"{{ stuff }}\" reference-> : \"{{ a_map }}\" Would result in: stuff : things a_map : more-stuff : \"{{ stuff }}\" reference : stuff : things Blocks \u00b6 Sometimes it is convenient to be able to apply logic to entire blocks of yaml for which there is a special case embedded in the parser. For instance it is common to use a single / multi selector in a tackle file to restrict users to running a certain set of functions: action : -> : select What are we doing today? choices : - code : Code tackle stuff - do : Do things code-> : if : action == 'code' # Run a number of hooks conditional on the `action` arbitrary : contex : ... gen-> : tackle robcxyz/tackle-provider open-> : command touch code.py ... do-> : if : action == 'do' check_schedule-> : webbrowser https://calendar.google.com/ ... If this example was run, the user would be prompted for a selection which based on their input, the block of code hooks would be executed based on the if condition. Under the hood the parser is re-writing the input to execute a block hook like this example though the code above makes it simpler: code : -> : block if : action == 'code' items : arbitrary : contex : ... gen-> : tackle robcxyz/tackle-provider open-> : command touch code.py Block render context \u00b6 When writing blocks, one has access to two different render contexts, the local block context and the outer global context. For instance: stuff : things foo : bar code-> : ... foo : baz inner-context-> : \"{{ foo }}\" outer-context-> : \"{{ stuff }}\" In this example, the key \"inner-context\" would equal \"baz\" while the \"outer-context\" is able to reference \"stuff\". Side note on blocks - Try out match hooks \u00b6 For another way of conditionally parsing blocks of yaml, checkout the match hook which performs similarly to match / switch case statements per the below example. action : -> : select What are we doing today? choices : - code : Code tackle stuff - do : Do things run_action : -> : match value : \"{{ action }}\" case : code : gen-> : tackle robcxyz/tackle-provider ... do : if : action == 'do' check_schedule-> : webbrowser https://calendar.google.com/ ...","title":"Writing Tackle Files"},{"location":"writing-tackle-files/#tackle-file-parsing-logic","text":"This document aims to provide an overview of the core parsing logic for tackle files which are arbitrary yaml files that have hooks embedded in them.","title":"Tackle File Parsing Logic"},{"location":"writing-tackle-files/#basics","text":"Tackle-box sequentially parses arbitrary json or yaml files with the parser only changing the data structure when hooks are called denoted by -> at the end of a key / item in a list. Hooks can perform a variety of different actions such as prompting for inputs, making web requests, or generating code and return values that are stored in the key they were called from. After any key / value / item in a list is parsed, it is available to be referenced / reused in additional hook calls through jinja rendering.","title":"Basics"},{"location":"writing-tackle-files/#hook-call-forms","text":"Hooks can be called in two basic forms, expanded and compact. For instance: expanded : -> : input message : What is your name? # Equivalent to compact-> : input What is your name? In this example we are calling the input hook which has one mapped argument, message , which in the compact form of calling the input allows it to be written in a single line. The exact semantics of how arguments are mapped can be found in the writing hooks documentation. The input hook has several parameters that are not mapped as arguments such as default which can additionally be used in a compact form by including a -- in the parameter name. For instance: expanded : -> : input message : What is your name? default : robcxyz # Equivalent to compact-> : input What is your name? --default robcxyz # Notice the additional argument Tackle-box also enables conditionals, loops, and other base methods that are also able to be expressed in both hook call forms. For instance here we can see a for loop in both forms: ttd : - stuff - and - things expanded : -> : input message : What do you want to do? for : ttd # Strings are rendered by default for `for` loops default : \"{{item}}\" # Here we must explicitly render as default could be a str # Equivalent to compact-> : input What do you want to do? --for ttd --default \"{{ item }}\" For more information on loops and conditional, check out the hook methods documentation.","title":"Hook Call Forms"},{"location":"writing-tackle-files/#public-vs-private-hook-calls","text":"Thus far all the examples have been of public hook calls denoted by -> arrows which run the hook and store the value in the key but sometimes you might want to call hooks but not have the key stored in the output. To do this you would instead run a private hook denoted by _> arrow. Such cases exist when you are dealing with a strict schema and want to embed actions / logic in that schema or you want to keep a clean context and ignore the output of a key. The output of a private hook call is still available to be used later in the same context and is only removed when the context changes such as when a tackle hook is called that parses another tackle file / provider.","title":"Public vs Private Hook Calls"},{"location":"writing-tackle-files/#special-cases","text":"While all logic can be expressed simply through calling hooks, several convenient shorthand forms exist for calling common hooks such as var for rendering a variable and block for parsing a level of the input.","title":"Special Cases"},{"location":"writing-tackle-files/#rendering-variables","text":"Values / keys are not rendered by default but instead need to be rendered through a hook call. To make this easier, a special case exists where if the value of a hook call is wrapped with braces (ie key->: \"{{ another_key }}\" ) it is recursively rendered right away. For instance: a_map : stuff : things reference-> : \"{{ a_map }}\" Would result in: a_map : stuff : things reference : stuff : things This allows creation of renderable templates in keys that one can reuse depending on what the current context is. For instance: stuff : things a_map : more-stuff : \"{{ stuff }}\" reference-> : \"{{ a_map }}\" Would result in: stuff : things a_map : more-stuff : \"{{ stuff }}\" reference : stuff : things","title":"Rendering Variables"},{"location":"writing-tackle-files/#blocks","text":"Sometimes it is convenient to be able to apply logic to entire blocks of yaml for which there is a special case embedded in the parser. For instance it is common to use a single / multi selector in a tackle file to restrict users to running a certain set of functions: action : -> : select What are we doing today? choices : - code : Code tackle stuff - do : Do things code-> : if : action == 'code' # Run a number of hooks conditional on the `action` arbitrary : contex : ... gen-> : tackle robcxyz/tackle-provider open-> : command touch code.py ... do-> : if : action == 'do' check_schedule-> : webbrowser https://calendar.google.com/ ... If this example was run, the user would be prompted for a selection which based on their input, the block of code hooks would be executed based on the if condition. Under the hood the parser is re-writing the input to execute a block hook like this example though the code above makes it simpler: code : -> : block if : action == 'code' items : arbitrary : contex : ... gen-> : tackle robcxyz/tackle-provider open-> : command touch code.py","title":"Blocks"},{"location":"writing-tackle-files/#block-render-context","text":"When writing blocks, one has access to two different render contexts, the local block context and the outer global context. For instance: stuff : things foo : bar code-> : ... foo : baz inner-context-> : \"{{ foo }}\" outer-context-> : \"{{ stuff }}\" In this example, the key \"inner-context\" would equal \"baz\" while the \"outer-context\" is able to reference \"stuff\".","title":"Block render context"},{"location":"writing-tackle-files/#side-note-on-blocks-try-out-match-hooks","text":"For another way of conditionally parsing blocks of yaml, checkout the match hook which performs similarly to match / switch case statements per the below example. action : -> : select What are we doing today? choices : - code : Code tackle stuff - do : Do things run_action : -> : match value : \"{{ action }}\" case : code : gen-> : tackle robcxyz/tackle-provider ... do : if : action == 'do' check_schedule-> : webbrowser https://calendar.google.com/ ...","title":"Side note on blocks - Try out match hooks"},{"location":"examples/","text":"Tackle File Example \u00b6 Prompting Reading and writing data Generating code Context manipulation Complex logic","title":"Index"},{"location":"examples/#tackle-file-example","text":"Prompting Reading and writing data Generating code Context manipulation Complex logic","title":"Tackle File Example"},{"location":"examples/complex-logic/","text":"Tackle File Complex Logic \u00b6 TODO","title":"Complex Logic"},{"location":"examples/complex-logic/#tackle-file-complex-logic","text":"TODO","title":"Tackle File Complex Logic"},{"location":"examples/context-manipulation/","text":"Tackle File Context Manipulation \u00b6 TODO","title":"Context Manipulation"},{"location":"examples/context-manipulation/#tackle-file-context-manipulation","text":"TODO","title":"Tackle File Context Manipulation"},{"location":"examples/generating-code/","text":"Tackle File Generating Code \u00b6 Check out the code generation tutorial for a more in depth explanation of code generators. This file is more for different example patterns that can be used when generating code: TODO generate Hook \u00b6 As mentioned in the tutorial, the generate hook is generally used to generate code. Example showing rendering a cookiecutter template","title":"Generating Code"},{"location":"examples/generating-code/#tackle-file-generating-code","text":"Check out the code generation tutorial for a more in depth explanation of code generators. This file is more for different example patterns that can be used when generating code: TODO","title":"Tackle File Generating Code"},{"location":"examples/generating-code/#generate-hook","text":"As mentioned in the tutorial, the generate hook is generally used to generate code. Example showing rendering a cookiecutter template","title":"generate Hook"},{"location":"examples/prompting/","text":"Example Hook Calls \u00b6 Examples of common hook calls that should allow the majority of actions. Prompts \u00b6 Prompts are based on wrapping functionality of PyInquirer. The most common things one would want to prompt the user around are basic inputs to fields, selections from a list of selections, and checkbox inputs from a list. input \u00b6 Basic inputs functionality for fields. Docs Tackle File \u00b6 input-minimal-> : input input-compact-> : input \"What stuff?\" input-expanded : -> : input message : \"What stuff?\" default : things Prompt in CLI \u00b6 ? input-minimal >>> ? What stuff? ? What stuff? things Resulting Context \u00b6 input-minimal : <user input> input-compact : <user input> input-expanded : things select \u00b6","title":"Prompting"},{"location":"examples/prompting/#example-hook-calls","text":"Examples of common hook calls that should allow the majority of actions.","title":"Example Hook Calls"},{"location":"examples/prompting/#prompts","text":"Prompts are based on wrapping functionality of PyInquirer. The most common things one would want to prompt the user around are basic inputs to fields, selections from a list of selections, and checkbox inputs from a list.","title":"Prompts"},{"location":"examples/prompting/#input","text":"Basic inputs functionality for fields. Docs","title":"input"},{"location":"examples/prompting/#tackle-file","text":"input-minimal-> : input input-compact-> : input \"What stuff?\" input-expanded : -> : input message : \"What stuff?\" default : things","title":"Tackle File"},{"location":"examples/prompting/#prompt-in-cli","text":"? input-minimal >>> ? What stuff? ? What stuff? things","title":"Prompt in CLI"},{"location":"examples/prompting/#resulting-context","text":"input-minimal : <user input> input-compact : <user input> input-expanded : things","title":"Resulting Context"},{"location":"examples/prompting/#select","text":"","title":"select"},{"location":"examples/reading-writing-data/","text":"","title":"Reading and Writing Data"},{"location":"planning/provider-reorg/","text":"Provider Re-organization \u00b6 Issues \u00b6 Overlapping dependencies Can be dealt with by skipping importing hooks New Provider List \u00b6 json toml yaml paths path_exists isdir isfile find_in_parent find_in_child path_join abs_path symlink data append list_remove update merge pop keys context set get [delete] merge strings join split random random_hex random_string files shred chmod remove move copy create_file file environment get_env set_env export unset system shell command git clone meta prompts input select checkbox ... [dropdown] console markdown table print http http_get http_post http_put http_delete webbrowser logic match assert [for] [while] [if] generate jinja generate tackle debug tackle import block provider_docs json toml yaml paths data context strings random files environment commands git prompts console http logic generate tackle New layout \u00b6 json toml yaml command paths path_exists isdir isfile find_in_parent find_in_child path_join abs_path symlink context set get [delete] TODO: Change these to operate on keys? \u00b6 merge append list_remove update merge pop keys strings join split random_hex random_string files shred chmod remove move copy create_file file environment get_env set_env export unset system shell command git clone meta prompts input select checkbox ... [dropdown] console markdown table print http http_get http_post http_put http_delete webbrowser logic match assert [for] [while] [if] generate jinja generate tackle debug tackle import block provider_docs","title":"Provider Re-organization"},{"location":"planning/provider-reorg/#provider-re-organization","text":"","title":"Provider Re-organization"},{"location":"planning/provider-reorg/#issues","text":"Overlapping dependencies Can be dealt with by skipping importing hooks","title":"Issues"},{"location":"planning/provider-reorg/#new-provider-list","text":"json toml yaml paths path_exists isdir isfile find_in_parent find_in_child path_join abs_path symlink data append list_remove update merge pop keys context set get [delete] merge strings join split random random_hex random_string files shred chmod remove move copy create_file file environment get_env set_env export unset system shell command git clone meta prompts input select checkbox ... [dropdown] console markdown table print http http_get http_post http_put http_delete webbrowser logic match assert [for] [while] [if] generate jinja generate tackle debug tackle import block provider_docs json toml yaml paths data context strings random files environment commands git prompts console http logic generate tackle","title":"New Provider List"},{"location":"planning/provider-reorg/#new-layout","text":"json toml yaml command paths path_exists isdir isfile find_in_parent find_in_child path_join abs_path symlink context set get [delete]","title":"New layout"},{"location":"planning/provider-reorg/#todo-change-these-to-operate-on-keys","text":"merge append list_remove update merge pop keys strings join split random_hex random_string files shred chmod remove move copy create_file file environment get_env set_env export unset system shell command git clone meta prompts input select checkbox ... [dropdown] console markdown table print http http_get http_post http_put http_delete webbrowser logic match assert [for] [while] [if] generate jinja generate tackle debug tackle import block provider_docs","title":"TODO: Change these to operate on keys?"},{"location":"providers/Collections/","text":"Collections Provider \u00b6 Hooks that act on collections of items. Hooks \u00b6 Type Description Return concat Hook for getting a list of values from a list of maps. union distinct Hook for getting distinct items from a list. union list_key_values Hook for getting a list of values from a list of maps. union sort Hook for sorting complex lists, dicts, or items within a key both in place or as output. union Examples \u00b6 set \u00b6 Set a previous key based on a key path stuff : and : things set_> : set stuff/and other-stuff stuff : and : other-stuff","title":"Index"},{"location":"providers/Collections/#collections-provider","text":"Hooks that act on collections of items.","title":"Collections Provider"},{"location":"providers/Collections/#hooks","text":"Type Description Return concat Hook for getting a list of values from a list of maps. union distinct Hook for getting distinct items from a list. union list_key_values Hook for getting a list of values from a list of maps. union sort Hook for sorting complex lists, dicts, or items within a key both in place or as output. union","title":"Hooks"},{"location":"providers/Collections/#examples","text":"","title":"Examples"},{"location":"providers/Collections/#set","text":"Set a previous key based on a key path stuff : and : things set_> : set stuff/and other-stuff stuff : and : other-stuff","title":"set"},{"location":"providers/Collections/concat/","text":"concat \u00b6 Source Hook for getting a list of values from a list of maps. Inputs \u00b6 Name Type Default Required Description src union None True A list to extract the keys out of. key str None True src_is_key_path bool False False If the src is a list and is meant to be a key path. sep str / False For string src's, a separator for key path. Arguments \u00b6 Position Argument Type 1 src union 2 key str Returns \u00b6 union","title":"concat"},{"location":"providers/Collections/concat/#concat","text":"Source Hook for getting a list of values from a list of maps.","title":"concat"},{"location":"providers/Collections/concat/#inputs","text":"Name Type Default Required Description src union None True A list to extract the keys out of. key str None True src_is_key_path bool False False If the src is a list and is meant to be a key path. sep str / False For string src's, a separator for key path.","title":"Inputs"},{"location":"providers/Collections/concat/#arguments","text":"Position Argument Type 1 src union 2 key str","title":"Arguments"},{"location":"providers/Collections/concat/#returns","text":"union","title":"Returns"},{"location":"providers/Collections/distinct/","text":"distinct \u00b6 Source Hook for getting distinct items from a list. Inputs \u00b6 Name Type Default Required Description src union None True A list append to and output the result or a str with separators or list for a key path to the element to append to within the context. src_is_key_path bool False False If the src is a list and is meant to be a key path. sep str / False For string src's, a separator for key path. item any None True An item to append to a list. Arguments \u00b6 Position Argument Type 1 src union 2 item any Returns \u00b6 union Examples \u00b6 None list : - a - b - b result-> : distinct {{list}} list : - a - b - b result : - a - b","title":"distinct"},{"location":"providers/Collections/distinct/#distinct","text":"Source Hook for getting distinct items from a list.","title":"distinct"},{"location":"providers/Collections/distinct/#inputs","text":"Name Type Default Required Description src union None True A list append to and output the result or a str with separators or list for a key path to the element to append to within the context. src_is_key_path bool False False If the src is a list and is meant to be a key path. sep str / False For string src's, a separator for key path. item any None True An item to append to a list.","title":"Inputs"},{"location":"providers/Collections/distinct/#arguments","text":"Position Argument Type 1 src union 2 item any","title":"Arguments"},{"location":"providers/Collections/distinct/#returns","text":"union","title":"Returns"},{"location":"providers/Collections/distinct/#examples","text":"None list : - a - b - b result-> : distinct {{list}} list : - a - b - b result : - a - b","title":"Examples"},{"location":"providers/Collections/list_key_values/","text":"list_key_values \u00b6 Source Hook for getting a list of values from a list of maps. Inputs \u00b6 Name Type Default Required Description src list None True A list to extract the keys out of. key str None True reject_keys dict None False A dict of keys with values to not include in output. src_is_key_path bool False False If the src is a list and is meant to be a key path. sep str / False For string src's, a separator for key path. Arguments \u00b6 Position Argument Type 1 src list 2 key str Returns \u00b6 union","title":"list_key_values"},{"location":"providers/Collections/list_key_values/#list_key_values","text":"Source Hook for getting a list of values from a list of maps.","title":"list_key_values"},{"location":"providers/Collections/list_key_values/#inputs","text":"Name Type Default Required Description src list None True A list to extract the keys out of. key str None True reject_keys dict None False A dict of keys with values to not include in output. src_is_key_path bool False False If the src is a list and is meant to be a key path. sep str / False For string src's, a separator for key path.","title":"Inputs"},{"location":"providers/Collections/list_key_values/#arguments","text":"Position Argument Type 1 src list 2 key str","title":"Arguments"},{"location":"providers/Collections/list_key_values/#returns","text":"union","title":"Returns"},{"location":"providers/Collections/sort/","text":"sort \u00b6 Source Hook for sorting complex lists, dicts, or items within a key both in place or as output. Inputs \u00b6 Name Type Default Required Description src union None True Either a list of strings or a dict with keys to sort and return the output or a string key_path to sort both in place or as output (see in_place ). in_place bool True False If the src is a string (ie a key path), then sort the item in place (ie replace original) and return None. src_is_key_path bool False False If the src is a list and is meant to be a key path. sep str / False For string src's, a separator for key path. index union None False If the input src is a list, use the index as the sort key. Takes both an int for single index or list for multiple criteria. Arguments \u00b6 Position Argument Type 1 src union Returns \u00b6 union","title":"sort"},{"location":"providers/Collections/sort/#sort","text":"Source Hook for sorting complex lists, dicts, or items within a key both in place or as output.","title":"sort"},{"location":"providers/Collections/sort/#inputs","text":"Name Type Default Required Description src union None True Either a list of strings or a dict with keys to sort and return the output or a string key_path to sort both in place or as output (see in_place ). in_place bool True False If the src is a string (ie a key path), then sort the item in place (ie replace original) and return None. src_is_key_path bool False False If the src is a list and is meant to be a key path. sep str / False For string src's, a separator for key path. index union None False If the input src is a list, use the index as the sort key. Takes both an int for single index or list for multiple criteria.","title":"Inputs"},{"location":"providers/Collections/sort/#arguments","text":"Position Argument Type 1 src union","title":"Arguments"},{"location":"providers/Collections/sort/#returns","text":"union","title":"Returns"},{"location":"providers/Command/","text":"command \u00b6 Source Run system commands. Inputs \u00b6 Name Type Default Required Description command str None True A shell command. ignore_error bool False False Ignore errors. multiline bool False False Don't automatically breakup lines Arguments \u00b6 Position Argument Type 1 command str Returns \u00b6 any Examples \u00b6 Basic \u00b6 The most minimal implementation. command_example-> : command echo 'here'","title":"Index"},{"location":"providers/Command/#command","text":"Source Run system commands.","title":"command"},{"location":"providers/Command/#inputs","text":"Name Type Default Required Description command str None True A shell command. ignore_error bool False False Ignore errors. multiline bool False False Don't automatically breakup lines","title":"Inputs"},{"location":"providers/Command/#arguments","text":"Position Argument Type 1 command str","title":"Arguments"},{"location":"providers/Command/#returns","text":"any","title":"Returns"},{"location":"providers/Command/#examples","text":"","title":"Examples"},{"location":"providers/Command/#basic","text":"The most minimal implementation. command_example-> : command echo 'here'","title":"Basic"},{"location":"providers/Console/","text":"Console Provider \u00b6 Hooks that print things to the console like tables and markdown via [rich] or print. Hooks \u00b6 Type Description Return markdown Hook for printing markdown and returning the output. None pprint Wraps python pprint builtin. Link NoneType print Hook for printing an input and returning the output. Link NoneType table Hook for creating tables with rich - github.com/willmcgugan/rich. None Requirements \u00b6 rich Examples \u00b6 print \u00b6 Print to console compact-> : print stuff and things print \u00b6 Print to console stuff : and : things compact-> : pprint \"{{ stuff }}\" markdown \u00b6 Print markdown to console compact-> : | markdown \"# A title\" Section with things expanded : -> : markdown text : | # Another title More sections with things \u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557 \u2551 A title \u2551 \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d Section with things \u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557 \u2551 Another title \u2551 \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d More sections with things table \u00b6 Print a table to the console column_names : - stuff - things data : - [ 'foo' , 'bar' ] - [ 'here' , 1 ] table : -> : table column_names : \"{{ column_names }}\" contents : \"{{ data }}\" \u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513 \u2503 stuff \u2503 things \u2503 \u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529 \u2502 foo \u2502 bar \u2502 \u2502 here \u2502 1 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518","title":"Index"},{"location":"providers/Console/#console-provider","text":"Hooks that print things to the console like tables and markdown via [rich] or print.","title":"Console Provider"},{"location":"providers/Console/#hooks","text":"Type Description Return markdown Hook for printing markdown and returning the output. None pprint Wraps python pprint builtin. Link NoneType print Hook for printing an input and returning the output. Link NoneType table Hook for creating tables with rich - github.com/willmcgugan/rich. None","title":"Hooks"},{"location":"providers/Console/#requirements","text":"rich","title":"Requirements"},{"location":"providers/Console/#examples","text":"","title":"Examples"},{"location":"providers/Console/#print","text":"Print to console compact-> : print stuff and things","title":"print"},{"location":"providers/Console/#print_1","text":"Print to console stuff : and : things compact-> : pprint \"{{ stuff }}\"","title":"print"},{"location":"providers/Console/#markdown","text":"Print markdown to console compact-> : | markdown \"# A title\" Section with things expanded : -> : markdown text : | # Another title More sections with things \u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557 \u2551 A title \u2551 \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d Section with things \u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557 \u2551 Another title \u2551 \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d More sections with things","title":"markdown"},{"location":"providers/Console/#table","text":"Print a table to the console column_names : - stuff - things data : - [ 'foo' , 'bar' ] - [ 'here' , 1 ] table : -> : table column_names : \"{{ column_names }}\" contents : \"{{ data }}\" \u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513 \u2503 stuff \u2503 things \u2503 \u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529 \u2502 foo \u2502 bar \u2502 \u2502 here \u2502 1 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518","title":"table"},{"location":"providers/Console/markdown/","text":"markdown \u00b6 Source Hook for printing markdown and returning the output. Inputs \u00b6 Name Type Default Required Description text str None True The text to render as markdown. justify str None False Justify value for paragraphs. Defaults to None. Arguments \u00b6 Position Argument Type 1 text str Returns \u00b6 None Examples \u00b6 Basic markdown \u00b6 Markdown doesn't render perfectly in the terminal but it is real markdown. compact-> : | markdown \"# A title\" Section with things expanded : -> : markdown text : | # Another title More sections with things \u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557 \u2551 A title \u2551 \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d Section with things \u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557 \u2551 Another title \u2551 \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d More sections with things All section types with markdown \u00b6 Example with with many section headers. Note output headers will have additional formatting in console. expanded : -> : markdown text : | # Header Stuff and things ## Second header Stuff and things ### Third header Stuff and things #### Fourth header Stuff and things ##### Fifth header Stuff and things \u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557 \u2551 Header \u2551 \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d Stuff and things Second header Stuff and things Third header Stuff and things Fourth header Stuff and things Fifth header Stuff and things","title":"markdown"},{"location":"providers/Console/markdown/#markdown","text":"Source Hook for printing markdown and returning the output.","title":"markdown"},{"location":"providers/Console/markdown/#inputs","text":"Name Type Default Required Description text str None True The text to render as markdown. justify str None False Justify value for paragraphs. Defaults to None.","title":"Inputs"},{"location":"providers/Console/markdown/#arguments","text":"Position Argument Type 1 text str","title":"Arguments"},{"location":"providers/Console/markdown/#returns","text":"None","title":"Returns"},{"location":"providers/Console/markdown/#examples","text":"","title":"Examples"},{"location":"providers/Console/markdown/#basic-markdown","text":"Markdown doesn't render perfectly in the terminal but it is real markdown. compact-> : | markdown \"# A title\" Section with things expanded : -> : markdown text : | # Another title More sections with things \u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557 \u2551 A title \u2551 \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d Section with things \u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557 \u2551 Another title \u2551 \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d More sections with things","title":"Basic markdown"},{"location":"providers/Console/markdown/#all-section-types-with-markdown","text":"Example with with many section headers. Note output headers will have additional formatting in console. expanded : -> : markdown text : | # Header Stuff and things ## Second header Stuff and things ### Third header Stuff and things #### Fourth header Stuff and things ##### Fifth header Stuff and things \u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557 \u2551 Header \u2551 \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d Stuff and things Second header Stuff and things Third header Stuff and things Fourth header Stuff and things Fifth header Stuff and things","title":"All section types with markdown"},{"location":"providers/Console/pprint/","text":"pprint \u00b6 Source Wraps python pprint builtin. Link Inputs \u00b6 Name Type Default Required Description objects any None False The object to be pretty printed. indent int 1 False Specifies the amount of indentation added for each nesting level. width int 80 False Specifies the desired maximum number of characters per line in the output. If a structure cannot be formatted within the width constraint, a best effort will be made. depth int None False Controls the number of nesting levels which may be printed; if the data structure being printed is too deep, the next contained level is replaced by .... By default, there is no constraint on the depth of the objects being formatted. compact bool False False Impacts the way that long sequences (lists, tuples, sets, etc) are formatted. If compact is false (the default) then each item of a sequence will be formatted on a separate line. If compact is true, as many items as will fit within the width will be formatted on each output line. sort_dicts bool True False If sort_dicts is true (the default), dictionaries will be formatted with their keys sorted, otherwise they will display in insertion order. underscore_numbers bool False False If underscore_numbers is true, integers will be formatted with the _ character for a thousands separator, otherwise underscores are not displayed (the default). Arguments \u00b6 Position Argument Type 1 objects any Returns \u00b6 NoneType Examples \u00b6 Basic pprint \u00b6 stuff : and : things pprint-> : pprint \"{{ stuff }}\" # Will pretty print `and: things`","title":"pprint"},{"location":"providers/Console/pprint/#pprint","text":"Source Wraps python pprint builtin. Link","title":"pprint"},{"location":"providers/Console/pprint/#inputs","text":"Name Type Default Required Description objects any None False The object to be pretty printed. indent int 1 False Specifies the amount of indentation added for each nesting level. width int 80 False Specifies the desired maximum number of characters per line in the output. If a structure cannot be formatted within the width constraint, a best effort will be made. depth int None False Controls the number of nesting levels which may be printed; if the data structure being printed is too deep, the next contained level is replaced by .... By default, there is no constraint on the depth of the objects being formatted. compact bool False False Impacts the way that long sequences (lists, tuples, sets, etc) are formatted. If compact is false (the default) then each item of a sequence will be formatted on a separate line. If compact is true, as many items as will fit within the width will be formatted on each output line. sort_dicts bool True False If sort_dicts is true (the default), dictionaries will be formatted with their keys sorted, otherwise they will display in insertion order. underscore_numbers bool False False If underscore_numbers is true, integers will be formatted with the _ character for a thousands separator, otherwise underscores are not displayed (the default).","title":"Inputs"},{"location":"providers/Console/pprint/#arguments","text":"Position Argument Type 1 objects any","title":"Arguments"},{"location":"providers/Console/pprint/#returns","text":"NoneType","title":"Returns"},{"location":"providers/Console/pprint/#examples","text":"","title":"Examples"},{"location":"providers/Console/pprint/#basic-pprint","text":"stuff : and : things pprint-> : pprint \"{{ stuff }}\" # Will pretty print `and: things`","title":"Basic pprint"},{"location":"providers/Console/print/","text":"print \u00b6 Source Hook for printing an input and returning the output. Link Inputs \u00b6 Name Type Default Required Description objects any None False The objects to print. sep str False Separator between printed objects. end str '\\n' False What to print at the end flush bool False False No clue. Arguments \u00b6 Position Argument Type 1 objects any Returns \u00b6 NoneType Examples \u00b6 Compact print - most common use \u00b6 compact-> : print stuff and things Expanded print \u00b6 expanded : -> : print objects : stuff and end : \" \" Output: stuff and things","title":"print"},{"location":"providers/Console/print/#print","text":"Source Hook for printing an input and returning the output. Link","title":"print"},{"location":"providers/Console/print/#inputs","text":"Name Type Default Required Description objects any None False The objects to print. sep str False Separator between printed objects. end str '\\n' False What to print at the end flush bool False False No clue.","title":"Inputs"},{"location":"providers/Console/print/#arguments","text":"Position Argument Type 1 objects any","title":"Arguments"},{"location":"providers/Console/print/#returns","text":"NoneType","title":"Returns"},{"location":"providers/Console/print/#examples","text":"","title":"Examples"},{"location":"providers/Console/print/#compact-print-most-common-use","text":"compact-> : print stuff and things","title":"Compact print - most common use"},{"location":"providers/Console/print/#expanded-print","text":"expanded : -> : print objects : stuff and end : \" \" Output: stuff and things","title":"Expanded print"},{"location":"providers/Console/table/","text":"table \u00b6 Source Hook for creating tables with rich - github.com/willmcgugan/rich. Inputs \u00b6 Name Type Default Required Description column_names T [] False List of column names sort bool False False Boolean to sort contents or contents_split contents any None False List of lists to put into columns / rows contents_split T None False List of strings to separate into columns based on separator separator str None False A string to separate the strings in the contents Returns \u00b6 None Examples \u00b6 Basic table \u00b6 Creating a table example that shows in the terminal column_names : - stuff - things data : - [ 'foo' , 'bar' ] - [ 'here' , 1 ] table : -> : table column_names : \"{{ column_names }}\" contents : \"{{ data }}\" \u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513 \u2503 stuff \u2503 things \u2503 \u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529 \u2502 foo \u2502 bar \u2502 \u2502 here \u2502 1 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518","title":"table"},{"location":"providers/Console/table/#table","text":"Source Hook for creating tables with rich - github.com/willmcgugan/rich.","title":"table"},{"location":"providers/Console/table/#inputs","text":"Name Type Default Required Description column_names T [] False List of column names sort bool False False Boolean to sort contents or contents_split contents any None False List of lists to put into columns / rows contents_split T None False List of strings to separate into columns based on separator separator str None False A string to separate the strings in the contents","title":"Inputs"},{"location":"providers/Console/table/#returns","text":"None","title":"Returns"},{"location":"providers/Console/table/#examples","text":"","title":"Examples"},{"location":"providers/Console/table/#basic-table","text":"Creating a table example that shows in the terminal column_names : - stuff - things data : - [ 'foo' , 'bar' ] - [ 'here' , 1 ] table : -> : table column_names : \"{{ column_names }}\" contents : \"{{ data }}\" \u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513 \u2503 stuff \u2503 things \u2503 \u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529 \u2502 foo \u2502 bar \u2502 \u2502 here \u2502 1 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518","title":"Basic table"},{"location":"providers/Context/","text":"Context Provider \u00b6 Hooks that change the context, ie the portion of the tackle file that has been parsed sequentially. Allows referencing of nested keys. Hooks \u00b6 Type Description Return append Hook for updating dict objects with items. union delete Hook for getting a key based on a key path which is a list with keys and numbers for indexes in a list. NoneType get Hook for getting a key based on a key path which is a list with keys and numbers for indexes in a list. None keys Hook for returning the keys of a dict as a list. union pop Hook for removing ( pop ) a key from a dict or item from a list based on index.Follows python's pop union set Hook for setting a key based on a key path which is a list with keys and numbers for indexes in a list. None update Hook for updating dict objects with values. union values Hook for returning the values of a dict as a list. union Examples \u00b6 set \u00b6 Set a previous key based on a key path stuff : and : things set_> : set stuff/and other-stuff stuff : and : other-stuff get \u00b6 Get a previous key based on a key path stuff : and : things get-> : get stuff/and stuff : and : things get : things delete \u00b6 Delete a previous key based on a key path stuff : and : things delete_> : delete stuff/and/things stuff : and : pop \u00b6 Removes an item from a list or key from a map in place based or with a result path : to : list : - stuff - things result-> : pop {{path.to.list}} remove in place_> : pop path/to/list 0 path : to : list : - things result : - stuff append \u00b6 Appends an item to a list in place or with a result list : - stuff result-> : append {{path.to.list}} things append in place_> : append path/to/list 0 list : - stuff - things result : - stuff - things keys \u00b6 Get the keys from a dict path : to : map : stuff : 1 things : 2 map_keys-> : keys path/to/map path : to : map : stuff : things foo : bar map_keys : - stuff - things","title":"Index"},{"location":"providers/Context/#context-provider","text":"Hooks that change the context, ie the portion of the tackle file that has been parsed sequentially. Allows referencing of nested keys.","title":"Context Provider"},{"location":"providers/Context/#hooks","text":"Type Description Return append Hook for updating dict objects with items. union delete Hook for getting a key based on a key path which is a list with keys and numbers for indexes in a list. NoneType get Hook for getting a key based on a key path which is a list with keys and numbers for indexes in a list. None keys Hook for returning the keys of a dict as a list. union pop Hook for removing ( pop ) a key from a dict or item from a list based on index.Follows python's pop union set Hook for setting a key based on a key path which is a list with keys and numbers for indexes in a list. None update Hook for updating dict objects with values. union values Hook for returning the values of a dict as a list. union","title":"Hooks"},{"location":"providers/Context/#examples","text":"","title":"Examples"},{"location":"providers/Context/#set","text":"Set a previous key based on a key path stuff : and : things set_> : set stuff/and other-stuff stuff : and : other-stuff","title":"set"},{"location":"providers/Context/#get","text":"Get a previous key based on a key path stuff : and : things get-> : get stuff/and stuff : and : things get : things","title":"get"},{"location":"providers/Context/#delete","text":"Delete a previous key based on a key path stuff : and : things delete_> : delete stuff/and/things stuff : and :","title":"delete"},{"location":"providers/Context/#pop","text":"Removes an item from a list or key from a map in place based or with a result path : to : list : - stuff - things result-> : pop {{path.to.list}} remove in place_> : pop path/to/list 0 path : to : list : - things result : - stuff","title":"pop"},{"location":"providers/Context/#append","text":"Appends an item to a list in place or with a result list : - stuff result-> : append {{path.to.list}} things append in place_> : append path/to/list 0 list : - stuff - things result : - stuff - things","title":"append"},{"location":"providers/Context/#keys","text":"Get the keys from a dict path : to : map : stuff : 1 things : 2 map_keys-> : keys path/to/map path : to : map : stuff : things foo : bar map_keys : - stuff - things","title":"keys"},{"location":"providers/Context/append/","text":"append \u00b6 Source Hook for updating dict objects with items. Inputs \u00b6 Name Type Default Required Description src union None True A list append to and output the result or a str with separators or list for a key path to the element to append to within the context. src_is_key_path bool False False If the src is a list and is meant to be a key path. sep str / False For string src's, a separator for key path. item any None True An item to append to a list. Arguments \u00b6 Position Argument Type 1 src union 2 item any Returns \u00b6 union Examples \u00b6 Taking a literal input list : - stuff result-> : append {{path.to.list}} things list : - stuff result : - stuff - things Or modifying the context list : - stuff append in place_> : append path/to/list 0 list : - stuff - things Expanded in place list : - stuff append in place : _> : append src : path/to/list item : things list : - stuff - things Expanded literal list : - stuff appended : _> : append src : \"{{list}}\" item : things list : - stuff appended : - stuff - things","title":"append"},{"location":"providers/Context/append/#append","text":"Source Hook for updating dict objects with items.","title":"append"},{"location":"providers/Context/append/#inputs","text":"Name Type Default Required Description src union None True A list append to and output the result or a str with separators or list for a key path to the element to append to within the context. src_is_key_path bool False False If the src is a list and is meant to be a key path. sep str / False For string src's, a separator for key path. item any None True An item to append to a list.","title":"Inputs"},{"location":"providers/Context/append/#arguments","text":"Position Argument Type 1 src union 2 item any","title":"Arguments"},{"location":"providers/Context/append/#returns","text":"union","title":"Returns"},{"location":"providers/Context/append/#examples","text":"Taking a literal input list : - stuff result-> : append {{path.to.list}} things list : - stuff result : - stuff - things Or modifying the context list : - stuff append in place_> : append path/to/list 0 list : - stuff - things Expanded in place list : - stuff append in place : _> : append src : path/to/list item : things list : - stuff - things Expanded literal list : - stuff appended : _> : append src : \"{{list}}\" item : things list : - stuff appended : - stuff - things","title":"Examples"},{"location":"providers/Context/delete/","text":"delete \u00b6 Source Hook for getting a key based on a key path which is a list with keys and numbers for indexes in a list. Inputs \u00b6 Name Type Default Required Description path union None True A list or string with a separator for the path to the value you want to update with strings for keys and ints for indexes in the list. sep str / False For string paths, a separator for key path. Arguments \u00b6 Position Argument Type 1 path union Returns \u00b6 NoneType Examples \u00b6 Delete a key based on a key path one : - that : stuff : things two : - that : stuff : things three : - that : stuff : things deleter_list : -> : delete path : - one - 0 - that - stuff deleter_str : -> : delete path : two/0/that/stuff deleter_str_sep : -> : delete path : three.0.that.stuff sep : .","title":"delete"},{"location":"providers/Context/delete/#delete","text":"Source Hook for getting a key based on a key path which is a list with keys and numbers for indexes in a list.","title":"delete"},{"location":"providers/Context/delete/#inputs","text":"Name Type Default Required Description path union None True A list or string with a separator for the path to the value you want to update with strings for keys and ints for indexes in the list. sep str / False For string paths, a separator for key path.","title":"Inputs"},{"location":"providers/Context/delete/#arguments","text":"Position Argument Type 1 path union","title":"Arguments"},{"location":"providers/Context/delete/#returns","text":"NoneType","title":"Returns"},{"location":"providers/Context/delete/#examples","text":"Delete a key based on a key path one : - that : stuff : things two : - that : stuff : things three : - that : stuff : things deleter_list : -> : delete path : - one - 0 - that - stuff deleter_str : -> : delete path : two/0/that/stuff deleter_str_sep : -> : delete path : three.0.that.stuff sep : .","title":"Examples"},{"location":"providers/Context/get/","text":"get \u00b6 Source Hook for getting a key based on a key path which is a list with keys and numbers for indexes in a list. Inputs \u00b6 Name Type Default Required Description path union None True A list or string with a separator for the path to the value you want to update with strings for keys and ints for indexes in the list. sep str / False For string paths, a separator for key path. Arguments \u00b6 Position Argument Type 1 path union Returns \u00b6 None Examples \u00b6 Get a key based on a key path stuff : and : things get-> : get stuff/and stuff : and : things get : things","title":"get"},{"location":"providers/Context/get/#get","text":"Source Hook for getting a key based on a key path which is a list with keys and numbers for indexes in a list.","title":"get"},{"location":"providers/Context/get/#inputs","text":"Name Type Default Required Description path union None True A list or string with a separator for the path to the value you want to update with strings for keys and ints for indexes in the list. sep str / False For string paths, a separator for key path.","title":"Inputs"},{"location":"providers/Context/get/#arguments","text":"Position Argument Type 1 path union","title":"Arguments"},{"location":"providers/Context/get/#returns","text":"None","title":"Returns"},{"location":"providers/Context/get/#examples","text":"Get a key based on a key path stuff : and : things get-> : get stuff/and stuff : and : things get : things","title":"Examples"},{"location":"providers/Context/keys/","text":"keys \u00b6 Source Hook for returning the keys of a dict as a list. Inputs \u00b6 Name Type Default Required Description src union None True A dict to get the keys from and output the result or a str with separators or list for a key path to the element to get the keys from within the context. sep str / False For string src's, a separator for key path. Arguments \u00b6 Position Argument Type 1 src union Returns \u00b6 union","title":"keys"},{"location":"providers/Context/keys/#keys","text":"Source Hook for returning the keys of a dict as a list.","title":"keys"},{"location":"providers/Context/keys/#inputs","text":"Name Type Default Required Description src union None True A dict to get the keys from and output the result or a str with separators or list for a key path to the element to get the keys from within the context. sep str / False For string src's, a separator for key path.","title":"Inputs"},{"location":"providers/Context/keys/#arguments","text":"Position Argument Type 1 src union","title":"Arguments"},{"location":"providers/Context/keys/#returns","text":"union","title":"Returns"},{"location":"providers/Context/pop/","text":"pop \u00b6 Source Hook for removing ( pop ) a key from a dict or item from a list based on index.Follows python's pop Inputs \u00b6 Name Type Default Required Description src union None True A list to remove an item from or dict to remove a key and output the result or a str with separators or list for a key path to the item operate on within the context. src_is_key_path bool False False If the src is a list and is meant to be a key path. item union None False A string for a key to remove from a dict src or integer for an index to remove from a list src . sep str / False For string src's, a separator for key path. Arguments \u00b6 Position Argument Type 1 src union 2 item union Returns \u00b6 union Examples \u00b6 Removes an item from a list list : - stuff - things new_list-> : pop \"{{list}}\" 1 list : - stuff - things new_list : - stuff Removes an item from a list in place based on a path path : to : list : - stuff - things remove in place_> : pop path/to/list 0 path : to : list : - things List pop in place expanded path : to : list : - stuff - things remove in place : _> : pop src : path/to/list item : 0 path : to : list : - things","title":"pop"},{"location":"providers/Context/pop/#pop","text":"Source Hook for removing ( pop ) a key from a dict or item from a list based on index.Follows python's pop","title":"pop"},{"location":"providers/Context/pop/#inputs","text":"Name Type Default Required Description src union None True A list to remove an item from or dict to remove a key and output the result or a str with separators or list for a key path to the item operate on within the context. src_is_key_path bool False False If the src is a list and is meant to be a key path. item union None False A string for a key to remove from a dict src or integer for an index to remove from a list src . sep str / False For string src's, a separator for key path.","title":"Inputs"},{"location":"providers/Context/pop/#arguments","text":"Position Argument Type 1 src union 2 item union","title":"Arguments"},{"location":"providers/Context/pop/#returns","text":"union","title":"Returns"},{"location":"providers/Context/pop/#examples","text":"Removes an item from a list list : - stuff - things new_list-> : pop \"{{list}}\" 1 list : - stuff - things new_list : - stuff Removes an item from a list in place based on a path path : to : list : - stuff - things remove in place_> : pop path/to/list 0 path : to : list : - things List pop in place expanded path : to : list : - stuff - things remove in place : _> : pop src : path/to/list item : 0 path : to : list : - things","title":"Examples"},{"location":"providers/Context/set/","text":"set \u00b6 Source Hook for setting a key based on a key path which is a list with keys and numbers for indexes in a list. Inputs \u00b6 Name Type Default Required Description path any None True A list or string with a separator for the path to the value you want to update with strings for keys and ints for indexes in the list. value any None True The value to update the key with. sep str / False For string paths, a separator for key path. Arguments \u00b6 Position Argument Type 1 path any 2 value any Returns \u00b6 None","title":"set"},{"location":"providers/Context/set/#set","text":"Source Hook for setting a key based on a key path which is a list with keys and numbers for indexes in a list.","title":"set"},{"location":"providers/Context/set/#inputs","text":"Name Type Default Required Description path any None True A list or string with a separator for the path to the value you want to update with strings for keys and ints for indexes in the list. value any None True The value to update the key with. sep str / False For string paths, a separator for key path.","title":"Inputs"},{"location":"providers/Context/set/#arguments","text":"Position Argument Type 1 path any 2 value any","title":"Arguments"},{"location":"providers/Context/set/#returns","text":"None","title":"Returns"},{"location":"providers/Context/update/","text":"update \u00b6 Source Hook for updating dict objects with values. Inputs \u00b6 Name Type Default Required Description src union None True A dict to update and output the result or a str with separators or list for a key path to the item update within the context. input any None False The value to update the input src . sep str / False For string src's, a separator for key path. Arguments \u00b6 Position Argument Type 1 src union 2 input any Returns \u00b6 union Examples \u00b6 Update a map with a string and a map in place input : map : stuff : things update with string in place_> : update input/map \"more things\" update with map in place_> : update input/map {'foo':'bar'} input : map : stuff : more things foo : bar Update a map with another map in place \u00b6 input : map : stuff : things update in place_> : update input/map {'foo':'bar'} input : map : stuff : things foo : bar","title":"update"},{"location":"providers/Context/update/#update","text":"Source Hook for updating dict objects with values.","title":"update"},{"location":"providers/Context/update/#inputs","text":"Name Type Default Required Description src union None True A dict to update and output the result or a str with separators or list for a key path to the item update within the context. input any None False The value to update the input src . sep str / False For string src's, a separator for key path.","title":"Inputs"},{"location":"providers/Context/update/#arguments","text":"Position Argument Type 1 src union 2 input any","title":"Arguments"},{"location":"providers/Context/update/#returns","text":"union","title":"Returns"},{"location":"providers/Context/update/#examples","text":"Update a map with a string and a map in place input : map : stuff : things update with string in place_> : update input/map \"more things\" update with map in place_> : update input/map {'foo':'bar'} input : map : stuff : more things foo : bar","title":"Examples"},{"location":"providers/Context/update/#update-a-map-with-another-map-in-place","text":"input : map : stuff : things update in place_> : update input/map {'foo':'bar'} input : map : stuff : things foo : bar","title":"Update a map with another map in place"},{"location":"providers/Context/values/","text":"values \u00b6 Source Hook for returning the values of a dict as a list. Inputs \u00b6 Name Type Default Required Description src union None True A dict to get the values from and output the result or a str with separators or list for a key path to the element to get the values from within the context. sep str / False For string src's, a separator for key path. Arguments \u00b6 Position Argument Type 1 src union Returns \u00b6 union","title":"values"},{"location":"providers/Context/values/#values","text":"Source Hook for returning the values of a dict as a list.","title":"values"},{"location":"providers/Context/values/#inputs","text":"Name Type Default Required Description src union None True A dict to get the values from and output the result or a str with separators or list for a key path to the element to get the values from within the context. sep str / False For string src's, a separator for key path.","title":"Inputs"},{"location":"providers/Context/values/#arguments","text":"Position Argument Type 1 src union","title":"Arguments"},{"location":"providers/Context/values/#returns","text":"union","title":"Returns"},{"location":"providers/Environment/","text":"Environment Provider \u00b6 Operate to environment variables Hooks \u00b6 Type Description Return export Hook for setting environment variables that returns None. None get_env Hook for getting environment variables. None set_env Hook for setting environment variables. None unset Hook for unsetting environment variables. None Examples \u00b6 get_env \u00b6 Get environment variables compact-> : get_env ENV_VAR expanded : -> : get_env environment_variable : ENV_VAR set_env \u00b6 Set environment variables compact-> : set_env ENV_VAR VALUE expanded : -> : set_env environment_variable : ENV_VAR value : VALUE unset \u00b6 Unset environment variables compact-> : unset ENV_VAR expanded : -> : unset environment_variable : ENV_VAR export \u00b6 Setting / getting environment variables compact-> : export ENV_VAR VALUE expanded : -> : export environment_variable : ENV_VAR value : VALUE","title":"Index"},{"location":"providers/Environment/#environment-provider","text":"Operate to environment variables","title":"Environment Provider"},{"location":"providers/Environment/#hooks","text":"Type Description Return export Hook for setting environment variables that returns None. None get_env Hook for getting environment variables. None set_env Hook for setting environment variables. None unset Hook for unsetting environment variables. None","title":"Hooks"},{"location":"providers/Environment/#examples","text":"","title":"Examples"},{"location":"providers/Environment/#get_env","text":"Get environment variables compact-> : get_env ENV_VAR expanded : -> : get_env environment_variable : ENV_VAR","title":"get_env"},{"location":"providers/Environment/#set_env","text":"Set environment variables compact-> : set_env ENV_VAR VALUE expanded : -> : set_env environment_variable : ENV_VAR value : VALUE","title":"set_env"},{"location":"providers/Environment/#unset","text":"Unset environment variables compact-> : unset ENV_VAR expanded : -> : unset environment_variable : ENV_VAR","title":"unset"},{"location":"providers/Environment/#export","text":"Setting / getting environment variables compact-> : export ENV_VAR VALUE expanded : -> : export environment_variable : ENV_VAR value : VALUE","title":"export"},{"location":"providers/Environment/export/","text":"export \u00b6 Source Hook for setting environment variables that returns None. Inputs \u00b6 Name Type Default Required Description environment_variable str None True The name of the environment variable to set. value str None False The value to set it. Arguments \u00b6 Position Argument Type 1 environment_variable str 2 value str Returns \u00b6 None Examples \u00b6 export \u00b6 compact-> : export ENV_VAR VALUE expanded : -> : export environment_variable : ENV_VAR value : VALUE","title":"export"},{"location":"providers/Environment/export/#export","text":"Source Hook for setting environment variables that returns None.","title":"export"},{"location":"providers/Environment/export/#inputs","text":"Name Type Default Required Description environment_variable str None True The name of the environment variable to set. value str None False The value to set it.","title":"Inputs"},{"location":"providers/Environment/export/#arguments","text":"Position Argument Type 1 environment_variable str 2 value str","title":"Arguments"},{"location":"providers/Environment/export/#returns","text":"None","title":"Returns"},{"location":"providers/Environment/export/#examples","text":"","title":"Examples"},{"location":"providers/Environment/export/#export_1","text":"compact-> : export ENV_VAR VALUE expanded : -> : export environment_variable : ENV_VAR value : VALUE","title":"export"},{"location":"providers/Environment/get_env/","text":"get_env \u00b6 Source Hook for getting environment variables. Inputs \u00b6 Name Type Default Required Description environment_variable str None False Dict for setting and string for getting environment variables fallback str None False A fallback for getting. Arguments \u00b6 Position Argument Type 1 environment_variable str 2 fallback str Returns \u00b6 None Examples \u00b6 Basic implementation \u00b6 compact-> : get_env ENV_VAR expanded : -> : get_env environment_variable : ENV_VAR","title":"get_env"},{"location":"providers/Environment/get_env/#get_env","text":"Source Hook for getting environment variables.","title":"get_env"},{"location":"providers/Environment/get_env/#inputs","text":"Name Type Default Required Description environment_variable str None False Dict for setting and string for getting environment variables fallback str None False A fallback for getting.","title":"Inputs"},{"location":"providers/Environment/get_env/#arguments","text":"Position Argument Type 1 environment_variable str 2 fallback str","title":"Arguments"},{"location":"providers/Environment/get_env/#returns","text":"None","title":"Returns"},{"location":"providers/Environment/get_env/#examples","text":"","title":"Examples"},{"location":"providers/Environment/get_env/#basic-implementation","text":"compact-> : get_env ENV_VAR expanded : -> : get_env environment_variable : ENV_VAR","title":"Basic implementation"},{"location":"providers/Environment/set_env/","text":"set_env \u00b6 Source Hook for setting environment variables. Inputs \u00b6 Name Type Default Required Description environment_variable str None True The name of the environment variable to set. value str None False The value to set it. Arguments \u00b6 Position Argument Type 1 environment_variable str 2 value str Returns \u00b6 None Examples \u00b6 Basic implementation \u00b6 compact-> : get_env ENV_VAR expanded : -> : get_env environment_variable : ENV_VAR","title":"set_env"},{"location":"providers/Environment/set_env/#set_env","text":"Source Hook for setting environment variables.","title":"set_env"},{"location":"providers/Environment/set_env/#inputs","text":"Name Type Default Required Description environment_variable str None True The name of the environment variable to set. value str None False The value to set it.","title":"Inputs"},{"location":"providers/Environment/set_env/#arguments","text":"Position Argument Type 1 environment_variable str 2 value str","title":"Arguments"},{"location":"providers/Environment/set_env/#returns","text":"None","title":"Returns"},{"location":"providers/Environment/set_env/#examples","text":"","title":"Examples"},{"location":"providers/Environment/set_env/#basic-implementation","text":"compact-> : get_env ENV_VAR expanded : -> : get_env environment_variable : ENV_VAR","title":"Basic implementation"},{"location":"providers/Environment/unset/","text":"unset \u00b6 Source Hook for unsetting environment variables. Inputs \u00b6 Name Type Default Required Description environment_variable str None True The name of the environment variable to set. Arguments \u00b6 Position Argument Type 1 environment_variable str Returns \u00b6 None Examples \u00b6 Basic implementation \u00b6 compact-> : unset ENV_VAR expanded : -> : unset environment_variable : ENV_VAR","title":"unset"},{"location":"providers/Environment/unset/#unset","text":"Source Hook for unsetting environment variables.","title":"unset"},{"location":"providers/Environment/unset/#inputs","text":"Name Type Default Required Description environment_variable str None True The name of the environment variable to set.","title":"Inputs"},{"location":"providers/Environment/unset/#arguments","text":"Position Argument Type 1 environment_variable str","title":"Arguments"},{"location":"providers/Environment/unset/#returns","text":"None","title":"Returns"},{"location":"providers/Environment/unset/#examples","text":"","title":"Examples"},{"location":"providers/Environment/unset/#basic-implementation","text":"compact-> : unset ENV_VAR expanded : -> : unset environment_variable : ENV_VAR","title":"Basic implementation"},{"location":"providers/Files/","text":"File Provider \u00b6 Hooks that operate on the files. Hooks \u00b6 Type Description Return chmod Hook removing a file or directory. :param src: String or list of sources, either directories or files:param dst: String for path to copy to:param create_path: Boolean to create the directory path if it does not exist. Defaults to true:return: None NoneType copy Hook coying a file/files or directory/directories to a location. :param src: String or list of sources, either a directories or files:param dst: String for path to copy to:param create_path: Boolean to create the directory path if it does not exist. Defaults to true:return: None NoneType create_file Hook to create an empty file - like touch. :param path: String or list of paths to create. union file Hook to read and write to a file. union move Hook for moving a directory or directories to a location. :param src: String or list of sources, either directories or files:param dst: String for path to copy to:param create_path: Boolean to create the directory path if it does not exist. Defaults to true:return: None NoneType remove Hook for removing a directory or directories. :param path: String or list of paths to remove:return: None NoneType shred Hook for shredding file/files. :param src: String or list of sources, either directories or files:param dst: String for path to copy to:param create_path: Boolean to create the directory path if it does not exist. Defaults to true:return: None NoneType unzipfile Hook to unzip a file. None zipfile Hook to zip a file or directory. None Examples \u00b6 copy \u00b6 Copy a file or directory single file compact-> : copy path/to/file output/path expanded : -> : jinja template : path/to/file output : output/path chmod \u00b6 Change directory permissions compact-> : chmod tackle.yaml \"0o600\" expanded : -> : chmod path : tackle.yaml mode : \"0o600\"","title":"Index"},{"location":"providers/Files/#file-provider","text":"Hooks that operate on the files.","title":"File Provider"},{"location":"providers/Files/#hooks","text":"Type Description Return chmod Hook removing a file or directory. :param src: String or list of sources, either directories or files:param dst: String for path to copy to:param create_path: Boolean to create the directory path if it does not exist. Defaults to true:return: None NoneType copy Hook coying a file/files or directory/directories to a location. :param src: String or list of sources, either a directories or files:param dst: String for path to copy to:param create_path: Boolean to create the directory path if it does not exist. Defaults to true:return: None NoneType create_file Hook to create an empty file - like touch. :param path: String or list of paths to create. union file Hook to read and write to a file. union move Hook for moving a directory or directories to a location. :param src: String or list of sources, either directories or files:param dst: String for path to copy to:param create_path: Boolean to create the directory path if it does not exist. Defaults to true:return: None NoneType remove Hook for removing a directory or directories. :param path: String or list of paths to remove:return: None NoneType shred Hook for shredding file/files. :param src: String or list of sources, either directories or files:param dst: String for path to copy to:param create_path: Boolean to create the directory path if it does not exist. Defaults to true:return: None NoneType unzipfile Hook to unzip a file. None zipfile Hook to zip a file or directory. None","title":"Hooks"},{"location":"providers/Files/#examples","text":"","title":"Examples"},{"location":"providers/Files/#copy","text":"Copy a file or directory single file compact-> : copy path/to/file output/path expanded : -> : jinja template : path/to/file output : output/path","title":"copy"},{"location":"providers/Files/#chmod","text":"Change directory permissions compact-> : chmod tackle.yaml \"0o600\" expanded : -> : chmod path : tackle.yaml mode : \"0o600\"","title":"chmod"},{"location":"providers/Files/chmod/","text":"chmod \u00b6 Source Hook removing a file or directory. :param src: String or list of sources, either directories or files:param dst: String for path to copy to:param create_path: Boolean to create the directory path if it does not exist. Defaults to true:return: None Inputs \u00b6 Name Type Default Required Description path union None True mode str None True Arguments \u00b6 Position Argument Type 1 path union 2 mode str Returns \u00b6 NoneType","title":"chmod"},{"location":"providers/Files/chmod/#chmod","text":"Source Hook removing a file or directory. :param src: String or list of sources, either directories or files:param dst: String for path to copy to:param create_path: Boolean to create the directory path if it does not exist. Defaults to true:return: None","title":"chmod"},{"location":"providers/Files/chmod/#inputs","text":"Name Type Default Required Description path union None True mode str None True","title":"Inputs"},{"location":"providers/Files/chmod/#arguments","text":"Position Argument Type 1 path union 2 mode str","title":"Arguments"},{"location":"providers/Files/chmod/#returns","text":"NoneType","title":"Returns"},{"location":"providers/Files/copy/","text":"copy \u00b6 Source Hook coying a file/files or directory/directories to a location. :param src: String or list of sources, either a directories or files:param dst: String for path to copy to:param create_path: Boolean to create the directory path if it does not exist. Defaults to true:return: None Inputs \u00b6 Name Type Default Required Description src union None True String or list of sources, either a directories or files dst str None True create_path bool True False Arguments \u00b6 Position Argument Type 1 src union 2 dst str Returns \u00b6 NoneType","title":"copy"},{"location":"providers/Files/copy/#copy","text":"Source Hook coying a file/files or directory/directories to a location. :param src: String or list of sources, either a directories or files:param dst: String for path to copy to:param create_path: Boolean to create the directory path if it does not exist. Defaults to true:return: None","title":"copy"},{"location":"providers/Files/copy/#inputs","text":"Name Type Default Required Description src union None True String or list of sources, either a directories or files dst str None True create_path bool True False","title":"Inputs"},{"location":"providers/Files/copy/#arguments","text":"Position Argument Type 1 src union 2 dst str","title":"Arguments"},{"location":"providers/Files/copy/#returns","text":"NoneType","title":"Returns"},{"location":"providers/Files/create_file/","text":"create_file \u00b6 Source Hook to create an empty file - like touch. :param path: String or list of paths to create. Inputs \u00b6 Name Type Default Required Description path union None True Arguments \u00b6 Position Argument Type 1 path union Returns \u00b6 union","title":"create_file"},{"location":"providers/Files/create_file/#create_file","text":"Source Hook to create an empty file - like touch. :param path: String or list of paths to create.","title":"create_file"},{"location":"providers/Files/create_file/#inputs","text":"Name Type Default Required Description path union None True","title":"Inputs"},{"location":"providers/Files/create_file/#arguments","text":"Position Argument Type 1 path union","title":"Arguments"},{"location":"providers/Files/create_file/#returns","text":"union","title":"Returns"},{"location":"providers/Files/file/","text":"file \u00b6 Source Hook to read and write to a file. Inputs \u00b6 Name Type Default Required Description path str None True Path to read or write file. contents any None False If writing to file, the contents to write. Arguments \u00b6 Position Argument Type 1 path str 2 contents any Returns \u00b6 union","title":"file"},{"location":"providers/Files/file/#file","text":"Source Hook to read and write to a file.","title":"file"},{"location":"providers/Files/file/#inputs","text":"Name Type Default Required Description path str None True Path to read or write file. contents any None False If writing to file, the contents to write.","title":"Inputs"},{"location":"providers/Files/file/#arguments","text":"Position Argument Type 1 path str 2 contents any","title":"Arguments"},{"location":"providers/Files/file/#returns","text":"union","title":"Returns"},{"location":"providers/Files/move/","text":"move \u00b6 Source Hook for moving a directory or directories to a location. :param src: String or list of sources, either directories or files:param dst: String for path to copy to:param create_path: Boolean to create the directory path if it does not exist. Defaults to true:return: None Inputs \u00b6 Name Type Default Required Description src union None True create_path bool True False dst str None True Arguments \u00b6 Position Argument Type 1 src union 2 dst str Returns \u00b6 NoneType","title":"move"},{"location":"providers/Files/move/#move","text":"Source Hook for moving a directory or directories to a location. :param src: String or list of sources, either directories or files:param dst: String for path to copy to:param create_path: Boolean to create the directory path if it does not exist. Defaults to true:return: None","title":"move"},{"location":"providers/Files/move/#inputs","text":"Name Type Default Required Description src union None True create_path bool True False dst str None True","title":"Inputs"},{"location":"providers/Files/move/#arguments","text":"Position Argument Type 1 src union 2 dst str","title":"Arguments"},{"location":"providers/Files/move/#returns","text":"NoneType","title":"Returns"},{"location":"providers/Files/remove/","text":"remove \u00b6 Source Hook for removing a directory or directories. :param path: String or list of paths to remove:return: None Inputs \u00b6 Name Type Default Required Description path union None True fail_silently bool False False Arguments \u00b6 Position Argument Type 1 path union Returns \u00b6 NoneType","title":"remove"},{"location":"providers/Files/remove/#remove","text":"Source Hook for removing a directory or directories. :param path: String or list of paths to remove:return: None","title":"remove"},{"location":"providers/Files/remove/#inputs","text":"Name Type Default Required Description path union None True fail_silently bool False False","title":"Inputs"},{"location":"providers/Files/remove/#arguments","text":"Position Argument Type 1 path union","title":"Arguments"},{"location":"providers/Files/remove/#returns","text":"NoneType","title":"Returns"},{"location":"providers/Files/shred/","text":"shred \u00b6 Source Hook for shredding file/files. :param src: String or list of sources, either directories or files:param dst: String for path to copy to:param create_path: Boolean to create the directory path if it does not exist. Defaults to true:return: None Inputs \u00b6 Name Type Default Required Description src union None True passes int 10 False Arguments \u00b6 Position Argument Type 1 src union 2 passes int Returns \u00b6 NoneType","title":"shred"},{"location":"providers/Files/shred/#shred","text":"Source Hook for shredding file/files. :param src: String or list of sources, either directories or files:param dst: String for path to copy to:param create_path: Boolean to create the directory path if it does not exist. Defaults to true:return: None","title":"shred"},{"location":"providers/Files/shred/#inputs","text":"Name Type Default Required Description src union None True passes int 10 False","title":"Inputs"},{"location":"providers/Files/shred/#arguments","text":"Position Argument Type 1 src union 2 passes int","title":"Arguments"},{"location":"providers/Files/shred/#returns","text":"NoneType","title":"Returns"},{"location":"providers/Files/unzipfile/","text":"unzipfile \u00b6 Source Hook to unzip a file. Inputs \u00b6 Name Type Default Required Description input str None True Input path output str . False Output path, default to current directory Returns \u00b6 None","title":"unzipfile"},{"location":"providers/Files/unzipfile/#unzipfile","text":"Source Hook to unzip a file.","title":"unzipfile"},{"location":"providers/Files/unzipfile/#inputs","text":"Name Type Default Required Description input str None True Input path output str . False Output path, default to current directory","title":"Inputs"},{"location":"providers/Files/unzipfile/#returns","text":"None","title":"Returns"},{"location":"providers/Files/zipfile/","text":"zipfile \u00b6 Source Hook to zip a file or directory. Inputs \u00b6 Name Type Default Required Description input str None True Input path output str None True Output path Returns \u00b6 None","title":"zipfile"},{"location":"providers/Files/zipfile/#zipfile","text":"Source Hook to zip a file or directory.","title":"zipfile"},{"location":"providers/Files/zipfile/#inputs","text":"Name Type Default Required Description input str None True Input path output str None True Output path","title":"Inputs"},{"location":"providers/Files/zipfile/#returns","text":"None","title":"Returns"},{"location":"providers/Generate/","text":"Generate Provider \u00b6 Hooks that generate files through jinja templating. Hooks \u00b6 Type Description Return generate Hook for generating project outputs. Recursively renders all files and folders in agiven target directory to an output. If there is a \"templates\" directory and a fileor directory that matches the templates input param, use that as target. None jinja Hook for jinja templates. If given an output , the rendered contents are output to a file, otherwise the rendered contents are output as a string. str Examples \u00b6 jinja \u00b6 Render a single file compact-> : jinja path/to/template/file.tpl output/path.py expanded : -> : jinja template : path/to/template/file.tpl ouput : output/path.py generate \u00b6 Recursively render a directory stuff : things # Arbitrary context compact-> : generate path/to/template/file/or/dir output/path expanded : -> : jinja template : path/to/template/file/or/dir output : output/path","title":"Index"},{"location":"providers/Generate/#generate-provider","text":"Hooks that generate files through jinja templating.","title":"Generate Provider"},{"location":"providers/Generate/#hooks","text":"Type Description Return generate Hook for generating project outputs. Recursively renders all files and folders in agiven target directory to an output. If there is a \"templates\" directory and a fileor directory that matches the templates input param, use that as target. None jinja Hook for jinja templates. If given an output , the rendered contents are output to a file, otherwise the rendered contents are output as a string. str","title":"Hooks"},{"location":"providers/Generate/#examples","text":"","title":"Examples"},{"location":"providers/Generate/#jinja","text":"Render a single file compact-> : jinja path/to/template/file.tpl output/path.py expanded : -> : jinja template : path/to/template/file.tpl ouput : output/path.py","title":"jinja"},{"location":"providers/Generate/#generate","text":"Recursively render a directory stuff : things # Arbitrary context compact-> : generate path/to/template/file/or/dir output/path expanded : -> : jinja template : path/to/template/file/or/dir output : output/path","title":"generate"},{"location":"providers/Generate/generate/","text":"generate \u00b6 Source Hook for generating project outputs. Recursively renders all files and folders in agiven target directory to an output. If there is a \"templates\" directory and a fileor directory that matches the templates input param, use that as target. Inputs \u00b6 Name Type Default Required Description templates union templates False Path or list of paths to a templatable directory or file to recursively render the contents. output str . False Path to put the output file(s). copy_without_render union [] False List of path to files to only copy and not render. overwrite_if_exists bool False False Overwrite the output if exists. skip_if_file_exists bool False False Skip creating if path exists. render_context dict None False A render context that invalidates the default context. extra_context union None False A map / list of maps to use as extra context when rendering. Lists inputs are merged together as lists themselves don't make sense. file_system_loader union . False List of paths or string path to directory with templates to load from. Docs . Arguments \u00b6 Position Argument Type 1 templates union 2 output str Returns \u00b6 None Examples \u00b6 Basic \u00b6 The most minimal implementation. stuff : things generate_example-> : generate path/to/template/file/or/dir output/path With specific context \u00b6 generate with specific context : _> : generate templates : path/to/template/file/or/dir output : output/path render_context : stuff : things With extra context \u00b6 stuff : things generate with specific context : _> : generate templates : path/to/template/file/or/dir output : output/path extra_context : foo : bar Copy without render \u00b6 In case you don't want to render a file (for example a template), you can copy without rendering. expanded : -> : generate render_src output copy_without_render : - ./render_src/.hidden.yaml - ./render_src/no-render/*","title":"generate"},{"location":"providers/Generate/generate/#generate","text":"Source Hook for generating project outputs. Recursively renders all files and folders in agiven target directory to an output. If there is a \"templates\" directory and a fileor directory that matches the templates input param, use that as target.","title":"generate"},{"location":"providers/Generate/generate/#inputs","text":"Name Type Default Required Description templates union templates False Path or list of paths to a templatable directory or file to recursively render the contents. output str . False Path to put the output file(s). copy_without_render union [] False List of path to files to only copy and not render. overwrite_if_exists bool False False Overwrite the output if exists. skip_if_file_exists bool False False Skip creating if path exists. render_context dict None False A render context that invalidates the default context. extra_context union None False A map / list of maps to use as extra context when rendering. Lists inputs are merged together as lists themselves don't make sense. file_system_loader union . False List of paths or string path to directory with templates to load from. Docs .","title":"Inputs"},{"location":"providers/Generate/generate/#arguments","text":"Position Argument Type 1 templates union 2 output str","title":"Arguments"},{"location":"providers/Generate/generate/#returns","text":"None","title":"Returns"},{"location":"providers/Generate/generate/#examples","text":"","title":"Examples"},{"location":"providers/Generate/generate/#basic","text":"The most minimal implementation. stuff : things generate_example-> : generate path/to/template/file/or/dir output/path","title":"Basic"},{"location":"providers/Generate/generate/#with-specific-context","text":"generate with specific context : _> : generate templates : path/to/template/file/or/dir output : output/path render_context : stuff : things","title":"With specific context"},{"location":"providers/Generate/generate/#with-extra-context","text":"stuff : things generate with specific context : _> : generate templates : path/to/template/file/or/dir output : output/path extra_context : foo : bar","title":"With extra context"},{"location":"providers/Generate/generate/#copy-without-render","text":"In case you don't want to render a file (for example a template), you can copy without rendering. expanded : -> : generate render_src output copy_without_render : - ./render_src/.hidden.yaml - ./render_src/no-render/*","title":"Copy without render"},{"location":"providers/Generate/jinja/","text":"jinja \u00b6 Source Hook for jinja templates. If given an output , the rendered contents are output to a file, otherwise the rendered contents are output as a string. Inputs \u00b6 Name Type Default Required Description template str None True Path to the template to render relative to file_system_loader . output str None False Path to the output the template. extra_context dict None False Extra context update the global context to render with. render_context dict None False A render context that invalidates the default context. additional_context dict None False A map to use as additional context when rendering. file_system_loader union . False List of paths or string path to directory with templates to load from. Docs . Arguments \u00b6 Position Argument Type 1 template str 2 output str Returns \u00b6 str Examples \u00b6 Basic \u00b6 The most minimal implementation. stuff : things jinja_example-> : jinja path/to/template/file.tpl output/path.py With specific context \u00b6 jinja with specific context : _> : jinja templates : path/to/template/file.tpl output : output/path.py render_context : stuff : things With extra context \u00b6 stuff : things jinja with specific context : _> : jinja templates : path/to/template/file.tpl output : output/path.py extra_context : foo : bar","title":"jinja"},{"location":"providers/Generate/jinja/#jinja","text":"Source Hook for jinja templates. If given an output , the rendered contents are output to a file, otherwise the rendered contents are output as a string.","title":"jinja"},{"location":"providers/Generate/jinja/#inputs","text":"Name Type Default Required Description template str None True Path to the template to render relative to file_system_loader . output str None False Path to the output the template. extra_context dict None False Extra context update the global context to render with. render_context dict None False A render context that invalidates the default context. additional_context dict None False A map to use as additional context when rendering. file_system_loader union . False List of paths or string path to directory with templates to load from. Docs .","title":"Inputs"},{"location":"providers/Generate/jinja/#arguments","text":"Position Argument Type 1 template str 2 output str","title":"Arguments"},{"location":"providers/Generate/jinja/#returns","text":"str","title":"Returns"},{"location":"providers/Generate/jinja/#examples","text":"","title":"Examples"},{"location":"providers/Generate/jinja/#basic","text":"The most minimal implementation. stuff : things jinja_example-> : jinja path/to/template/file.tpl output/path.py","title":"Basic"},{"location":"providers/Generate/jinja/#with-specific-context","text":"jinja with specific context : _> : jinja templates : path/to/template/file.tpl output : output/path.py render_context : stuff : things","title":"With specific context"},{"location":"providers/Generate/jinja/#with-extra-context","text":"stuff : things jinja with specific context : _> : jinja templates : path/to/template/file.tpl output : output/path.py extra_context : foo : bar","title":"With extra context"},{"location":"providers/Git/","text":"Git Provider \u00b6 Hooks that run git commands and manage meta repos . Hooks \u00b6 Type Description Return git_clone Hook to create clone a repo. Wraps git python clone . Source API None meta_repo Hook to create meta repo, ie a repo that has many other repos within it. See meta repo definition. Describe the repo structure with a map and when this hook is called, it allows the users to operate git commands on that repo structure. None Requirements \u00b6 GitPython Examples \u00b6 git_clone \u00b6 Clone a repo - wraps gitpython clone_from compact-> : git_clone https://github.com/robcxyz/tackle-provider expanded : -> : git_clone url : https://github.com/robcxyz/tackle-pypackage to_path : output/path meta_repo \u00b6 Create a meta repo out of many other repos. Allows flexible references to repos on github. this : -> : meta_repo git_org : robcxyz repo_tree : services : thing : robcxyz/tackle-pypackage users : https://github.com/robcxyz/tackle-pypackage foo : bar : main : src : https://github.com/robcxyz/tackle-pypackage thing : src : https://github.com/robcxyz/tackle-pypackage branch : dev gh : src : tackle-pypackage branch : master gh-branch : src : robcxyz/tackle-pypackage branch : dev","title":"Index"},{"location":"providers/Git/#git-provider","text":"Hooks that run git commands and manage meta repos .","title":"Git Provider"},{"location":"providers/Git/#hooks","text":"Type Description Return git_clone Hook to create clone a repo. Wraps git python clone . Source API None meta_repo Hook to create meta repo, ie a repo that has many other repos within it. See meta repo definition. Describe the repo structure with a map and when this hook is called, it allows the users to operate git commands on that repo structure. None","title":"Hooks"},{"location":"providers/Git/#requirements","text":"GitPython","title":"Requirements"},{"location":"providers/Git/#examples","text":"","title":"Examples"},{"location":"providers/Git/#git_clone","text":"Clone a repo - wraps gitpython clone_from compact-> : git_clone https://github.com/robcxyz/tackle-provider expanded : -> : git_clone url : https://github.com/robcxyz/tackle-pypackage to_path : output/path","title":"git_clone"},{"location":"providers/Git/#meta_repo","text":"Create a meta repo out of many other repos. Allows flexible references to repos on github. this : -> : meta_repo git_org : robcxyz repo_tree : services : thing : robcxyz/tackle-pypackage users : https://github.com/robcxyz/tackle-pypackage foo : bar : main : src : https://github.com/robcxyz/tackle-pypackage thing : src : https://github.com/robcxyz/tackle-pypackage branch : dev gh : src : tackle-pypackage branch : master gh-branch : src : robcxyz/tackle-pypackage branch : dev","title":"meta_repo"},{"location":"providers/Git/git_clone/","text":"git_clone \u00b6 Source Hook to create clone a repo. Wraps git python clone . Source API Inputs \u00b6 Name Type Default Required Description url str None False valid git url - Docs to_path str None False Path to which the repository should be cloned to progress str None False See \u2018git.remote.Remote.push\u2019. env dict None False Optional dictionary containing the desired environment variables. Note: Provided variables will be used to update the execution environment for git. If some variable is not specified in env and is defined in os.environ, value from os.environ will be used. If you want to unset some variable, consider providing empty string as its value. multi_options list None False A list of Clone options that can be provided multiple times. One option per list item which is passed exactly as specified to clone. For example [\u2018\u2013config core.filemode=false\u2019, \u2018\u2013config core.ignorecase\u2019, \u2018\u2013recurse-submodule=repo1_path\u2019, \u2018\u2013recurse-submodule=repo2_path\u2019] kwargs dict {} False - odbt = ObjectDatabase Type, allowing to determine the object database implementation used by the returned Repo instance - All remaining keyword arguments are given to the git-clone command Arguments \u00b6 Position Argument Type 1 url str 2 to_path str Returns \u00b6 None Examples \u00b6 compact-> : git_clone https://github.com/robcxyz/tackle-provider expanded : -> : git_clone url : https://github.com/robcxyz/tackle-pypackage to_path : output/path","title":"git_clone"},{"location":"providers/Git/git_clone/#git_clone","text":"Source Hook to create clone a repo. Wraps git python clone . Source API","title":"git_clone"},{"location":"providers/Git/git_clone/#inputs","text":"Name Type Default Required Description url str None False valid git url - Docs to_path str None False Path to which the repository should be cloned to progress str None False See \u2018git.remote.Remote.push\u2019. env dict None False Optional dictionary containing the desired environment variables. Note: Provided variables will be used to update the execution environment for git. If some variable is not specified in env and is defined in os.environ, value from os.environ will be used. If you want to unset some variable, consider providing empty string as its value. multi_options list None False A list of Clone options that can be provided multiple times. One option per list item which is passed exactly as specified to clone. For example [\u2018\u2013config core.filemode=false\u2019, \u2018\u2013config core.ignorecase\u2019, \u2018\u2013recurse-submodule=repo1_path\u2019, \u2018\u2013recurse-submodule=repo2_path\u2019] kwargs dict {} False - odbt = ObjectDatabase Type, allowing to determine the object database implementation used by the returned Repo instance - All remaining keyword arguments are given to the git-clone command","title":"Inputs"},{"location":"providers/Git/git_clone/#arguments","text":"Position Argument Type 1 url str 2 to_path str","title":"Arguments"},{"location":"providers/Git/git_clone/#returns","text":"None","title":"Returns"},{"location":"providers/Git/git_clone/#examples","text":"compact-> : git_clone https://github.com/robcxyz/tackle-provider expanded : -> : git_clone url : https://github.com/robcxyz/tackle-pypackage to_path : output/path","title":"Examples"},{"location":"providers/Git/meta_repo/","text":"meta_repo \u00b6 Source Hook to create meta repo, ie a repo that has many other repos within it. See meta repo definition. Describe the repo structure with a map and when this hook is called, it allows the users to operate git commands on that repo structure. Warning: Hook is experimental. Expect changes. Inputs \u00b6 Name Type Default Required Description command str None False The git command to run. repo_tree dict None False A map of repos to clone with the keys indicating the path and values for the repo targets. See examples. protocol str https False Either https or ssh. Useful when using abbreviated repo references. token str None False A token to use with https abbreviated repo references. base_url str github.com False The base url to use with https abbreviated repo references. git_org str None False The git org to override with https abbreviated repo references. Returns \u00b6 None Examples \u00b6 this : -> : meta_repo git_org : robcxyz repo_tree : services : thing : robcxyz/tackle-pypackage users : https://github.com/robcxyz/tackle-pypackage foo : bar : main : src : https://github.com/robcxyz/tackle-pypackage thing : src : https://github.com/robcxyz/tackle-pypackage branch : dev gh : src : tackle-pypackage branch : master gh-branch : src : robcxyz/tackle-pypackage branch : dev","title":"meta_repo"},{"location":"providers/Git/meta_repo/#meta_repo","text":"Source Hook to create meta repo, ie a repo that has many other repos within it. See meta repo definition. Describe the repo structure with a map and when this hook is called, it allows the users to operate git commands on that repo structure. Warning: Hook is experimental. Expect changes.","title":"meta_repo"},{"location":"providers/Git/meta_repo/#inputs","text":"Name Type Default Required Description command str None False The git command to run. repo_tree dict None False A map of repos to clone with the keys indicating the path and values for the repo targets. See examples. protocol str https False Either https or ssh. Useful when using abbreviated repo references. token str None False A token to use with https abbreviated repo references. base_url str github.com False The base url to use with https abbreviated repo references. git_org str None False The git org to override with https abbreviated repo references.","title":"Inputs"},{"location":"providers/Git/meta_repo/#returns","text":"None","title":"Returns"},{"location":"providers/Git/meta_repo/#examples","text":"this : -> : meta_repo git_org : robcxyz repo_tree : services : thing : robcxyz/tackle-pypackage users : https://github.com/robcxyz/tackle-pypackage foo : bar : main : src : https://github.com/robcxyz/tackle-pypackage thing : src : https://github.com/robcxyz/tackle-pypackage branch : dev gh : src : tackle-pypackage branch : master gh-branch : src : robcxyz/tackle-pypackage branch : dev","title":"Examples"},{"location":"providers/Ini/","text":"ini \u00b6 Source Hook for reading and writing ini files. Hook reads from path if no data field is provided, otherwise it writes the data to path . Inputs \u00b6 Name Type Default Required Description path str None True The file path to put read or write to. data union None False Map or renderable string to a map key to write. Must have three levels for the section, key, and value - ie {section:{key1:value1, key2:value2}}. allow_no_value bool True False Whether to allow a no values. Arguments \u00b6 Position Argument Type 1 path str 2 data union Returns \u00b6 union","title":"Index"},{"location":"providers/Ini/#ini","text":"Source Hook for reading and writing ini files. Hook reads from path if no data field is provided, otherwise it writes the data to path .","title":"ini"},{"location":"providers/Ini/#inputs","text":"Name Type Default Required Description path str None True The file path to put read or write to. data union None False Map or renderable string to a map key to write. Must have three levels for the section, key, and value - ie {section:{key1:value1, key2:value2}}. allow_no_value bool True False Whether to allow a no values.","title":"Inputs"},{"location":"providers/Ini/#arguments","text":"Position Argument Type 1 path str 2 data union","title":"Arguments"},{"location":"providers/Ini/#returns","text":"union","title":"Returns"},{"location":"providers/Json/","text":"JSON Provider \u00b6 Wraps json library to read and write json. Hooks \u00b6 Type Description Return json Hook for reading and writing json. Hook reads from path if no data field is provided, otherwise it writes the data to path . union jsonify Hook for reading and writing json. Hook reads from path if no data field is provided, otherwise it writes the data to path . union Examples \u00b6 Read json \u00b6 Read a json file into a key compact-> : json path/to/file.json expanded : -> : json path : path/to/file.json Write json \u00b6 Read a json file into a key stuff : and : things compact-> : json path/to/file.json \"{{stuff}}\" expanded : -> : json path : path/to/file.json contents : \"{{ stuff }}\"","title":"Index"},{"location":"providers/Json/#json-provider","text":"Wraps json library to read and write json.","title":"JSON Provider"},{"location":"providers/Json/#hooks","text":"Type Description Return json Hook for reading and writing json. Hook reads from path if no data field is provided, otherwise it writes the data to path . union jsonify Hook for reading and writing json. Hook reads from path if no data field is provided, otherwise it writes the data to path . union","title":"Hooks"},{"location":"providers/Json/#examples","text":"","title":"Examples"},{"location":"providers/Json/#read-json","text":"Read a json file into a key compact-> : json path/to/file.json expanded : -> : json path : path/to/file.json","title":"Read json"},{"location":"providers/Json/#write-json","text":"Read a json file into a key stuff : and : things compact-> : json path/to/file.json \"{{stuff}}\" expanded : -> : json path : path/to/file.json contents : \"{{ stuff }}\"","title":"Write json"},{"location":"providers/Json/json/","text":"json \u00b6 Source Hook for reading and writing json. Hook reads from path if no data field is provided, otherwise it writes the data to path . Inputs \u00b6 Name Type Default Required Description path str None True The file path to put read or write to. data union None False Map/list or renderable string to a map/list key to write. Arguments \u00b6 Position Argument Type 1 path str 2 data union Returns \u00b6 union","title":"json"},{"location":"providers/Json/json/#json","text":"Source Hook for reading and writing json. Hook reads from path if no data field is provided, otherwise it writes the data to path .","title":"json"},{"location":"providers/Json/json/#inputs","text":"Name Type Default Required Description path str None True The file path to put read or write to. data union None False Map/list or renderable string to a map/list key to write.","title":"Inputs"},{"location":"providers/Json/json/#arguments","text":"Position Argument Type 1 path str 2 data union","title":"Arguments"},{"location":"providers/Json/json/#returns","text":"union","title":"Returns"},{"location":"providers/Json/jsonify/","text":"jsonify \u00b6 Source Hook for reading and writing json. Hook reads from path if no data field is provided, otherwise it writes the data to path . Inputs \u00b6 Name Type Default Required Description data union None True Map/list or renderable string to a map/list key to write. Arguments \u00b6 Position Argument Type 1 data union Returns \u00b6 union","title":"jsonify"},{"location":"providers/Json/jsonify/#jsonify","text":"Source Hook for reading and writing json. Hook reads from path if no data field is provided, otherwise it writes the data to path .","title":"jsonify"},{"location":"providers/Json/jsonify/#inputs","text":"Name Type Default Required Description data union None True Map/list or renderable string to a map/list key to write.","title":"Inputs"},{"location":"providers/Json/jsonify/#arguments","text":"Position Argument Type 1 data union","title":"Arguments"},{"location":"providers/Json/jsonify/#returns","text":"union","title":"Returns"},{"location":"providers/Kubernetes/","text":"Kubernetes Provider \u00b6 Hooks that interact with various kubernetes resources. Hooks \u00b6 Type Description Return k8s_apply Hook for getting current kubeconfig context. None k8s_context_list Hook for listing kubeconfig contexts. list k8s_context_map Hook for return a map of the kubeconfig context details. dict k8s_current_context Hook for getting current kubeconfig context. str k8s_use_context Hook for using a kube context. None Requirements \u00b6 kubernetes Examples \u00b6 k8s_context_map \u00b6 Get a map with keys of kubernetes context names and values with details from KUBECONFIG environment variable. compact-> : k8s_current_context k8s_context_list \u00b6 Get a list of kubernetes contexts from KUBECONFIG environment variable. compact-> : k8s_context_list k8s_context_map \u00b6 Get a map with keys of kubernetes context names and values with details from KUBECONFIG environment variable. compact-> : k8s_context_map","title":"Index"},{"location":"providers/Kubernetes/#kubernetes-provider","text":"Hooks that interact with various kubernetes resources.","title":"Kubernetes Provider"},{"location":"providers/Kubernetes/#hooks","text":"Type Description Return k8s_apply Hook for getting current kubeconfig context. None k8s_context_list Hook for listing kubeconfig contexts. list k8s_context_map Hook for return a map of the kubeconfig context details. dict k8s_current_context Hook for getting current kubeconfig context. str k8s_use_context Hook for using a kube context. None","title":"Hooks"},{"location":"providers/Kubernetes/#requirements","text":"kubernetes","title":"Requirements"},{"location":"providers/Kubernetes/#examples","text":"","title":"Examples"},{"location":"providers/Kubernetes/#k8s_context_map","text":"Get a map with keys of kubernetes context names and values with details from KUBECONFIG environment variable. compact-> : k8s_current_context","title":"k8s_context_map"},{"location":"providers/Kubernetes/#k8s_context_list","text":"Get a list of kubernetes contexts from KUBECONFIG environment variable. compact-> : k8s_context_list","title":"k8s_context_list"},{"location":"providers/Kubernetes/#k8s_context_map_1","text":"Get a map with keys of kubernetes context names and values with details from KUBECONFIG environment variable. compact-> : k8s_context_map","title":"k8s_context_map"},{"location":"providers/Kubernetes/k8s_apply/","text":"k8s_apply \u00b6 Source Hook for getting current kubeconfig context. Inputs \u00b6 Name Type Default Required Description yaml_dir str None True Returns \u00b6 None","title":"k8s_apply"},{"location":"providers/Kubernetes/k8s_apply/#k8s_apply","text":"Source Hook for getting current kubeconfig context.","title":"k8s_apply"},{"location":"providers/Kubernetes/k8s_apply/#inputs","text":"Name Type Default Required Description yaml_dir str None True","title":"Inputs"},{"location":"providers/Kubernetes/k8s_apply/#returns","text":"None","title":"Returns"},{"location":"providers/Kubernetes/k8s_context_list/","text":"k8s_context_list \u00b6 Source Hook for listing kubeconfig contexts. Inputs \u00b6 No inputs Returns \u00b6 list","title":"k8s_context_list"},{"location":"providers/Kubernetes/k8s_context_list/#k8s_context_list","text":"Source Hook for listing kubeconfig contexts.","title":"k8s_context_list"},{"location":"providers/Kubernetes/k8s_context_list/#inputs","text":"No inputs","title":"Inputs"},{"location":"providers/Kubernetes/k8s_context_list/#returns","text":"list","title":"Returns"},{"location":"providers/Kubernetes/k8s_context_map/","text":"k8s_context_map \u00b6 Source Hook for return a map of the kubeconfig context details. Inputs \u00b6 No inputs Returns \u00b6 dict","title":"k8s_context_map"},{"location":"providers/Kubernetes/k8s_context_map/#k8s_context_map","text":"Source Hook for return a map of the kubeconfig context details.","title":"k8s_context_map"},{"location":"providers/Kubernetes/k8s_context_map/#inputs","text":"No inputs","title":"Inputs"},{"location":"providers/Kubernetes/k8s_context_map/#returns","text":"dict","title":"Returns"},{"location":"providers/Kubernetes/k8s_current_context/","text":"k8s_current_context \u00b6 Source Hook for getting current kubeconfig context. Inputs \u00b6 No inputs Returns \u00b6 str","title":"k8s_current_context"},{"location":"providers/Kubernetes/k8s_current_context/#k8s_current_context","text":"Source Hook for getting current kubeconfig context.","title":"k8s_current_context"},{"location":"providers/Kubernetes/k8s_current_context/#inputs","text":"No inputs","title":"Inputs"},{"location":"providers/Kubernetes/k8s_current_context/#returns","text":"str","title":"Returns"},{"location":"providers/Kubernetes/k8s_use_context/","text":"k8s_use_context \u00b6 Source Hook for using a kube context. Inputs \u00b6 Name Type Default Required Description context str None True The context to use. Returns \u00b6 None","title":"k8s_use_context"},{"location":"providers/Kubernetes/k8s_use_context/#k8s_use_context","text":"Source Hook for using a kube context.","title":"k8s_use_context"},{"location":"providers/Kubernetes/k8s_use_context/#inputs","text":"Name Type Default Required Description context str None True The context to use.","title":"Inputs"},{"location":"providers/Kubernetes/k8s_use_context/#returns","text":"None","title":"Returns"},{"location":"providers/Logic/","text":"Logic Provider \u00b6 Hooks for various logical operations such as match/case, assert, and while loops. Hooks \u00b6 Type Description Return assert Hook for asserting an input is equal to a value. bool match Hook for match / case statements. Takes a dict where the keys are matched to avalue. If the case value has an arrow in it (ie key->: ... ) the arrow is strippedaway. All matched values are ran as hooks. union Examples \u00b6 match \u00b6 The match hook mimics common match/case statements # Stand in for some kind of thing to match against selection : -> : select What to do? choices : [ 'agree' , 'disagree' ] matcher : -> : match {% raw %}{{selection}}{% endraw %} case : agree : Some value disagree-> : # Run some tackle context ... assert \u00b6 Hook to assert if two items are equal. Can also easily be done with jinja but with this hook you can exit based on the assertion. stuff : things assertion-> : assert {{stuff}} things # Would exit otherwise with-jinja-> : {{ stuff!='things' }} # Equivalent and would not exit stuff : things assertion : true with-jinja : false type \u00b6 Hook to get type of variable. stuff : things map : stuff : things stuff_type-> : type stuff # rendered by default map_type-> : type map stuff : things map : stuff : things stuff_type : str map_type : dict","title":"Index"},{"location":"providers/Logic/#logic-provider","text":"Hooks for various logical operations such as match/case, assert, and while loops.","title":"Logic Provider"},{"location":"providers/Logic/#hooks","text":"Type Description Return assert Hook for asserting an input is equal to a value. bool match Hook for match / case statements. Takes a dict where the keys are matched to avalue. If the case value has an arrow in it (ie key->: ... ) the arrow is strippedaway. All matched values are ran as hooks. union","title":"Hooks"},{"location":"providers/Logic/#examples","text":"","title":"Examples"},{"location":"providers/Logic/#match","text":"The match hook mimics common match/case statements # Stand in for some kind of thing to match against selection : -> : select What to do? choices : [ 'agree' , 'disagree' ] matcher : -> : match {% raw %}{{selection}}{% endraw %} case : agree : Some value disagree-> : # Run some tackle context ...","title":"match"},{"location":"providers/Logic/#assert","text":"Hook to assert if two items are equal. Can also easily be done with jinja but with this hook you can exit based on the assertion. stuff : things assertion-> : assert {{stuff}} things # Would exit otherwise with-jinja-> : {{ stuff!='things' }} # Equivalent and would not exit stuff : things assertion : true with-jinja : false","title":"assert"},{"location":"providers/Logic/#type","text":"Hook to get type of variable. stuff : things map : stuff : things stuff_type-> : type stuff # rendered by default map_type-> : type map stuff : things map : stuff : things stuff_type : str map_type : dict","title":"type"},{"location":"providers/Logic/assert/","text":"assert \u00b6 Source Hook for asserting an input is equal to a value. Inputs \u00b6 Name Type Default Required Description input any None True The input - ie right hand side of assert. value any None False The value - ie left hand side of assert. exit_on_failure bool True False Whether to exit on assertion error. Arguments \u00b6 Position Argument Type 1 input any 2 value any Returns \u00b6 bool Examples \u00b6 Assert if two items are equal. Can also easily be done with jinja but with this hook you can exit based on the assertion. stuff : things assertion-> : assert {{stuff}} things # Would exit otherwise with-jinja-> : {{ stuff!='things' }} # Equivalent and would not exit stuff : things assertion : true with-jinja : false","title":"assert"},{"location":"providers/Logic/assert/#assert","text":"Source Hook for asserting an input is equal to a value.","title":"assert"},{"location":"providers/Logic/assert/#inputs","text":"Name Type Default Required Description input any None True The input - ie right hand side of assert. value any None False The value - ie left hand side of assert. exit_on_failure bool True False Whether to exit on assertion error.","title":"Inputs"},{"location":"providers/Logic/assert/#arguments","text":"Position Argument Type 1 input any 2 value any","title":"Arguments"},{"location":"providers/Logic/assert/#returns","text":"bool","title":"Returns"},{"location":"providers/Logic/assert/#examples","text":"Assert if two items are equal. Can also easily be done with jinja but with this hook you can exit based on the assertion. stuff : things assertion-> : assert {{stuff}} things # Would exit otherwise with-jinja-> : {{ stuff!='things' }} # Equivalent and would not exit stuff : things assertion : true with-jinja : false","title":"Examples"},{"location":"providers/Logic/match/","text":"match \u00b6 Source Hook for match / case statements. Takes a dict where the keys are matched to avalue. If the case value has an arrow in it (ie key->: ... ) the arrow is strippedaway. All matched values are ran as hooks. Inputs \u00b6 Name Type Default Required Description value str None True The value to match against. case dict None True A dictionary where the keys are cases to be matched. Runs hooks if present. Arguments \u00b6 Position Argument Type 1 value str Returns \u00b6 union Examples \u00b6 The match hook mimics common match/case statements # Stand in for some kind of thing to match against selection : -> : select What to do? choices : [ 'agree' , 'disagree' ] matcher : -> : match {% raw %}{{selection}}{% endraw %} case : agree : Some value disagree-> : # Run some tackle context ...","title":"match"},{"location":"providers/Logic/match/#match","text":"Source Hook for match / case statements. Takes a dict where the keys are matched to avalue. If the case value has an arrow in it (ie key->: ... ) the arrow is strippedaway. All matched values are ran as hooks.","title":"match"},{"location":"providers/Logic/match/#inputs","text":"Name Type Default Required Description value str None True The value to match against. case dict None True A dictionary where the keys are cases to be matched. Runs hooks if present.","title":"Inputs"},{"location":"providers/Logic/match/#arguments","text":"Position Argument Type 1 value str","title":"Arguments"},{"location":"providers/Logic/match/#returns","text":"union","title":"Returns"},{"location":"providers/Logic/match/#examples","text":"The match hook mimics common match/case statements # Stand in for some kind of thing to match against selection : -> : select What to do? choices : [ 'agree' , 'disagree' ] matcher : -> : match {% raw %}{{selection}}{% endraw %} case : agree : Some value disagree-> : # Run some tackle context ...","title":"Examples"},{"location":"providers/Paths/","text":"Paths Provider \u00b6 Hooks for file path operations including symlinking Hooks \u00b6 Type Description Return basename Hook for getting the basename from a path. None dirname Hook for getting the basename from a path. None find_in_child Hook to find the absolute path to a file or directory in child directories. list find_in_parent Hook to find the absolute path to a file or directory in parent directories. str flatten_paths Hook for flattening a dictionary into a list of paths. list isdir Hook for os package 'path.isdir'. bool isfile Hook for os package 'path.isfile'. bool listdir Hook for listdir . Lists the contents of a directory. list mkdir Hook creating a directory. str path_exists Hook for os package 'path.exists'. bool path_join Hook joining paths. None symlink Hook creating symlinks wrapping os.symlink functionality. Wraps os.symlink NoneType temp_dir Hook creating a temporary directory. str Examples \u00b6 mkdir \u00b6 Make a directory compact-> : mkdir path/to/dir expanded : -> : mkdir path : path/to/dir listdir \u00b6 List the contents of a directory compact-> : listdir path/to/dir expanded : -> : listdir path : path/to/dir symlink \u00b6 Create a symlink compact-> : symlink path/to/source path/to/destination expanded : -> : symlink src : path/to/source dst : path/to/destination target_is_directory : true path_exists \u00b6 Check if a path exists compact-> : path_exists path/to/file/or/dir expanded : -> : path_exists path : path/to/file/or/dir isdir \u00b6 Check if a path exists compact-> : isdir path/to/dir expanded : -> : isdir path : path/to/dir isfile \u00b6 Check if a path exists compact-> : isfile path/to/dir expanded : -> : isfile path : path/to/dir path_join \u00b6 Check if a path exists compact-> : path_join ['path','to','dir'] expanded : -> : path_join paths : - path - to - dir compact : path/to/dir # \\ for windows expanded : path/to/dir find_in_parent \u00b6 Return the path to a target file in a parent directory compact-> : find_in_parent a-file.yaml expanded : -> : find_in_parent target : a-file.yaml find_in_child \u00b6 Get a list of paths to a target file in child directories compact-> : find_in_child a-file.yaml expanded : -> : find_in_child target : a-file.yaml","title":"Index"},{"location":"providers/Paths/#paths-provider","text":"Hooks for file path operations including symlinking","title":"Paths Provider"},{"location":"providers/Paths/#hooks","text":"Type Description Return basename Hook for getting the basename from a path. None dirname Hook for getting the basename from a path. None find_in_child Hook to find the absolute path to a file or directory in child directories. list find_in_parent Hook to find the absolute path to a file or directory in parent directories. str flatten_paths Hook for flattening a dictionary into a list of paths. list isdir Hook for os package 'path.isdir'. bool isfile Hook for os package 'path.isfile'. bool listdir Hook for listdir . Lists the contents of a directory. list mkdir Hook creating a directory. str path_exists Hook for os package 'path.exists'. bool path_join Hook joining paths. None symlink Hook creating symlinks wrapping os.symlink functionality. Wraps os.symlink NoneType temp_dir Hook creating a temporary directory. str","title":"Hooks"},{"location":"providers/Paths/#examples","text":"","title":"Examples"},{"location":"providers/Paths/#mkdir","text":"Make a directory compact-> : mkdir path/to/dir expanded : -> : mkdir path : path/to/dir","title":"mkdir"},{"location":"providers/Paths/#listdir","text":"List the contents of a directory compact-> : listdir path/to/dir expanded : -> : listdir path : path/to/dir","title":"listdir"},{"location":"providers/Paths/#symlink","text":"Create a symlink compact-> : symlink path/to/source path/to/destination expanded : -> : symlink src : path/to/source dst : path/to/destination target_is_directory : true","title":"symlink"},{"location":"providers/Paths/#path_exists","text":"Check if a path exists compact-> : path_exists path/to/file/or/dir expanded : -> : path_exists path : path/to/file/or/dir","title":"path_exists"},{"location":"providers/Paths/#isdir","text":"Check if a path exists compact-> : isdir path/to/dir expanded : -> : isdir path : path/to/dir","title":"isdir"},{"location":"providers/Paths/#isfile","text":"Check if a path exists compact-> : isfile path/to/dir expanded : -> : isfile path : path/to/dir","title":"isfile"},{"location":"providers/Paths/#path_join","text":"Check if a path exists compact-> : path_join ['path','to','dir'] expanded : -> : path_join paths : - path - to - dir compact : path/to/dir # \\ for windows expanded : path/to/dir","title":"path_join"},{"location":"providers/Paths/#find_in_parent","text":"Return the path to a target file in a parent directory compact-> : find_in_parent a-file.yaml expanded : -> : find_in_parent target : a-file.yaml","title":"find_in_parent"},{"location":"providers/Paths/#find_in_child","text":"Get a list of paths to a target file in child directories compact-> : find_in_child a-file.yaml expanded : -> : find_in_child target : a-file.yaml","title":"find_in_child"},{"location":"providers/Paths/basename/","text":"basename \u00b6 Source Hook for getting the basename from a path. Inputs \u00b6 Name Type Default Required Description path str None True Path to the file/directory to get the basename of. Arguments \u00b6 Position Argument Type 1 path str Returns \u00b6 None","title":"basename"},{"location":"providers/Paths/basename/#basename","text":"Source Hook for getting the basename from a path.","title":"basename"},{"location":"providers/Paths/basename/#inputs","text":"Name Type Default Required Description path str None True Path to the file/directory to get the basename of.","title":"Inputs"},{"location":"providers/Paths/basename/#arguments","text":"Position Argument Type 1 path str","title":"Arguments"},{"location":"providers/Paths/basename/#returns","text":"None","title":"Returns"},{"location":"providers/Paths/dirname/","text":"dirname \u00b6 Source Hook for getting the basename from a path. Inputs \u00b6 Name Type Default Required Description path str None True Path to the file/directory to get the directory name of. Arguments \u00b6 Position Argument Type 1 path str Returns \u00b6 None","title":"dirname"},{"location":"providers/Paths/dirname/#dirname","text":"Source Hook for getting the basename from a path.","title":"dirname"},{"location":"providers/Paths/dirname/#inputs","text":"Name Type Default Required Description path str None True Path to the file/directory to get the directory name of.","title":"Inputs"},{"location":"providers/Paths/dirname/#arguments","text":"Position Argument Type 1 path str","title":"Arguments"},{"location":"providers/Paths/dirname/#returns","text":"None","title":"Returns"},{"location":"providers/Paths/find_in_child/","text":"find_in_child \u00b6 Source Hook to find the absolute path to a file or directory in child directories. Inputs \u00b6 Name Type Default Required Description target str None True The name of the file to find the absolute path to fallback any None False String to fallback on if the target is not found. starting_dir str . False The starting directory to search from. Defaults to current working directory. Arguments \u00b6 Position Argument Type 1 target str Returns \u00b6 list","title":"find_in_child"},{"location":"providers/Paths/find_in_child/#find_in_child","text":"Source Hook to find the absolute path to a file or directory in child directories.","title":"find_in_child"},{"location":"providers/Paths/find_in_child/#inputs","text":"Name Type Default Required Description target str None True The name of the file to find the absolute path to fallback any None False String to fallback on if the target is not found. starting_dir str . False The starting directory to search from. Defaults to current working directory.","title":"Inputs"},{"location":"providers/Paths/find_in_child/#arguments","text":"Position Argument Type 1 target str","title":"Arguments"},{"location":"providers/Paths/find_in_child/#returns","text":"list","title":"Returns"},{"location":"providers/Paths/find_in_parent/","text":"find_in_parent \u00b6 Source Hook to find the absolute path to a file or directory in parent directories. Inputs \u00b6 Name Type Default Required Description target str None True The name of the file to find the absolute path to fallback any None False String to fallback on if the target is not found. starting_dir str . False The starting directory to search from. Defaults to current working directory. Arguments \u00b6 Position Argument Type 1 target str Returns \u00b6 str","title":"find_in_parent"},{"location":"providers/Paths/find_in_parent/#find_in_parent","text":"Source Hook to find the absolute path to a file or directory in parent directories.","title":"find_in_parent"},{"location":"providers/Paths/find_in_parent/#inputs","text":"Name Type Default Required Description target str None True The name of the file to find the absolute path to fallback any None False String to fallback on if the target is not found. starting_dir str . False The starting directory to search from. Defaults to current working directory.","title":"Inputs"},{"location":"providers/Paths/find_in_parent/#arguments","text":"Position Argument Type 1 target str","title":"Arguments"},{"location":"providers/Paths/find_in_parent/#returns","text":"str","title":"Returns"},{"location":"providers/Paths/flatten_paths/","text":"flatten_paths \u00b6 Source Hook for flattening a dictionary into a list of paths. Inputs \u00b6 Name Type Default Required Description paths union None True A list or map representing paths to files that should be flattened base_path str False A base path to prefix in the output. Arguments \u00b6 Position Argument Type 1 paths union Returns \u00b6 list","title":"flatten_paths"},{"location":"providers/Paths/flatten_paths/#flatten_paths","text":"Source Hook for flattening a dictionary into a list of paths.","title":"flatten_paths"},{"location":"providers/Paths/flatten_paths/#inputs","text":"Name Type Default Required Description paths union None True A list or map representing paths to files that should be flattened base_path str False A base path to prefix in the output.","title":"Inputs"},{"location":"providers/Paths/flatten_paths/#arguments","text":"Position Argument Type 1 paths union","title":"Arguments"},{"location":"providers/Paths/flatten_paths/#returns","text":"list","title":"Returns"},{"location":"providers/Paths/isdir/","text":"isdir \u00b6 Source Hook for os package 'path.isdir'. Inputs \u00b6 Name Type Default Required Description path str None True The path to a directory Arguments \u00b6 Position Argument Type 1 path str Returns \u00b6 bool","title":"isdir"},{"location":"providers/Paths/isdir/#isdir","text":"Source Hook for os package 'path.isdir'.","title":"isdir"},{"location":"providers/Paths/isdir/#inputs","text":"Name Type Default Required Description path str None True The path to a directory","title":"Inputs"},{"location":"providers/Paths/isdir/#arguments","text":"Position Argument Type 1 path str","title":"Arguments"},{"location":"providers/Paths/isdir/#returns","text":"bool","title":"Returns"},{"location":"providers/Paths/isfile/","text":"isfile \u00b6 Source Hook for os package 'path.isfile'. Inputs \u00b6 Name Type Default Required Description path str None True The path to a file Arguments \u00b6 Position Argument Type 1 path str Returns \u00b6 bool","title":"isfile"},{"location":"providers/Paths/isfile/#isfile","text":"Source Hook for os package 'path.isfile'.","title":"isfile"},{"location":"providers/Paths/isfile/#inputs","text":"Name Type Default Required Description path str None True The path to a file","title":"Inputs"},{"location":"providers/Paths/isfile/#arguments","text":"Position Argument Type 1 path str","title":"Arguments"},{"location":"providers/Paths/isfile/#returns","text":"bool","title":"Returns"},{"location":"providers/Paths/listdir/","text":"listdir \u00b6 Source Hook for listdir . Lists the contents of a directory. Inputs \u00b6 Name Type Default Required Description path str None False Path to directory to list contents. sort bool False False Boolean to sort the output ignore_hidden_files bool None False Boolean to ignore hidden files Arguments \u00b6 Position Argument Type 1 path str Returns \u00b6 list","title":"listdir"},{"location":"providers/Paths/listdir/#listdir","text":"Source Hook for listdir . Lists the contents of a directory.","title":"listdir"},{"location":"providers/Paths/listdir/#inputs","text":"Name Type Default Required Description path str None False Path to directory to list contents. sort bool False False Boolean to sort the output ignore_hidden_files bool None False Boolean to ignore hidden files","title":"Inputs"},{"location":"providers/Paths/listdir/#arguments","text":"Position Argument Type 1 path str","title":"Arguments"},{"location":"providers/Paths/listdir/#returns","text":"list","title":"Returns"},{"location":"providers/Paths/mkdir/","text":"mkdir \u00b6 Source Hook creating a directory. Inputs \u00b6 Name Type Default Required Description path str None True The path to file or directory Arguments \u00b6 Position Argument Type 1 path str Returns \u00b6 str Examples \u00b6 mkdir \u00b6 Make a directory compact-> : mkdir path/to/dir expanded : -> : mkdir path : path/to/dir","title":"mkdir"},{"location":"providers/Paths/mkdir/#mkdir","text":"Source Hook creating a directory.","title":"mkdir"},{"location":"providers/Paths/mkdir/#inputs","text":"Name Type Default Required Description path str None True The path to file or directory","title":"Inputs"},{"location":"providers/Paths/mkdir/#arguments","text":"Position Argument Type 1 path str","title":"Arguments"},{"location":"providers/Paths/mkdir/#returns","text":"str","title":"Returns"},{"location":"providers/Paths/mkdir/#examples","text":"","title":"Examples"},{"location":"providers/Paths/mkdir/#mkdir_1","text":"Make a directory compact-> : mkdir path/to/dir expanded : -> : mkdir path : path/to/dir","title":"mkdir"},{"location":"providers/Paths/path_exists/","text":"path_exists \u00b6 Source Hook for os package 'path.exists'. Inputs \u00b6 Name Type Default Required Description path str None True The path to file or directory Arguments \u00b6 Position Argument Type 1 path str Returns \u00b6 bool","title":"path_exists"},{"location":"providers/Paths/path_exists/#path_exists","text":"Source Hook for os package 'path.exists'.","title":"path_exists"},{"location":"providers/Paths/path_exists/#inputs","text":"Name Type Default Required Description path str None True The path to file or directory","title":"Inputs"},{"location":"providers/Paths/path_exists/#arguments","text":"Position Argument Type 1 path str","title":"Arguments"},{"location":"providers/Paths/path_exists/#returns","text":"bool","title":"Returns"},{"location":"providers/Paths/path_join/","text":"path_join \u00b6 Source Hook joining paths. Inputs \u00b6 Name Type Default Required Description paths list None True List of items in a path to file or directory. Arguments \u00b6 Position Argument Type 1 paths list Returns \u00b6 None","title":"path_join"},{"location":"providers/Paths/path_join/#path_join","text":"Source Hook joining paths.","title":"path_join"},{"location":"providers/Paths/path_join/#inputs","text":"Name Type Default Required Description paths list None True List of items in a path to file or directory.","title":"Inputs"},{"location":"providers/Paths/path_join/#arguments","text":"Position Argument Type 1 paths list","title":"Arguments"},{"location":"providers/Paths/path_join/#returns","text":"None","title":"Returns"},{"location":"providers/Paths/symlink/","text":"symlink \u00b6 Source Hook creating symlinks wrapping os.symlink functionality. Wraps os.symlink Inputs \u00b6 Name Type Default Required Description src str None True String or list of sources, either a directories or files dst str None True String for path to copy to target_is_directory bool False False The default value of this parameter is False. If the specified target path is directory then its value should be True. overwrite bool False False Overwrite the destination. Arguments \u00b6 Position Argument Type 1 src str 2 dst str Returns \u00b6 NoneType","title":"symlink"},{"location":"providers/Paths/symlink/#symlink","text":"Source Hook creating symlinks wrapping os.symlink functionality. Wraps os.symlink","title":"symlink"},{"location":"providers/Paths/symlink/#inputs","text":"Name Type Default Required Description src str None True String or list of sources, either a directories or files dst str None True String for path to copy to target_is_directory bool False False The default value of this parameter is False. If the specified target path is directory then its value should be True. overwrite bool False False Overwrite the destination.","title":"Inputs"},{"location":"providers/Paths/symlink/#arguments","text":"Position Argument Type 1 src str 2 dst str","title":"Arguments"},{"location":"providers/Paths/symlink/#returns","text":"NoneType","title":"Returns"},{"location":"providers/Paths/temp_dir/","text":"temp_dir \u00b6 Source Hook creating a temporary directory. Inputs \u00b6 No inputs Returns \u00b6 str","title":"temp_dir"},{"location":"providers/Paths/temp_dir/#temp_dir","text":"Source Hook creating a temporary directory.","title":"temp_dir"},{"location":"providers/Paths/temp_dir/#inputs","text":"No inputs","title":"Inputs"},{"location":"providers/Paths/temp_dir/#returns","text":"str","title":"Returns"},{"location":"providers/Prompts/","text":"Prompt Provider \u00b6 Wraps PyInquirer python package for basic prompting. Hooks \u00b6 Type Description Return checkbox Hook for PyInquirer checkbox type prompts. Allows the user to multi-select from a list of choices and outputs a list. Takes in three forms of choices inputs. A list of string, a list of maps with all keys having a name field per the original spec , or list of maps with the key as the question, the value as the output. list confirm Hook to confirm with a message and return a boolean. Source example bool editor Hook for PyInquirer editor type prompts. Opens an editor like nano to fill in a field. Source example bool expand Hook for PyInquirer expand type prompt. Source example list input Hook for PyInquirer 'input' type prompts. Allows the user to input a string input. Source example str password Hook for PyInquirer password type prompts. Masks the input as the user types it in. Source example str rawlist Hook for PyInquirer 'rawlist' type prompts. Similar to select hook with lessflexibility. Source example list select Hook for PyInquirer 'list' type prompts, a single selector that returns a string. Takes in two forms of choices inputs, list of string or list of maps with the key as the question and the value as the output. Source example any Examples \u00b6 input \u00b6 Prompt that allows user to input a field. compact_implicit-> : input compact_with_question-> : input Ask a question? input_expanded : -> : input message : A question? default : things ? compact_implicit >>> ? Ask a question? ? A question? things compact_implicit : <user input> compact_with_question : <user input> input_expanded : <user input> select \u00b6 A selector that limits the input to a list of choices. Generally this is written in expanded form. compact-> : select \"What do you want?\" ['stuff','things'] expanded : -> : select choices : - stuff - things ? What do you want? stuff ? expanded >>> ( Use arrow keys ) stuff \u276f things compact : stuff expanded : things checkbox \u00b6 A checkbox that allow the user to chose multiple choices and returns a list of those choices. checkbox-minimal : -> : input choices : - stuff - things","title":"Index"},{"location":"providers/Prompts/#prompt-provider","text":"Wraps PyInquirer python package for basic prompting.","title":"Prompt Provider"},{"location":"providers/Prompts/#hooks","text":"Type Description Return checkbox Hook for PyInquirer checkbox type prompts. Allows the user to multi-select from a list of choices and outputs a list. Takes in three forms of choices inputs. A list of string, a list of maps with all keys having a name field per the original spec , or list of maps with the key as the question, the value as the output. list confirm Hook to confirm with a message and return a boolean. Source example bool editor Hook for PyInquirer editor type prompts. Opens an editor like nano to fill in a field. Source example bool expand Hook for PyInquirer expand type prompt. Source example list input Hook for PyInquirer 'input' type prompts. Allows the user to input a string input. Source example str password Hook for PyInquirer password type prompts. Masks the input as the user types it in. Source example str rawlist Hook for PyInquirer 'rawlist' type prompts. Similar to select hook with lessflexibility. Source example list select Hook for PyInquirer 'list' type prompts, a single selector that returns a string. Takes in two forms of choices inputs, list of string or list of maps with the key as the question and the value as the output. Source example any","title":"Hooks"},{"location":"providers/Prompts/#examples","text":"","title":"Examples"},{"location":"providers/Prompts/#input","text":"Prompt that allows user to input a field. compact_implicit-> : input compact_with_question-> : input Ask a question? input_expanded : -> : input message : A question? default : things ? compact_implicit >>> ? Ask a question? ? A question? things compact_implicit : <user input> compact_with_question : <user input> input_expanded : <user input>","title":"input"},{"location":"providers/Prompts/#select","text":"A selector that limits the input to a list of choices. Generally this is written in expanded form. compact-> : select \"What do you want?\" ['stuff','things'] expanded : -> : select choices : - stuff - things ? What do you want? stuff ? expanded >>> ( Use arrow keys ) stuff \u276f things compact : stuff expanded : things","title":"select"},{"location":"providers/Prompts/#checkbox","text":"A checkbox that allow the user to chose multiple choices and returns a list of those choices. checkbox-minimal : -> : input choices : - stuff - things","title":"checkbox"},{"location":"providers/Prompts/checkbox/","text":"checkbox \u00b6 Source Hook for PyInquirer checkbox type prompts. Allows the user to multi-select from a list of choices and outputs a list. Takes in three forms of choices inputs. A list of string, a list of maps with all keys having a name field per the original spec , or list of maps with the key as the question, the value as the output. Inputs \u00b6 Name Type Default Required Description message str None False String message to show when prompting. choices union None True Either a list of strings or dictionary . checked bool False False Boolean if the default choices should all be checked. index bool False False Boolean to return the index instead of the answer Arguments \u00b6 Position Argument Type 1 message str Returns \u00b6 list Examples \u00b6 The basic versions of the select can be called in these ways compact-> : select \"What do you want?\" ['stuff','things'] expanded : -> : select choices : - stuff - things ? What do you want? stuff ? expanded >>> ( Use arrow keys ) stuff \u276f things compact : stuff expanded : things Other versions can use custom prompts for the choices selection : -> : checkbox message : What you do? checked : true choices : - I do stuff : stuff - I do things : things ? What you do? (Use arrow keys) \u276f I do stuff I do things","title":"checkbox"},{"location":"providers/Prompts/checkbox/#checkbox","text":"Source Hook for PyInquirer checkbox type prompts. Allows the user to multi-select from a list of choices and outputs a list. Takes in three forms of choices inputs. A list of string, a list of maps with all keys having a name field per the original spec , or list of maps with the key as the question, the value as the output.","title":"checkbox"},{"location":"providers/Prompts/checkbox/#inputs","text":"Name Type Default Required Description message str None False String message to show when prompting. choices union None True Either a list of strings or dictionary . checked bool False False Boolean if the default choices should all be checked. index bool False False Boolean to return the index instead of the answer","title":"Inputs"},{"location":"providers/Prompts/checkbox/#arguments","text":"Position Argument Type 1 message str","title":"Arguments"},{"location":"providers/Prompts/checkbox/#returns","text":"list","title":"Returns"},{"location":"providers/Prompts/checkbox/#examples","text":"The basic versions of the select can be called in these ways compact-> : select \"What do you want?\" ['stuff','things'] expanded : -> : select choices : - stuff - things ? What do you want? stuff ? expanded >>> ( Use arrow keys ) stuff \u276f things compact : stuff expanded : things Other versions can use custom prompts for the choices selection : -> : checkbox message : What you do? checked : true choices : - I do stuff : stuff - I do things : things ? What you do? (Use arrow keys) \u276f I do stuff I do things","title":"Examples"},{"location":"providers/Prompts/confirm/","text":"confirm \u00b6 Source Hook to confirm with a message and return a boolean. Source example Inputs \u00b6 Name Type Default Required Description default bool True False Default choice. message str None False String message to show when prompting. Arguments \u00b6 Position Argument Type 1 message str Returns \u00b6 bool","title":"confirm"},{"location":"providers/Prompts/confirm/#confirm","text":"Source Hook to confirm with a message and return a boolean. Source example","title":"confirm"},{"location":"providers/Prompts/confirm/#inputs","text":"Name Type Default Required Description default bool True False Default choice. message str None False String message to show when prompting.","title":"Inputs"},{"location":"providers/Prompts/confirm/#arguments","text":"Position Argument Type 1 message str","title":"Arguments"},{"location":"providers/Prompts/confirm/#returns","text":"bool","title":"Returns"},{"location":"providers/Prompts/editor/","text":"editor \u00b6 Source Hook for PyInquirer editor type prompts. Opens an editor like nano to fill in a field. Source example Inputs \u00b6 Name Type Default Required Description default any None False Default selection. message str None False String message to show when prompting. Arguments \u00b6 Position Argument Type 1 message str 2 default any Returns \u00b6 bool","title":"editor"},{"location":"providers/Prompts/editor/#editor","text":"Source Hook for PyInquirer editor type prompts. Opens an editor like nano to fill in a field. Source example","title":"editor"},{"location":"providers/Prompts/editor/#inputs","text":"Name Type Default Required Description default any None False Default selection. message str None False String message to show when prompting.","title":"Inputs"},{"location":"providers/Prompts/editor/#arguments","text":"Position Argument Type 1 message str 2 default any","title":"Arguments"},{"location":"providers/Prompts/editor/#returns","text":"bool","title":"Returns"},{"location":"providers/Prompts/expand/","text":"expand \u00b6 Source Hook for PyInquirer expand type prompt. Source example Inputs \u00b6 Name Type Default Required Description default any None False Default selection. message str None False String message to show when prompting. Arguments \u00b6 Position Argument Type 1 message str 2 default any Returns \u00b6 list","title":"expand"},{"location":"providers/Prompts/expand/#expand","text":"Source Hook for PyInquirer expand type prompt. Source example","title":"expand"},{"location":"providers/Prompts/expand/#inputs","text":"Name Type Default Required Description default any None False Default selection. message str None False String message to show when prompting.","title":"Inputs"},{"location":"providers/Prompts/expand/#arguments","text":"Position Argument Type 1 message str 2 default any","title":"Arguments"},{"location":"providers/Prompts/expand/#returns","text":"list","title":"Returns"},{"location":"providers/Prompts/input/","text":"input \u00b6 Source Hook for PyInquirer 'input' type prompts. Allows the user to input a string input. Source example Inputs \u00b6 Name Type Default Required Description message str None False String message to show when prompting. default any None False Default choice. Arguments \u00b6 Position Argument Type 1 message str Returns \u00b6 str Examples \u00b6 The input hook can be called in a number of ways compact_implicit-> : input compact_with_question-> : input Ask a question? input_expanded : -> : input message : A question? default : things ? compact_implicit >>> ? Ask a question? ? A question? things compact_implicit : <user input> compact_with_question : <user input> input_expanded : <user input>","title":"input"},{"location":"providers/Prompts/input/#input","text":"Source Hook for PyInquirer 'input' type prompts. Allows the user to input a string input. Source example","title":"input"},{"location":"providers/Prompts/input/#inputs","text":"Name Type Default Required Description message str None False String message to show when prompting. default any None False Default choice.","title":"Inputs"},{"location":"providers/Prompts/input/#arguments","text":"Position Argument Type 1 message str","title":"Arguments"},{"location":"providers/Prompts/input/#returns","text":"str","title":"Returns"},{"location":"providers/Prompts/input/#examples","text":"The input hook can be called in a number of ways compact_implicit-> : input compact_with_question-> : input Ask a question? input_expanded : -> : input message : A question? default : things ? compact_implicit >>> ? Ask a question? ? A question? things compact_implicit : <user input> compact_with_question : <user input> input_expanded : <user input>","title":"Examples"},{"location":"providers/Prompts/password/","text":"password \u00b6 Source Hook for PyInquirer password type prompts. Masks the input as the user types it in. Source example Inputs \u00b6 Name Type Default Required Description default any None False Default choice. message str None False String message to show when prompting. Arguments \u00b6 Position Argument Type 1 message str 2 default any Returns \u00b6 str","title":"password"},{"location":"providers/Prompts/password/#password","text":"Source Hook for PyInquirer password type prompts. Masks the input as the user types it in. Source example","title":"password"},{"location":"providers/Prompts/password/#inputs","text":"Name Type Default Required Description default any None False Default choice. message str None False String message to show when prompting.","title":"Inputs"},{"location":"providers/Prompts/password/#arguments","text":"Position Argument Type 1 message str 2 default any","title":"Arguments"},{"location":"providers/Prompts/password/#returns","text":"str","title":"Returns"},{"location":"providers/Prompts/rawlist/","text":"rawlist \u00b6 Source Hook for PyInquirer 'rawlist' type prompts. Similar to select hook with lessflexibility. Source example Inputs \u00b6 Name Type Default Required Description default any None False Default choice. message str None False String message to show when prompting. choices list None True A list of choices. Arguments \u00b6 Position Argument Type 1 message str 2 default any Returns \u00b6 list","title":"rawlist"},{"location":"providers/Prompts/rawlist/#rawlist","text":"Source Hook for PyInquirer 'rawlist' type prompts. Similar to select hook with lessflexibility. Source example","title":"rawlist"},{"location":"providers/Prompts/rawlist/#inputs","text":"Name Type Default Required Description default any None False Default choice. message str None False String message to show when prompting. choices list None True A list of choices.","title":"Inputs"},{"location":"providers/Prompts/rawlist/#arguments","text":"Position Argument Type 1 message str 2 default any","title":"Arguments"},{"location":"providers/Prompts/rawlist/#returns","text":"list","title":"Returns"},{"location":"providers/Prompts/select/","text":"select \u00b6 Source Hook for PyInquirer 'list' type prompts, a single selector that returns a string. Takes in two forms of choices inputs, list of string or list of maps with the key as the question and the value as the output. Source example Inputs \u00b6 Name Type Default Required Description message str None False String message to show when prompting. choices union None True List of strings or dicts with keys as output and values as display. index bool False False Boolean to return the index instead of the answer Arguments \u00b6 Position Argument Type 1 message str Returns \u00b6 any Examples \u00b6 The basic versions of the select can be called in these ways compact-> : select \"What do you want?\" ['stuff','things'] expanded : -> : select choices : - stuff - things ? What do you want? stuff ? expanded >>> ( Use arrow keys ) stuff \u276f things compact : stuff expanded : things Other versions can use custom prompts for the choices selection : -> : checkbox message : What you do? checked : true choices : - I do stuff : stuff - I do things : things ? What you do? (<up>, <down> to move, <space> to select, <a> to toggle, <i> to invert) \u276f\u25cf I do stuff \u25cf I do things Can also take the APIs normal form selection : -> : checkbox message : What you do? choices : - name : stuff - name : things checked : true ? What you do? (<up>, <down> to move, <space> to select, <a> to toggle, <i> to invert) \u276f\u25cb stuff \u25cf things","title":"select"},{"location":"providers/Prompts/select/#select","text":"Source Hook for PyInquirer 'list' type prompts, a single selector that returns a string. Takes in two forms of choices inputs, list of string or list of maps with the key as the question and the value as the output. Source example","title":"select"},{"location":"providers/Prompts/select/#inputs","text":"Name Type Default Required Description message str None False String message to show when prompting. choices union None True List of strings or dicts with keys as output and values as display. index bool False False Boolean to return the index instead of the answer","title":"Inputs"},{"location":"providers/Prompts/select/#arguments","text":"Position Argument Type 1 message str","title":"Arguments"},{"location":"providers/Prompts/select/#returns","text":"any","title":"Returns"},{"location":"providers/Prompts/select/#examples","text":"The basic versions of the select can be called in these ways compact-> : select \"What do you want?\" ['stuff','things'] expanded : -> : select choices : - stuff - things ? What do you want? stuff ? expanded >>> ( Use arrow keys ) stuff \u276f things compact : stuff expanded : things Other versions can use custom prompts for the choices selection : -> : checkbox message : What you do? checked : true choices : - I do stuff : stuff - I do things : things ? What you do? (<up>, <down> to move, <space> to select, <a> to toggle, <i> to invert) \u276f\u25cf I do stuff \u25cf I do things Can also take the APIs normal form selection : -> : checkbox message : What you do? choices : - name : stuff - name : things checked : true ? What you do? (<up>, <down> to move, <space> to select, <a> to toggle, <i> to invert) \u276f\u25cb stuff \u25cf things","title":"Examples"},{"location":"providers/Strings/","text":"String Provider \u00b6 String manipulation and random string generators. Hooks \u00b6 Type Description Return base64_decode Hook for base64_decode . Base64 decodes a string. str base64_encode Hook for base64_encode . Base64 encodes a string. str join Join a list of strings with a separator. None random_hex Hook for random_hex . Lists the contents of a directory. str random_string Hook for random_string . Lists the contents of a directory. str split Hook for splitting a string into as list based on a separator. None Examples \u00b6 split \u00b6 Splits a string into a list based on a separator compact-> : split stuff-and-things - expanded : -> : split input : stuff-and-things separator : \"-\" compact : - stuff - and - things expanded : - stuff - and - things join \u00b6 Joins a list of strings into a single string compact-> : join ['stuff','and','things'] expanded : -> : join input : - stuff - and - things separator : - compact : stuff/and/things expanded : stuff-and-things random_string \u00b6 Creates a random string of letters and digits compact-> : random_string expanded : -> : random_string length : 4 case : upper compact : ab7dhfo0 expanded : AB7D random_hex \u00b6 Creates a random hex of letters and digits compact-> : random_hex 4 expanded : -> : random_hex length : 4 compact : a01f expanded : a01f","title":"Index"},{"location":"providers/Strings/#string-provider","text":"String manipulation and random string generators.","title":"String Provider"},{"location":"providers/Strings/#hooks","text":"Type Description Return base64_decode Hook for base64_decode . Base64 decodes a string. str base64_encode Hook for base64_encode . Base64 encodes a string. str join Join a list of strings with a separator. None random_hex Hook for random_hex . Lists the contents of a directory. str random_string Hook for random_string . Lists the contents of a directory. str split Hook for splitting a string into as list based on a separator. None","title":"Hooks"},{"location":"providers/Strings/#examples","text":"","title":"Examples"},{"location":"providers/Strings/#split","text":"Splits a string into a list based on a separator compact-> : split stuff-and-things - expanded : -> : split input : stuff-and-things separator : \"-\" compact : - stuff - and - things expanded : - stuff - and - things","title":"split"},{"location":"providers/Strings/#join","text":"Joins a list of strings into a single string compact-> : join ['stuff','and','things'] expanded : -> : join input : - stuff - and - things separator : - compact : stuff/and/things expanded : stuff-and-things","title":"join"},{"location":"providers/Strings/#random_string","text":"Creates a random string of letters and digits compact-> : random_string expanded : -> : random_string length : 4 case : upper compact : ab7dhfo0 expanded : AB7D","title":"random_string"},{"location":"providers/Strings/#random_hex","text":"Creates a random hex of letters and digits compact-> : random_hex 4 expanded : -> : random_hex length : 4 compact : a01f expanded : a01f","title":"random_hex"},{"location":"providers/Strings/base64_decode/","text":"base64_decode \u00b6 Source Hook for base64_decode . Base64 decodes a string. Inputs \u00b6 Name Type Default Required Description input str None True A string to decode. Arguments \u00b6 Position Argument Type 1 input str Returns \u00b6 str","title":"base64_decode"},{"location":"providers/Strings/base64_decode/#base64_decode","text":"Source Hook for base64_decode . Base64 decodes a string.","title":"base64_decode"},{"location":"providers/Strings/base64_decode/#inputs","text":"Name Type Default Required Description input str None True A string to decode.","title":"Inputs"},{"location":"providers/Strings/base64_decode/#arguments","text":"Position Argument Type 1 input str","title":"Arguments"},{"location":"providers/Strings/base64_decode/#returns","text":"str","title":"Returns"},{"location":"providers/Strings/base64_encode/","text":"base64_encode \u00b6 Source Hook for base64_encode . Base64 encodes a string. Inputs \u00b6 Name Type Default Required Description input str None True A string to encode. Arguments \u00b6 Position Argument Type 1 input str Returns \u00b6 str","title":"base64_encode"},{"location":"providers/Strings/base64_encode/#base64_encode","text":"Source Hook for base64_encode . Base64 encodes a string.","title":"base64_encode"},{"location":"providers/Strings/base64_encode/#inputs","text":"Name Type Default Required Description input str None True A string to encode.","title":"Inputs"},{"location":"providers/Strings/base64_encode/#arguments","text":"Position Argument Type 1 input str","title":"Arguments"},{"location":"providers/Strings/base64_encode/#returns","text":"str","title":"Returns"},{"location":"providers/Strings/join/","text":"join \u00b6 Source Join a list of strings with a separator. Inputs \u00b6 Name Type Default Required Description input str None True A list of strings to join. separator str False String separator. Arguments \u00b6 Position Argument Type 1 input str 2 separator str Returns \u00b6 None Examples \u00b6 join \u00b6 Joins a list of strings into a single string compact-> : join ['stuff','and','things'] expanded : -> : join input : - stuff - and - things separator : - compact : stuff/and/things expanded : stuff-and-things","title":"join"},{"location":"providers/Strings/join/#join","text":"Source Join a list of strings with a separator.","title":"join"},{"location":"providers/Strings/join/#inputs","text":"Name Type Default Required Description input str None True A list of strings to join. separator str False String separator.","title":"Inputs"},{"location":"providers/Strings/join/#arguments","text":"Position Argument Type 1 input str 2 separator str","title":"Arguments"},{"location":"providers/Strings/join/#returns","text":"None","title":"Returns"},{"location":"providers/Strings/join/#examples","text":"","title":"Examples"},{"location":"providers/Strings/join/#join_1","text":"Joins a list of strings into a single string compact-> : join ['stuff','and','things'] expanded : -> : join input : - stuff - and - things separator : - compact : stuff/and/things expanded : stuff-and-things","title":"join"},{"location":"providers/Strings/random_hex/","text":"random_hex \u00b6 Source Hook for random_hex . Lists the contents of a directory. Inputs \u00b6 Name Type Default Required Description length int 8 False Number for number of digits - default 8 Arguments \u00b6 Position Argument Type 1 length int Returns \u00b6 str Examples \u00b6 random_hex \u00b6 Creates a random hex of letters and digits compact-> : random_hex 4 expanded : -> : random_hex length : 4 compact : a01f expanded : a01f","title":"random_hex"},{"location":"providers/Strings/random_hex/#random_hex","text":"Source Hook for random_hex . Lists the contents of a directory.","title":"random_hex"},{"location":"providers/Strings/random_hex/#inputs","text":"Name Type Default Required Description length int 8 False Number for number of digits - default 8","title":"Inputs"},{"location":"providers/Strings/random_hex/#arguments","text":"Position Argument Type 1 length int","title":"Arguments"},{"location":"providers/Strings/random_hex/#returns","text":"str","title":"Returns"},{"location":"providers/Strings/random_hex/#examples","text":"","title":"Examples"},{"location":"providers/Strings/random_hex/#random_hex_1","text":"Creates a random hex of letters and digits compact-> : random_hex 4 expanded : -> : random_hex length : 4 compact : a01f expanded : a01f","title":"random_hex"},{"location":"providers/Strings/random_string/","text":"random_string \u00b6 Source Hook for random_string . Lists the contents of a directory. Inputs \u00b6 Name Type Default Required Description length int 8 False Length of the random string. case str lower False Case of output, one of upper or lower upper bool False False Flag for upper case. Overrides case . Arguments \u00b6 Position Argument Type 1 length int 2 case str Returns \u00b6 str Examples \u00b6 random_string \u00b6 Creates a random string of letters and digits compact-> : random_string expanded : -> : random_string length : 4 case : upper compact : ab7dhfo0 expanded : AB7D","title":"random_string"},{"location":"providers/Strings/random_string/#random_string","text":"Source Hook for random_string . Lists the contents of a directory.","title":"random_string"},{"location":"providers/Strings/random_string/#inputs","text":"Name Type Default Required Description length int 8 False Length of the random string. case str lower False Case of output, one of upper or lower upper bool False False Flag for upper case. Overrides case .","title":"Inputs"},{"location":"providers/Strings/random_string/#arguments","text":"Position Argument Type 1 length int 2 case str","title":"Arguments"},{"location":"providers/Strings/random_string/#returns","text":"str","title":"Returns"},{"location":"providers/Strings/random_string/#examples","text":"","title":"Examples"},{"location":"providers/Strings/random_string/#random_string_1","text":"Creates a random string of letters and digits compact-> : random_string expanded : -> : random_string length : 4 case : upper compact : ab7dhfo0 expanded : AB7D","title":"random_string"},{"location":"providers/Strings/split/","text":"split \u00b6 Source Hook for splitting a string into as list based on a separator. Inputs \u00b6 Name Type Default Required Description input str None True A list of string to split or just a string separator str / False String separator Arguments \u00b6 Position Argument Type 1 input str 2 separator str Returns \u00b6 None Examples \u00b6 split \u00b6 Splits a string into a list based on a separator compact-> : split stuff-and-things - expanded : -> : split input : stuff-and-things separator : \"-\" compact : - stuff - and - things expanded : - stuff - and - things","title":"split"},{"location":"providers/Strings/split/#split","text":"Source Hook for splitting a string into as list based on a separator.","title":"split"},{"location":"providers/Strings/split/#inputs","text":"Name Type Default Required Description input str None True A list of string to split or just a string separator str / False String separator","title":"Inputs"},{"location":"providers/Strings/split/#arguments","text":"Position Argument Type 1 input str 2 separator str","title":"Arguments"},{"location":"providers/Strings/split/#returns","text":"None","title":"Returns"},{"location":"providers/Strings/split/#examples","text":"","title":"Examples"},{"location":"providers/Strings/split/#split_1","text":"Splits a string into a list based on a separator compact-> : split stuff-and-things - expanded : -> : split input : stuff-and-things separator : \"-\" compact : - stuff - and - things expanded : - stuff - and - things","title":"split"},{"location":"providers/Tackle/","text":"Tackle Provider \u00b6 Hooks that interface with tackle's parser. Core to most tackle scripts. Hooks \u00b6 Type Description Return block Hook for blocks of hooks. This is a special case where items are parsed like a normal context with the added benefit of maintaining a temporary_context so that items on the same level can be accessed in memory / rendered. Normally executed via a macro with an arrow. This the only hook the core parser is aware of as it is parsing. union debug Hook for debugging that prints the output context and pauses runtime. NoneType exit Exit the parser with an exit code. NoneType import Hook for importing external tackle-box providers. Does not actually execute thebase tackle in the provider but merely makes the hooks and functions available tobe used in the context. Takes any type as an argument to to build src and version import targets. NoneType literal Literally return the input. any provider_docs Hook for extracting provider metadata for building docs. union tackle Hook for calling external tackle providers. dict var Hook for rendering a variable based on an input. Only useful for rendering asotherwise you wouldn't need this hook at all. Does recursion when the value beingrendered is still renderable - ie a template within a template. any Examples \u00b6 debug \u00b6 Hook to debug the context. Prints the context and holds the execution for user input. d-> : debug tackle \u00b6 Run other tackle providers / tackle files compact_provider-> : tackle robcxyz/tackle-provider compact_file-> : tackle path/to/tackle/file.yaml expanded : -> : tackle input_string : robcxyz/tackle-provider checkout : dev # Branch / version to checkout context_file : path/to/file.yaml # Path to a file within a remote provider extra_context : # Additional context to be brought in when running the tackle provider stuff : things import \u00b6 Import other tackle providers to allow use of other hooks. Typically run privately - ie _> to keep a clean context compact_> : import robcxyz/tackle-provider expanded : -> : tackle src : robcxyz/tackle-provider version : dev # Branch / version to checkout block \u00b6 Run a block of tackle calls so that logic methods (ie if , for ) can be run on a group of keys. Block hooks are common so there is a macro form of this hook (ie no explicit hook call). stuff : things macro_version-> : if : stuff == 'things' stuff-> : print other_things things-> : print \"{{ stuff }}\" --if \"{{ stuff == 'things' }}\" # Equivalent to expanded : -> : block items : merge : true stuff-> : print other_things things-> : print \"{{ stuff }}\" --if \"{{ stuff == 'things' }}\" var \u00b6 Hook to render a variable. var hooks are common so there is a macro form of this hook (ie no explicit hook call). stuff : things macro_version-> : \"{{stuff}}\" # Any hook call that starts with `{{` is considered a var hook compact-> : var \"{{stuff}}\" expanded : -> : var input : \"{{stuff}}\" # input's are rendered recursively so this flag only does one level of rendering # Useful when the input is itself a template and you don't want it to be rendered no_recursion : true provider_docs \u00b6 Extract metadata about the provider example : type : provider_docs chdir : \"..\" provider : docs","title":"Index"},{"location":"providers/Tackle/#tackle-provider","text":"Hooks that interface with tackle's parser. Core to most tackle scripts.","title":"Tackle Provider"},{"location":"providers/Tackle/#hooks","text":"Type Description Return block Hook for blocks of hooks. This is a special case where items are parsed like a normal context with the added benefit of maintaining a temporary_context so that items on the same level can be accessed in memory / rendered. Normally executed via a macro with an arrow. This the only hook the core parser is aware of as it is parsing. union debug Hook for debugging that prints the output context and pauses runtime. NoneType exit Exit the parser with an exit code. NoneType import Hook for importing external tackle-box providers. Does not actually execute thebase tackle in the provider but merely makes the hooks and functions available tobe used in the context. Takes any type as an argument to to build src and version import targets. NoneType literal Literally return the input. any provider_docs Hook for extracting provider metadata for building docs. union tackle Hook for calling external tackle providers. dict var Hook for rendering a variable based on an input. Only useful for rendering asotherwise you wouldn't need this hook at all. Does recursion when the value beingrendered is still renderable - ie a template within a template. any","title":"Hooks"},{"location":"providers/Tackle/#examples","text":"","title":"Examples"},{"location":"providers/Tackle/#debug","text":"Hook to debug the context. Prints the context and holds the execution for user input. d-> : debug","title":"debug"},{"location":"providers/Tackle/#tackle","text":"Run other tackle providers / tackle files compact_provider-> : tackle robcxyz/tackle-provider compact_file-> : tackle path/to/tackle/file.yaml expanded : -> : tackle input_string : robcxyz/tackle-provider checkout : dev # Branch / version to checkout context_file : path/to/file.yaml # Path to a file within a remote provider extra_context : # Additional context to be brought in when running the tackle provider stuff : things","title":"tackle"},{"location":"providers/Tackle/#import","text":"Import other tackle providers to allow use of other hooks. Typically run privately - ie _> to keep a clean context compact_> : import robcxyz/tackle-provider expanded : -> : tackle src : robcxyz/tackle-provider version : dev # Branch / version to checkout","title":"import"},{"location":"providers/Tackle/#block","text":"Run a block of tackle calls so that logic methods (ie if , for ) can be run on a group of keys. Block hooks are common so there is a macro form of this hook (ie no explicit hook call). stuff : things macro_version-> : if : stuff == 'things' stuff-> : print other_things things-> : print \"{{ stuff }}\" --if \"{{ stuff == 'things' }}\" # Equivalent to expanded : -> : block items : merge : true stuff-> : print other_things things-> : print \"{{ stuff }}\" --if \"{{ stuff == 'things' }}\"","title":"block"},{"location":"providers/Tackle/#var","text":"Hook to render a variable. var hooks are common so there is a macro form of this hook (ie no explicit hook call). stuff : things macro_version-> : \"{{stuff}}\" # Any hook call that starts with `{{` is considered a var hook compact-> : var \"{{stuff}}\" expanded : -> : var input : \"{{stuff}}\" # input's are rendered recursively so this flag only does one level of rendering # Useful when the input is itself a template and you don't want it to be rendered no_recursion : true","title":"var"},{"location":"providers/Tackle/#provider_docs","text":"Extract metadata about the provider example : type : provider_docs chdir : \"..\" provider : docs","title":"provider_docs"},{"location":"providers/Tackle/block/","text":"block \u00b6 Source Hook for blocks of hooks. This is a special case where items are parsed like a normal context with the added benefit of maintaining a temporary_context so that items on the same level can be accessed in memory / rendered. Normally executed via a macro with an arrow. This the only hook the core parser is aware of as it is parsing. Inputs \u00b6 Name Type Default Required Description items union None True Items to be parsed like a normal input. Returns \u00b6 union Examples \u00b6 Full form \u00b6 This is the full form of block and generally is not advised. See short form example. stuff : things block hook : -> : block items : stuff : other things things-> : print more things --if \"{{ stuff == 'other things' }}\" stuff : things block hook : stuff : other things things : more things Short form \u00b6 Because block hooks are so common, there is a re-write / short form of this hook. stuff : things block hook : -> : block merge : true # This flags merges the output up items : stuff : other things things-> : print more things --if \"{{ stuff == 'other things' }}\" stuff : other things things : more things","title":"block"},{"location":"providers/Tackle/block/#block","text":"Source Hook for blocks of hooks. This is a special case where items are parsed like a normal context with the added benefit of maintaining a temporary_context so that items on the same level can be accessed in memory / rendered. Normally executed via a macro with an arrow. This the only hook the core parser is aware of as it is parsing.","title":"block"},{"location":"providers/Tackle/block/#inputs","text":"Name Type Default Required Description items union None True Items to be parsed like a normal input.","title":"Inputs"},{"location":"providers/Tackle/block/#returns","text":"union","title":"Returns"},{"location":"providers/Tackle/block/#examples","text":"","title":"Examples"},{"location":"providers/Tackle/block/#full-form","text":"This is the full form of block and generally is not advised. See short form example. stuff : things block hook : -> : block items : stuff : other things things-> : print more things --if \"{{ stuff == 'other things' }}\" stuff : things block hook : stuff : other things things : more things","title":"Full form"},{"location":"providers/Tackle/block/#short-form","text":"Because block hooks are so common, there is a re-write / short form of this hook. stuff : things block hook : -> : block merge : true # This flags merges the output up items : stuff : other things things-> : print more things --if \"{{ stuff == 'other things' }}\" stuff : other things things : more things","title":"Short form"},{"location":"providers/Tackle/debug/","text":"debug \u00b6 Source Hook for debugging that prints the output context and pauses runtime. Inputs \u00b6 Name Type Default Required Description context str None False Which context to examine. One of public , private , temporary , or existing . Omit for all. Returns \u00b6 NoneType","title":"debug"},{"location":"providers/Tackle/debug/#debug","text":"Source Hook for debugging that prints the output context and pauses runtime.","title":"debug"},{"location":"providers/Tackle/debug/#inputs","text":"Name Type Default Required Description context str None False Which context to examine. One of public , private , temporary , or existing . Omit for all.","title":"Inputs"},{"location":"providers/Tackle/debug/#returns","text":"NoneType","title":"Returns"},{"location":"providers/Tackle/exit/","text":"exit \u00b6 Source Exit the parser with an exit code. Inputs \u00b6 Name Type Default Required Description code int 0 False The exit code. Arguments \u00b6 Position Argument Type 1 code int Returns \u00b6 NoneType","title":"exit"},{"location":"providers/Tackle/exit/#exit","text":"Source Exit the parser with an exit code.","title":"exit"},{"location":"providers/Tackle/exit/#inputs","text":"Name Type Default Required Description code int 0 False The exit code.","title":"Inputs"},{"location":"providers/Tackle/exit/#arguments","text":"Position Argument Type 1 code int","title":"Arguments"},{"location":"providers/Tackle/exit/#returns","text":"NoneType","title":"Returns"},{"location":"providers/Tackle/import/","text":"import \u00b6 Source Hook for importing external tackle-box providers. Does not actually execute thebase tackle in the provider but merely makes the hooks and functions available tobe used in the context. Takes any type as an argument to to build src and version import targets. Inputs \u00b6 Name Type Default Required Description src any None True A str/list/dict as above. version str None False Version of src for remote imports. Arguments \u00b6 Position Argument Type 1 src any Returns \u00b6 NoneType","title":"import"},{"location":"providers/Tackle/import/#import","text":"Source Hook for importing external tackle-box providers. Does not actually execute thebase tackle in the provider but merely makes the hooks and functions available tobe used in the context. Takes any type as an argument to to build src and version import targets.","title":"import"},{"location":"providers/Tackle/import/#inputs","text":"Name Type Default Required Description src any None True A str/list/dict as above. version str None False Version of src for remote imports.","title":"Inputs"},{"location":"providers/Tackle/import/#arguments","text":"Position Argument Type 1 src any","title":"Arguments"},{"location":"providers/Tackle/import/#returns","text":"NoneType","title":"Returns"},{"location":"providers/Tackle/literal/","text":"literal \u00b6 Source Literally return the input. Inputs \u00b6 Name Type Default Required Description input any None True Any variable input. Arguments \u00b6 Position Argument Type 1 input any Returns \u00b6 any","title":"literal"},{"location":"providers/Tackle/literal/#literal","text":"Source Literally return the input.","title":"literal"},{"location":"providers/Tackle/literal/#inputs","text":"Name Type Default Required Description input any None True Any variable input.","title":"Inputs"},{"location":"providers/Tackle/literal/#arguments","text":"Position Argument Type 1 input any","title":"Arguments"},{"location":"providers/Tackle/literal/#returns","text":"any","title":"Returns"},{"location":"providers/Tackle/provider_docs/","text":"provider_docs \u00b6 Source Hook for extracting provider metadata for building docs. Warning: Hook is experimental. Expect changes. Inputs \u00b6 Name Type Default Required Description path str . False The path to the provider. output str . False The path to output the docs to. provider str None False The provider name. output_schemas bool False False Output the json schema instead. hooks_dir str hooks False Directory hooks are in. Arguments \u00b6 Position Argument Type 1 path str 2 output str Returns \u00b6 union - Returns a dictionary with metadata about a provider and it's hooks or a list of schemas when run with output_schemas .","title":"provider_docs"},{"location":"providers/Tackle/provider_docs/#provider_docs","text":"Source Hook for extracting provider metadata for building docs. Warning: Hook is experimental. Expect changes.","title":"provider_docs"},{"location":"providers/Tackle/provider_docs/#inputs","text":"Name Type Default Required Description path str . False The path to the provider. output str . False The path to output the docs to. provider str None False The provider name. output_schemas bool False False Output the json schema instead. hooks_dir str hooks False Directory hooks are in.","title":"Inputs"},{"location":"providers/Tackle/provider_docs/#arguments","text":"Position Argument Type 1 path str 2 output str","title":"Arguments"},{"location":"providers/Tackle/provider_docs/#returns","text":"union - Returns a dictionary with metadata about a provider and it's hooks or a list of schemas when run with output_schemas .","title":"Returns"},{"location":"providers/Tackle/tackle/","text":"tackle \u00b6 Source Hook for calling external tackle providers. Inputs \u00b6 Name Type Default Required Description input_string str None False The input can be one of repo, file path, directory with tackle.yaml, zip file, or if left blank parent tackle file. checkout str None False The branch or version to checkout for repo type inputs_strings. context_file str None False The file to run inside a repo input. extra_context dict None False Any additional context to use when calling the hook. Like existing context. context dict None False A context to use that overrides the current context. password SecretStr None False A password to use for repo inputs. directory str None False The directory to run inside for repo inputs. find_in_parent bool False False Search for target in parent directory. Only relevant for local targets. override dict {} False A dictionary of keys to override. Arguments \u00b6 Position Argument Type 1 input_string str Returns \u00b6 dict Examples \u00b6 Basic \u00b6 The most minimal implementation. Call is same as how you would call tackle from command line. example-> : tackle path/to/dir/or/github With context \u00b6 Sometimes you want to ship a specific context in when calling the other tackle. example : -> : tackle path/to/dir/or/github extra_context : stuff : things Remote providers \u00b6 Providers are often remote so additional parameters are relevant in this setting. example : -> : tackle input_string : robcxyz/tackle-provider checkout : dev # Branch / version to checkout context_file : path/to/file.yaml # Path to a file within a remote provider","title":"tackle"},{"location":"providers/Tackle/tackle/#tackle","text":"Source Hook for calling external tackle providers.","title":"tackle"},{"location":"providers/Tackle/tackle/#inputs","text":"Name Type Default Required Description input_string str None False The input can be one of repo, file path, directory with tackle.yaml, zip file, or if left blank parent tackle file. checkout str None False The branch or version to checkout for repo type inputs_strings. context_file str None False The file to run inside a repo input. extra_context dict None False Any additional context to use when calling the hook. Like existing context. context dict None False A context to use that overrides the current context. password SecretStr None False A password to use for repo inputs. directory str None False The directory to run inside for repo inputs. find_in_parent bool False False Search for target in parent directory. Only relevant for local targets. override dict {} False A dictionary of keys to override.","title":"Inputs"},{"location":"providers/Tackle/tackle/#arguments","text":"Position Argument Type 1 input_string str","title":"Arguments"},{"location":"providers/Tackle/tackle/#returns","text":"dict","title":"Returns"},{"location":"providers/Tackle/tackle/#examples","text":"","title":"Examples"},{"location":"providers/Tackle/tackle/#basic","text":"The most minimal implementation. Call is same as how you would call tackle from command line. example-> : tackle path/to/dir/or/github","title":"Basic"},{"location":"providers/Tackle/tackle/#with-context","text":"Sometimes you want to ship a specific context in when calling the other tackle. example : -> : tackle path/to/dir/or/github extra_context : stuff : things","title":"With context"},{"location":"providers/Tackle/tackle/#remote-providers","text":"Providers are often remote so additional parameters are relevant in this setting. example : -> : tackle input_string : robcxyz/tackle-provider checkout : dev # Branch / version to checkout context_file : path/to/file.yaml # Path to a file within a remote provider","title":"Remote providers"},{"location":"providers/Tackle/var/","text":"var \u00b6 Source Hook for rendering a variable based on an input. Only useful for rendering asotherwise you wouldn't need this hook at all. Does recursion when the value beingrendered is still renderable - ie a template within a template. Inputs \u00b6 Name Type Default Required Description input any None True Any variable input. no_recursion bool False False Don't recursively render embedded templates. Arguments \u00b6 Position Argument Type 1 input any Returns \u00b6 any","title":"var"},{"location":"providers/Tackle/var/#var","text":"Source Hook for rendering a variable based on an input. Only useful for rendering asotherwise you wouldn't need this hook at all. Does recursion when the value beingrendered is still renderable - ie a template within a template.","title":"var"},{"location":"providers/Tackle/var/#inputs","text":"Name Type Default Required Description input any None True Any variable input. no_recursion bool False False Don't recursively render embedded templates.","title":"Inputs"},{"location":"providers/Tackle/var/#arguments","text":"Position Argument Type 1 input any","title":"Arguments"},{"location":"providers/Tackle/var/#returns","text":"any","title":"Returns"},{"location":"providers/Toml/","text":"toml \u00b6 Source Hook for reading and writing yaml. Hook reads from path if no data field is provided, otherwise it writes the data to path . Inputs \u00b6 Name Type Default Required Description path str None True The file path to put read or write to. data union None False Map/list or renderable string to a map/list key to write. Arguments \u00b6 Position Argument Type 1 path str 2 data union Returns \u00b6 union Examples \u00b6 Read toml \u00b6 Read a toml file into a key expanded : -> : toml path : path/to/toml/file.toml compact-> : toml path/to/toml/file.toml Write toml \u00b6 Write a toml file from a key stuff : and : things expanded : -> : toml path : path/to/toml/file.toml contents : \"{{ stuff }}\" compact-> : toml path/to/toml/file.toml \"{{ this }}\"","title":"Index"},{"location":"providers/Toml/#toml","text":"Source Hook for reading and writing yaml. Hook reads from path if no data field is provided, otherwise it writes the data to path .","title":"toml"},{"location":"providers/Toml/#inputs","text":"Name Type Default Required Description path str None True The file path to put read or write to. data union None False Map/list or renderable string to a map/list key to write.","title":"Inputs"},{"location":"providers/Toml/#arguments","text":"Position Argument Type 1 path str 2 data union","title":"Arguments"},{"location":"providers/Toml/#returns","text":"union","title":"Returns"},{"location":"providers/Toml/#examples","text":"","title":"Examples"},{"location":"providers/Toml/#read-toml","text":"Read a toml file into a key expanded : -> : toml path : path/to/toml/file.toml compact-> : toml path/to/toml/file.toml","title":"Read toml"},{"location":"providers/Toml/#write-toml","text":"Write a toml file from a key stuff : and : things expanded : -> : toml path : path/to/toml/file.toml contents : \"{{ stuff }}\" compact-> : toml path/to/toml/file.toml \"{{ this }}\"","title":"Write toml"},{"location":"providers/Types/","text":"Types Provider \u00b6 Hooks for getting and setting a variable's type. Hooks \u00b6 Type Description Return bool Hook for casting a variable to a bool type. bool float Hook for casting a variable to a float type. float int Hook for casting a variable to an integer type. int type Hook for getting the type of a variable. str Examples \u00b6 type \u00b6 Hook to get type of variable. stuff : things map : stuff : things stuff_type-> : type stuff # rendered by default map_type-> : type map stuff : things map : stuff : things stuff_type : str map_type : dict","title":"Index"},{"location":"providers/Types/#types-provider","text":"Hooks for getting and setting a variable's type.","title":"Types Provider"},{"location":"providers/Types/#hooks","text":"Type Description Return bool Hook for casting a variable to a bool type. bool float Hook for casting a variable to a float type. float int Hook for casting a variable to an integer type. int type Hook for getting the type of a variable. str","title":"Hooks"},{"location":"providers/Types/#examples","text":"","title":"Examples"},{"location":"providers/Types/#type","text":"Hook to get type of variable. stuff : things map : stuff : things stuff_type-> : type stuff # rendered by default map_type-> : type map stuff : things map : stuff : things stuff_type : str map_type : dict","title":"type"},{"location":"providers/Types/bool/","text":"bool \u00b6 Source Hook for casting a variable to a bool type. Inputs \u00b6 Name Type Default Required Description input any None True Any variable input. Arguments \u00b6 Position Argument Type 1 input any Returns \u00b6 bool","title":"bool"},{"location":"providers/Types/bool/#bool","text":"Source Hook for casting a variable to a bool type.","title":"bool"},{"location":"providers/Types/bool/#inputs","text":"Name Type Default Required Description input any None True Any variable input.","title":"Inputs"},{"location":"providers/Types/bool/#arguments","text":"Position Argument Type 1 input any","title":"Arguments"},{"location":"providers/Types/bool/#returns","text":"bool","title":"Returns"},{"location":"providers/Types/float/","text":"float \u00b6 Source Hook for casting a variable to a float type. Inputs \u00b6 Name Type Default Required Description input any None True Any variable input. Arguments \u00b6 Position Argument Type 1 input any Returns \u00b6 float","title":"float"},{"location":"providers/Types/float/#float","text":"Source Hook for casting a variable to a float type.","title":"float"},{"location":"providers/Types/float/#inputs","text":"Name Type Default Required Description input any None True Any variable input.","title":"Inputs"},{"location":"providers/Types/float/#arguments","text":"Position Argument Type 1 input any","title":"Arguments"},{"location":"providers/Types/float/#returns","text":"float","title":"Returns"},{"location":"providers/Types/int/","text":"int \u00b6 Source Hook for casting a variable to an integer type. Inputs \u00b6 Name Type Default Required Description input any None True Any variable input. Arguments \u00b6 Position Argument Type 1 input any Returns \u00b6 int","title":"int"},{"location":"providers/Types/int/#int","text":"Source Hook for casting a variable to an integer type.","title":"int"},{"location":"providers/Types/int/#inputs","text":"Name Type Default Required Description input any None True Any variable input.","title":"Inputs"},{"location":"providers/Types/int/#arguments","text":"Position Argument Type 1 input any","title":"Arguments"},{"location":"providers/Types/int/#returns","text":"int","title":"Returns"},{"location":"providers/Types/type/","text":"type \u00b6 Source Hook for getting the type of a variable. Inputs \u00b6 Name Type Default Required Description input any None True Any variable input. Arguments \u00b6 Position Argument Type 1 input any Returns \u00b6 str Examples \u00b6 Simple example. stuff : things map : stuff : things stuff_type-> : type stuff # rendered by default map_type-> : type map stuff : things map : stuff : things stuff_type : str map_type : dict","title":"type"},{"location":"providers/Types/type/#type","text":"Source Hook for getting the type of a variable.","title":"type"},{"location":"providers/Types/type/#inputs","text":"Name Type Default Required Description input any None True Any variable input.","title":"Inputs"},{"location":"providers/Types/type/#arguments","text":"Position Argument Type 1 input any","title":"Arguments"},{"location":"providers/Types/type/#returns","text":"str","title":"Returns"},{"location":"providers/Types/type/#examples","text":"Simple example. stuff : things map : stuff : things stuff_type-> : type stuff # rendered by default map_type-> : type map stuff : things map : stuff : things stuff_type : str map_type : dict","title":"Examples"},{"location":"providers/Web/","text":"Web Provider \u00b6 Allows access to web resources such as http requests and opening a web browser to a url. Wraps functionality of python requests library. Hooks \u00b6 Type Description Return http_delete Hook for Requests 'delete' type prompts. Link None http_get Hook for Requests 'get' type prompts. Link dict http_patch Hook for Requests 'patch' type prompts. Link None http_post Hook for Requests 'post' type prompts. Link dict http_put Hook for Requests 'put' type prompts. Link None webbrowser Open a web browser. Wraps python's webbrowser module. None Requirements \u00b6 requests Examples \u00b6 webbrowser \u00b6 Open a web browser. Wraps python's webbrowser module. compact-> : http_get https://jsonplaceholder.typicode.com/todos/1 expanded : -> : http_get url : https://jsonplaceholder.typicode.com/todos/1 http_get \u00b6 Make get request and store output in key compact-> : http_get https://jsonplaceholder.typicode.com/todos/1 expanded : -> : http_get url : https://jsonplaceholder.typicode.com/todos/1 http_put \u00b6 Make put request and store output in key input_json : stuff : things compact-> : http_post https://reqres.in/api/users input_json expanded : -> : http_post url : https://reqres.in/api/users input_json : stuff : things http_post \u00b6 Make post request and store output in key input_json : stuff : things compact-> : http_post https://reqres.in/api/users input_json expanded : -> : http_post url : https://reqres.in/api/users input_json : stuff : things http_delete \u00b6 Make delete request and store response code in key compact-> : http_delete https://reqres.in/api/users/2 expanded : -> : http_delete url : https://reqres.in/api/users/2 http_patch \u00b6 Make patch request and store response code in key input_json : stuff : things compact-> : http_patch https://reqres.in/api/users/2 input_json expanded : -> : http_patch url : https://reqres.in/api/users/2 input_json : stuff : things","title":"Index"},{"location":"providers/Web/#web-provider","text":"Allows access to web resources such as http requests and opening a web browser to a url. Wraps functionality of python requests library.","title":"Web Provider"},{"location":"providers/Web/#hooks","text":"Type Description Return http_delete Hook for Requests 'delete' type prompts. Link None http_get Hook for Requests 'get' type prompts. Link dict http_patch Hook for Requests 'patch' type prompts. Link None http_post Hook for Requests 'post' type prompts. Link dict http_put Hook for Requests 'put' type prompts. Link None webbrowser Open a web browser. Wraps python's webbrowser module. None","title":"Hooks"},{"location":"providers/Web/#requirements","text":"requests","title":"Requirements"},{"location":"providers/Web/#examples","text":"","title":"Examples"},{"location":"providers/Web/#webbrowser","text":"Open a web browser. Wraps python's webbrowser module. compact-> : http_get https://jsonplaceholder.typicode.com/todos/1 expanded : -> : http_get url : https://jsonplaceholder.typicode.com/todos/1","title":"webbrowser"},{"location":"providers/Web/#http_get","text":"Make get request and store output in key compact-> : http_get https://jsonplaceholder.typicode.com/todos/1 expanded : -> : http_get url : https://jsonplaceholder.typicode.com/todos/1","title":"http_get"},{"location":"providers/Web/#http_put","text":"Make put request and store output in key input_json : stuff : things compact-> : http_post https://reqres.in/api/users input_json expanded : -> : http_post url : https://reqres.in/api/users input_json : stuff : things","title":"http_put"},{"location":"providers/Web/#http_post","text":"Make post request and store output in key input_json : stuff : things compact-> : http_post https://reqres.in/api/users input_json expanded : -> : http_post url : https://reqres.in/api/users input_json : stuff : things","title":"http_post"},{"location":"providers/Web/#http_delete","text":"Make delete request and store response code in key compact-> : http_delete https://reqres.in/api/users/2 expanded : -> : http_delete url : https://reqres.in/api/users/2","title":"http_delete"},{"location":"providers/Web/#http_patch","text":"Make patch request and store response code in key input_json : stuff : things compact-> : http_patch https://reqres.in/api/users/2 input_json expanded : -> : http_patch url : https://reqres.in/api/users/2 input_json : stuff : things","title":"http_patch"},{"location":"providers/Web/http_delete/","text":"http_delete \u00b6 Source Hook for Requests 'delete' type prompts. Link Inputs \u00b6 Name Type Default Required Description url str None True URL for the new request object. kwargs union {} False Optional arguments that request takes. no_exit bool False False Whether to exit on non-200 response. Arguments \u00b6 Position Argument Type 1 url str 2 kwargs union Returns \u00b6 None Examples \u00b6 Make delete request and store response code in key compact-> : http_delete https://reqres.in/api/users/2 expanded : -> : http_delete url : https://reqres.in/api/users/2","title":"http_delete"},{"location":"providers/Web/http_delete/#http_delete","text":"Source Hook for Requests 'delete' type prompts. Link","title":"http_delete"},{"location":"providers/Web/http_delete/#inputs","text":"Name Type Default Required Description url str None True URL for the new request object. kwargs union {} False Optional arguments that request takes. no_exit bool False False Whether to exit on non-200 response.","title":"Inputs"},{"location":"providers/Web/http_delete/#arguments","text":"Position Argument Type 1 url str 2 kwargs union","title":"Arguments"},{"location":"providers/Web/http_delete/#returns","text":"None","title":"Returns"},{"location":"providers/Web/http_delete/#examples","text":"Make delete request and store response code in key compact-> : http_delete https://reqres.in/api/users/2 expanded : -> : http_delete url : https://reqres.in/api/users/2","title":"Examples"},{"location":"providers/Web/http_get/","text":"http_get \u00b6 Source Hook for Requests 'get' type prompts. Link Inputs \u00b6 Name Type Default Required Description url str None True URL for the new request object. kwargs union {} False Optional arguments that request takes. params dict None False Dictionary, list of tuples or bytes to send in the query string for the Request. no_exit bool False False Whether to exit on non-200 response. Arguments \u00b6 Position Argument Type 1 url str 2 kwargs union 3 params dict Returns \u00b6 dict Examples \u00b6 Make get request and store output in key compact-> : http_get https://jsonplaceholder.typicode.com/todos/1 expanded : -> : http_get url : https://jsonplaceholder.typicode.com/todos/1","title":"http_get"},{"location":"providers/Web/http_get/#http_get","text":"Source Hook for Requests 'get' type prompts. Link","title":"http_get"},{"location":"providers/Web/http_get/#inputs","text":"Name Type Default Required Description url str None True URL for the new request object. kwargs union {} False Optional arguments that request takes. params dict None False Dictionary, list of tuples or bytes to send in the query string for the Request. no_exit bool False False Whether to exit on non-200 response.","title":"Inputs"},{"location":"providers/Web/http_get/#arguments","text":"Position Argument Type 1 url str 2 kwargs union 3 params dict","title":"Arguments"},{"location":"providers/Web/http_get/#returns","text":"dict","title":"Returns"},{"location":"providers/Web/http_get/#examples","text":"Make get request and store output in key compact-> : http_get https://jsonplaceholder.typicode.com/todos/1 expanded : -> : http_get url : https://jsonplaceholder.typicode.com/todos/1","title":"Examples"},{"location":"providers/Web/http_patch/","text":"http_patch \u00b6 Source Hook for Requests 'patch' type prompts. Link Inputs \u00b6 Name Type Default Required Description url str None True URL for the new request object. kwargs union {} False Optional arguments that request takes. data any None False Dictionary, list of tuples, bytes, or file-like object to send in the body of the Request. input_json dict None False Json data to send in the body of the Request. no_exit bool False False Whether to exit on non-200 response. Arguments \u00b6 Position Argument Type 1 url str 2 data any 3 kwargs union Returns \u00b6 None Examples \u00b6 Make patch request and store response code in key input_json : stuff : things compact-> : http_patch https://reqres.in/api/users/2 input_json expanded : -> : http_patch url : https://reqres.in/api/users/2 input_json : stuff : things","title":"http_patch"},{"location":"providers/Web/http_patch/#http_patch","text":"Source Hook for Requests 'patch' type prompts. Link","title":"http_patch"},{"location":"providers/Web/http_patch/#inputs","text":"Name Type Default Required Description url str None True URL for the new request object. kwargs union {} False Optional arguments that request takes. data any None False Dictionary, list of tuples, bytes, or file-like object to send in the body of the Request. input_json dict None False Json data to send in the body of the Request. no_exit bool False False Whether to exit on non-200 response.","title":"Inputs"},{"location":"providers/Web/http_patch/#arguments","text":"Position Argument Type 1 url str 2 data any 3 kwargs union","title":"Arguments"},{"location":"providers/Web/http_patch/#returns","text":"None","title":"Returns"},{"location":"providers/Web/http_patch/#examples","text":"Make patch request and store response code in key input_json : stuff : things compact-> : http_patch https://reqres.in/api/users/2 input_json expanded : -> : http_patch url : https://reqres.in/api/users/2 input_json : stuff : things","title":"Examples"},{"location":"providers/Web/http_post/","text":"http_post \u00b6 Source Hook for Requests 'post' type prompts. Link Inputs \u00b6 Name Type Default Required Description url str None True URL for the new request object. kwargs union {} False Optional arguments that request takes. data any None False Dictionary, list of tuples, bytes, or file-like object to send in the body of the Request. input_json dict None False no_exit bool False False Whether to exit on non-200 response. Arguments \u00b6 Position Argument Type 1 url str 2 data any 3 kwargs union Returns \u00b6 dict Examples \u00b6 Make post request and store output in key input_json : stuff : things compact-> : http_post https://reqres.in/api/users input_json expanded : -> : http_post url : https://reqres.in/api/users input_json : stuff : things","title":"http_post"},{"location":"providers/Web/http_post/#http_post","text":"Source Hook for Requests 'post' type prompts. Link","title":"http_post"},{"location":"providers/Web/http_post/#inputs","text":"Name Type Default Required Description url str None True URL for the new request object. kwargs union {} False Optional arguments that request takes. data any None False Dictionary, list of tuples, bytes, or file-like object to send in the body of the Request. input_json dict None False no_exit bool False False Whether to exit on non-200 response.","title":"Inputs"},{"location":"providers/Web/http_post/#arguments","text":"Position Argument Type 1 url str 2 data any 3 kwargs union","title":"Arguments"},{"location":"providers/Web/http_post/#returns","text":"dict","title":"Returns"},{"location":"providers/Web/http_post/#examples","text":"Make post request and store output in key input_json : stuff : things compact-> : http_post https://reqres.in/api/users input_json expanded : -> : http_post url : https://reqres.in/api/users input_json : stuff : things","title":"Examples"},{"location":"providers/Web/http_put/","text":"http_put \u00b6 Source Hook for Requests 'put' type prompts. Link Inputs \u00b6 Name Type Default Required Description url str None True URL for the new request object. kwargs union {} False Optional arguments that request takes. data any None False Dictionary, list of tuples, bytes, or file-like object to send in the body of the Request. input_json dict None False Json data to send in the body of the Request. no_exit bool False False Whether to exit on non-200 response. Arguments \u00b6 Position Argument Type 1 url str 2 data any 3 kwargs union Returns \u00b6 None Examples \u00b6 Make put request and store output in key input_json : stuff : things compact-> : http_post https://reqres.in/api/users input_json expanded : -> : http_post url : https://reqres.in/api/users input_json : stuff : things","title":"http_put"},{"location":"providers/Web/http_put/#http_put","text":"Source Hook for Requests 'put' type prompts. Link","title":"http_put"},{"location":"providers/Web/http_put/#inputs","text":"Name Type Default Required Description url str None True URL for the new request object. kwargs union {} False Optional arguments that request takes. data any None False Dictionary, list of tuples, bytes, or file-like object to send in the body of the Request. input_json dict None False Json data to send in the body of the Request. no_exit bool False False Whether to exit on non-200 response.","title":"Inputs"},{"location":"providers/Web/http_put/#arguments","text":"Position Argument Type 1 url str 2 data any 3 kwargs union","title":"Arguments"},{"location":"providers/Web/http_put/#returns","text":"None","title":"Returns"},{"location":"providers/Web/http_put/#examples","text":"Make put request and store output in key input_json : stuff : things compact-> : http_post https://reqres.in/api/users input_json expanded : -> : http_post url : https://reqres.in/api/users input_json : stuff : things","title":"Examples"},{"location":"providers/Web/webbrowser/","text":"webbrowser \u00b6 Source Open a web browser. Wraps python's webbrowser module. Inputs \u00b6 Name Type Default Required Description url str None True String url to open in browser. new int 0 False If new is 1, a new browser window is opened if possible. If new is 2, a new browser page (\u201ctab\u201d) is opened if possible. autoraise bool True False If autoraise is True, the window is raised if possible (note that under many window managers this will occur regardless of the setting of this variable). Arguments \u00b6 Position Argument Type 1 url str Returns \u00b6 None Examples \u00b6 Open a web browser. Wraps python's webbrowser module. open browser_> : webbrowser https://robc.xyz","title":"webbrowser"},{"location":"providers/Web/webbrowser/#webbrowser","text":"Source Open a web browser. Wraps python's webbrowser module.","title":"webbrowser"},{"location":"providers/Web/webbrowser/#inputs","text":"Name Type Default Required Description url str None True String url to open in browser. new int 0 False If new is 1, a new browser window is opened if possible. If new is 2, a new browser page (\u201ctab\u201d) is opened if possible. autoraise bool True False If autoraise is True, the window is raised if possible (note that under many window managers this will occur regardless of the setting of this variable).","title":"Inputs"},{"location":"providers/Web/webbrowser/#arguments","text":"Position Argument Type 1 url str","title":"Arguments"},{"location":"providers/Web/webbrowser/#returns","text":"None","title":"Returns"},{"location":"providers/Web/webbrowser/#examples","text":"Open a web browser. Wraps python's webbrowser module. open browser_> : webbrowser https://robc.xyz","title":"Examples"},{"location":"providers/Yaml/","text":"yaml \u00b6 Source Hook for reading and writing yaml. Hook reads from path if no data field is provided, otherwise it writes the data to path . Inputs \u00b6 Name Type Default Required Description path str None True The file path to put read or write to. data union None False Map/list or renderable string to a map/list key to write. Arguments \u00b6 Position Argument Type 1 path str 2 data union Returns \u00b6 union Examples \u00b6 Read yaml \u00b6 Read a yaml file into a key compact-> : yaml path/to/file.yaml expanded : -> : yaml path : path/to/file.yaml Write yaml \u00b6 Read a yaml file into a key stuff : and : things compact-> : yaml path/to/file.yaml \"{{stuff}}\" expanded : -> : yaml path : path/to/file.yaml contents : \"{{ stuff }}\"","title":"Index"},{"location":"providers/Yaml/#yaml","text":"Source Hook for reading and writing yaml. Hook reads from path if no data field is provided, otherwise it writes the data to path .","title":"yaml"},{"location":"providers/Yaml/#inputs","text":"Name Type Default Required Description path str None True The file path to put read or write to. data union None False Map/list or renderable string to a map/list key to write.","title":"Inputs"},{"location":"providers/Yaml/#arguments","text":"Position Argument Type 1 path str 2 data union","title":"Arguments"},{"location":"providers/Yaml/#returns","text":"union","title":"Returns"},{"location":"providers/Yaml/#examples","text":"","title":"Examples"},{"location":"providers/Yaml/#read-yaml","text":"Read a yaml file into a key compact-> : yaml path/to/file.yaml expanded : -> : yaml path : path/to/file.yaml","title":"Read yaml"},{"location":"providers/Yaml/#write-yaml","text":"Read a yaml file into a key stuff : and : things compact-> : yaml path/to/file.yaml \"{{stuff}}\" expanded : -> : yaml path : path/to/file.yaml contents : \"{{ stuff }}\"","title":"Write yaml"},{"location":"tutorials/","text":"Tutorials \u00b6 Code Generation Kubernetes Utilities","title":"Tutorials"},{"location":"tutorials/#tutorials","text":"Code Generation Kubernetes Utilities","title":"Tutorials"},{"location":"tutorials/code-generation/","text":"Code Generation Tutorial \u00b6 The basic structure of any code generator is to build some kind of context and then render a set of files to a target directory. Most code generators out there have only one way of building the rendering context. For instance: create-react-app All configuration options baked in cookiecutter User inputs based on a json config file tackle-box is a fork of this project openapi-generator User points to an OpenAPI spec Tackle-box being more of a DSL allows all these configuration options in a completely modular way with the only catch that you need to explicitly declare all the functionality in a tackle file. This tutorial walks through how to setup code generators based on each of the above patterns. Code Generator Examples \u00b6 Coming soon Creating Your Own Code Generator \u00b6 The following sections outline key concepts when creating your own code generator. Tackle File Structure \u00b6 Tackle files are all parsed sequentially such that when you build a code generator, the render context must come before the hook call that generates the code, the generate hook . For instance given this file structure: \u251c\u2500\u2500 templates \u2502 \u2514\u2500\u2500 file1.py \u2502 \u2514\u2500\u2500 file2.py \u2514\u2500\u2500 tackle.yaml With this tackle file: # Arbitrary context key : value list : - item1 - item2 # Use the generate hook generate code : -> : generate input : templates output : src # Or in compact form generate code-> : generate templates src If it was in a github repo it could then be called in the command line with tackle <your org>/<your repo> . The output would be a src directory with the templates rendered with jinja based on the preceding context (ie key and list ) in the current working directory. Prompting a user for inputs \u00b6 If one instead wanted to prompt the user for items which would be used to render the templates, one would call various prompt hooks from the pyinquirer provider. Some common ones include: input - Input strings select - List of options where the user can only choose one checkbox - Multi select that returns a list confirm - Simple confirmation that returns a boolean For instance: # Arbitrary context project_slug-> : input What is the project's slug (ie head directory)? --default tackle-thing license-> : select What license type? --choices ['Apache','MIT'] makefile_sections : -> : checkbox What utilities to include in makefile? choices : - build - docs - tests generate ci : -> : generate templates/.github \"{{project_slug}}/\" if : confirm('Do you want to setup CI?') generate code-> : generate templates/src \"{{project_slug}}\" Would look like: ? What is the project ' s slug ( ie head directory ) ? tackle-thing ? What license type? ( Use arrow keys ) \u276f Apache MIT ? What utilities to include in makefile? ( <up>, <down> to move, <space> to select , <a> to toggle, <i> to invert ) \u25cf build \u25cb docs \u276f\u25cf tests ? Do you want to setup CI? ( Y/n ) Controlling context \u00b6 TODO Building file paths from maps \u00b6 TODO Ingesting a spec and transforming it to a render context \u00b6 Coming soon - creating OpenAPI transformer hook Using other tackle providers \u00b6 Code generators are great at setting up boilerplate such as licenses and makefiles but each one shouldn't have to come up with its own license / makefile generator. Tackle box being modular is perfect for this where instead of implementing these items in your code generator, call these items as providers. For instance if you wanted to include a license, in the tackle file include: license-> : tackle robcxyz/tackle-license Which is itself a code generator and will generate the appropriate license and return a map including all the selections and context used to generate the license. If one alternatively wanted to run a number of providers: providers : -> : checkbox What additional items do you want to add to the generated code? checked : true choices : - license - makefile - bazel call providers-> : tackle robcxyz/tackle-{{item}} --for {{providers}} Testing code generators \u00b6 Coming soon","title":"Code Generation"},{"location":"tutorials/code-generation/#code-generation-tutorial","text":"The basic structure of any code generator is to build some kind of context and then render a set of files to a target directory. Most code generators out there have only one way of building the rendering context. For instance: create-react-app All configuration options baked in cookiecutter User inputs based on a json config file tackle-box is a fork of this project openapi-generator User points to an OpenAPI spec Tackle-box being more of a DSL allows all these configuration options in a completely modular way with the only catch that you need to explicitly declare all the functionality in a tackle file. This tutorial walks through how to setup code generators based on each of the above patterns.","title":"Code Generation Tutorial"},{"location":"tutorials/code-generation/#code-generator-examples","text":"Coming soon","title":"Code Generator Examples"},{"location":"tutorials/code-generation/#creating-your-own-code-generator","text":"The following sections outline key concepts when creating your own code generator.","title":"Creating Your Own Code Generator"},{"location":"tutorials/code-generation/#tackle-file-structure","text":"Tackle files are all parsed sequentially such that when you build a code generator, the render context must come before the hook call that generates the code, the generate hook . For instance given this file structure: \u251c\u2500\u2500 templates \u2502 \u2514\u2500\u2500 file1.py \u2502 \u2514\u2500\u2500 file2.py \u2514\u2500\u2500 tackle.yaml With this tackle file: # Arbitrary context key : value list : - item1 - item2 # Use the generate hook generate code : -> : generate input : templates output : src # Or in compact form generate code-> : generate templates src If it was in a github repo it could then be called in the command line with tackle <your org>/<your repo> . The output would be a src directory with the templates rendered with jinja based on the preceding context (ie key and list ) in the current working directory.","title":"Tackle File Structure"},{"location":"tutorials/code-generation/#prompting-a-user-for-inputs","text":"If one instead wanted to prompt the user for items which would be used to render the templates, one would call various prompt hooks from the pyinquirer provider. Some common ones include: input - Input strings select - List of options where the user can only choose one checkbox - Multi select that returns a list confirm - Simple confirmation that returns a boolean For instance: # Arbitrary context project_slug-> : input What is the project's slug (ie head directory)? --default tackle-thing license-> : select What license type? --choices ['Apache','MIT'] makefile_sections : -> : checkbox What utilities to include in makefile? choices : - build - docs - tests generate ci : -> : generate templates/.github \"{{project_slug}}/\" if : confirm('Do you want to setup CI?') generate code-> : generate templates/src \"{{project_slug}}\" Would look like: ? What is the project ' s slug ( ie head directory ) ? tackle-thing ? What license type? ( Use arrow keys ) \u276f Apache MIT ? What utilities to include in makefile? ( <up>, <down> to move, <space> to select , <a> to toggle, <i> to invert ) \u25cf build \u25cb docs \u276f\u25cf tests ? Do you want to setup CI? ( Y/n )","title":"Prompting a user for inputs"},{"location":"tutorials/code-generation/#controlling-context","text":"TODO","title":"Controlling context"},{"location":"tutorials/code-generation/#building-file-paths-from-maps","text":"TODO","title":"Building file paths from maps"},{"location":"tutorials/code-generation/#ingesting-a-spec-and-transforming-it-to-a-render-context","text":"Coming soon - creating OpenAPI transformer hook","title":"Ingesting a spec and transforming it to a render context"},{"location":"tutorials/code-generation/#using-other-tackle-providers","text":"Code generators are great at setting up boilerplate such as licenses and makefiles but each one shouldn't have to come up with its own license / makefile generator. Tackle box being modular is perfect for this where instead of implementing these items in your code generator, call these items as providers. For instance if you wanted to include a license, in the tackle file include: license-> : tackle robcxyz/tackle-license Which is itself a code generator and will generate the appropriate license and return a map including all the selections and context used to generate the license. If one alternatively wanted to run a number of providers: providers : -> : checkbox What additional items do you want to add to the generated code? checked : true choices : - license - makefile - bazel call providers-> : tackle robcxyz/tackle-{{item}} --for {{providers}}","title":"Using other tackle providers"},{"location":"tutorials/code-generation/#testing-code-generators","text":"Coming soon","title":"Testing code generators"},{"location":"tutorials/kubernetes/","text":"","title":"Kubernetes"},{"location":"tutorials/utilities/","text":"","title":"Utilities"}]}