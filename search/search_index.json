{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Index","text":""},{"location":"#tackle","title":"tackle","text":"<ul> <li>Documentation</li> <li>Discord</li> <li>PyPI</li> <li>BSD License</li> </ul> <p>Tackle is a multi-paradigm configuration language for building modular code generators, schema validators, and declarative CLIs. Built as a fork of cookiecutter and on top of pydantic, it can make any config file into a CLI with both strong and weakly typed programmable flow control common to a general purpose programming language. Comparable with CUE, Jsonnet, and Dhall,  with more features and cleaner syntax, you can write a fully functional Turing-complete program out of a json/yaml/toml file. It's wild.</p> <p>With tackle, you can build: - Modular code generators / repo scaffolding tools that can be updated over time - Interactive glue code for infrastructure-as-code deployment strategies - Validate complex schemas composing them with strongly typed objects - Generic utilities like SSH helpers and dotfile managers - Combinations of all of the above and anything else you can think of</p> <p>WARNING: Tackle is still in alpha so expect some changes in the future.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Multi-paradigm</li> <li>Create strong and weakly typed objects with custom validation logic</li> <li>Objects can have methods and be extended through inheritance</li> <li> <p>Compose objects to create nested validation structures</p> </li> <li> <p>Makes arbitrary yaml / json / toml dynamic</p> </li> <li>Embed loops, conditionals, and other custom flow control logic</li> <li>Self documenting CLI to call tackle from command line</li> <li>Ships with a collection of over 100 hooks that act like plugins within your config file</li> <li>Prompt user for inputs</li> <li>Generate code from templates</li> <li>Read and write yaml / toml / json files</li> <li>Make http calls</li> <li>Run arbitrary system commands</li> <li>Manipulate the context</li> <li>Run other tackle files</li> <li>Modular design allows creating / importing new hooks easy</li> <li>Supports both python and declarative hooks which can be imported / called / defined in-line or within jinja templates</li> <li>Hooks can be composed / inherited with / from other hooks allowing complex objects to be validated and operated against</li> <li>Expressive macro system creating intuitive interfaces</li> </ul>"},{"location":"#install","title":"Install","text":"<p>Note: tackle can install dependencies on its own. Check docs for advanced installation methods to isolate tackle from your system python.</p> <pre><code>python -m venv env &amp;&amp; source env/bin/activate\npip install tackle\n</code></pre> <p>Quick Demo: <code>tackle sudoblockio/tackle-hello-world</code></p>"},{"location":"#hello-world","title":"Hello world","text":"<p>Check out the docs for &gt;10 hello worlds that demonstrate the various aspects of the syntax with the simplest one using the print hook, one of &gt;100 hooks.</p> <p>hello.yaml <pre><code># Any time a key ends with `-&gt;`, we are calling a hook\nany key-&gt;: print Hello world!\n# `print` is a hook which can also be used as a special key\nprint-&gt;: Hello world!\n</code></pre></p> <p>To run, call <code>tackle hello.yaml</code>. Can also be version controlled -&gt; <code>tackle sudoblockio/tackle-hello-world</code>.</p> <p>Can also use loops, conditionals, and other base methods like try / except.</p> <p>hello.yaml <pre><code>the:\n  words:\n    - Hello\n    - cruel\n    - world!\n# Compact one liners\none liner-&gt;: print {{i}} --for i in the.words --if i != 'cruel'\n# Which can also be expressed in multiple lines\nmultiple lines:\n  -&gt;: print\n  objects: {{item}}\n  for:\n    - Hello\n    - cruel\n    - world!\n  if: item != 'cruel'\n# Or combinations of the above\ncombination:\n  -&gt;: print {{i}}\n  for: i in ['Hello','world!']\n# As a special key\nprint-&gt;: Hello {{i}} --for i in the.words\n# Or through jinja rendering\nwith rendering-&gt;: \"{{print('Hello','world!'}}\"\n</code></pre></p> <p>New hooks can be made in python which under the hood is a pydantic model.</p> <p>.hooks/hello.py</p> <pre><code>from tackle import BaseHook\n\n\nclass Greeter(BaseHook):\n  hook_name: str = \"greeter\"\n  target: str\n  args: list = ['target']\n\n  def exec(self):\n    expression = f\"Hello {self.target}\"\n    print(expression)\n    return expression\n</code></pre> <p>Or can be defined inline within your tackle file, imported remotely, or in a <code>hooks</code> directory..</p> <p>.hooks/hello.yaml <pre><code># Keys ending with `&lt;-` mean we are creating a hook / method\ngreeter&lt;-:\n  target: str\n  args: ['target']\n  exec&lt;-:\n    expression-&gt;: var Hello {{target}}  # var hook renders variables\n    p-&gt;: print {{expression}}\n  return: expression\n</code></pre></p> <p>And both can be called the same way.</p> <p>tackle.yaml <pre><code>hello: world!\nWith a flag-&gt;: greeter --target {{hello}}\nTarget in argument-&gt;: greeter {{hello}}\nExpanded fields:\n  -&gt;: greeter\n  target: {{hello}}\nJinja template-&gt;: {{ greeter(hello) }}\n# Or combinations jinja and compact / expanded hooks allowing chaining of hook calls.\n</code></pre></p> <p>Hooks are also callable from the command line:</p> <pre><code>tackle hello.yaml greeter --target world!\n# Or from a github repo\ntackle sudoblockio/tackle-hello-world greeter --target world!\n</code></pre> <p>Documentation can be embedded into the hooks.</p> <p>hello.yaml <pre><code>&lt;-:\n  help: This is the default hook\n  target:\n    type: str\n    default-&gt;: input\n    description: The thing to say hello to\n  exec&lt;-:\n    greeting-&gt;: select Who to greet? --choices ['world',target]\n    hi-&gt;: greeter --target {{greeting}}\n  greeting-method&lt;-:\n    help: A method that greets\n    # ... Greeting options / logic\n    extends: greeter\ngreeter&lt;-:\n  help: A reusable greeter object\n  target: str\n  exec&lt;-:\n    hi-&gt;: print Hello {{target}}\n</code></pre></p> <p>Which when running <code>tackle hello.yaml help</code> produces its own help screen.</p> <pre><code>usage: tackle hello.yaml [--target]\n\nThis is the default hook\n\noptions:\n    --target [str] The thing to say hello to\nmethods:\n    greeting-method     A method that greets\n    greeter     A reusable greeter object\n</code></pre> <p>Hooks can be imported within a tackle provider or through hooks, linked, and/or combined with inheritance or composition creating a web of CLIs.</p>"},{"location":"#use-cases","title":"Use Cases","text":"<ul> <li>Code Generation</li> </ul> <p>WIP Tutorials</p> <ul> <li>Declarative Utilities</li> <li>Infrastructure-as-Code Management</li> <li>Kubernetes Manifest Management</li> <li>Toolchain Management</li> </ul>"},{"location":"#topics","title":"Topics","text":"<ul> <li>Writing Tackle Files</li> <li>Creating Providers</li> <li>Python Hooks</li> <li>Declarative Hooks</li> <li>Blocks and Flow Control</li> <li>Memory Management</li> <li>Special Variables</li> <li>Declarative CLIs</li> </ul>"},{"location":"#known-issues","title":"Known Issues","text":"<ul> <li>Windows Support</li> <li>tackle is lacking some windows support as shown in the failed tests. If you are a windows user, it is highly recommended to use WSL. Please get in touch if you are motivated to fix these tests to make tackle fully cross-platform. It probably isn't that hard to fix them as they mostly are due to differences in how windows handles paths.</li> <li>Whitespaces</li> <li>tackle relies heavily on parsing based on whitespaces which if you are not careful can easily bite you. Whenever you need to have some whitespaces preserved, make sure to quote the entire expression. Future work will be put in to overhaul the regex based parser with a PEG parser or AST.</li> </ul>"},{"location":"#contributing","title":"Contributing","text":"<p><pre><code>git clone\ncd tackle\nmake  # Creates and sources virtualenv\ntackle --version  # Stable version installed from pypi for managing tackle\ntackle test  # Run tests with tackle\nmake test  # Alternatively run with make\n</code></pre> Contributions are welcome but please be advised of the following notes.</p> <ul> <li>This project uses conventional commits which generates the changelog with release-please-action in the release CI workflow. If commits have been made outside of this convention they will be squashed accordingly.</li> <li>For making changes to providers, please include test coverage using the existing fixtures and patterns from prior tests or communicate any suggestions that deviate from this style. It definitely can be improved but consistency is more important than making directed improvements. Tests should be runnable from the test's directory and via <code>tackle test</code>.</li> <li>For making changes to the core parser, please create a proposal first outlining your suggestions with examples before spending time working on code.</li> </ul> <p>It is very easy to create new providers / hooks with tackle. Over time, it will adopt the same import pattern of what Ansible does where all provider / hooks (modules) are stored in version controlled locations. In the meantime, please feel free to contribute to this repository for hooks that have general applicability with no dependencies in the providers directory or  or create your own hooks in other repositories that are more bespoke / opinionated in nature.</p>"},{"location":"#future-directions","title":"Future Directions","text":"<p>It was always the intention for tackle to be re-written in some kind of compiled language and if the language gets some decent traction, that will be done. Goals will be:</p> <ul> <li>Improved parsing performance - tackle should be blazing fast</li> <li>Overhaul of string parsers - should be token based exposing more language features</li> <li>Improved linking cabablities -</li> <li>Ship as a single binary - Not only the tackle interpreter, but an entire tackle provider with linked dependencies  </li> <li>Compiled to WASM - Make tackle usable from any language</li> <li>A registry - This is a no brainer when you have a language with modular charectoristics</li> </ul> <p>Instead, the intention will be to integrate Mojo's language features to allow binaries to be compiled from tackle scripts and providers. This will be a major challenge but the benefits will be worth it. Theoretically, tackle could be very fast when it make this switch and useful in a variety of other interesting applications.</p>"},{"location":"#code-of-conduct","title":"Code of Conduct","text":"<p>Everyone interacting in the tackle project's codebases, issue trackers, chat rooms, and mailing lists is expected to follow the PyPA Code of Conduct.</p>"},{"location":"#credit","title":"Credit","text":"<p>Special thanks to the cookiecutter community for laying the basis for this project.</p>"},{"location":"authors/","title":"Credits","text":""},{"location":"authors/#tackle-box-devs","title":"Tackle Box Devs","text":""},{"location":"authors/#development-leads","title":"Development Leads","text":"<ul> <li>Rob Cannon (@robcxyz)</li> </ul>"},{"location":"authors/#contributors","title":"Contributors","text":"<ul> <li>Richard Mah (@shinyfoil)</li> </ul>"},{"location":"authors/#cookiecutter-devs","title":"Cookiecutter Devs","text":""},{"location":"authors/#development-leads_1","title":"Development Leads","text":"<ul> <li>Audrey Roy Greenfeld (@audreyr)</li> <li>Daniel Roy Greenfeld (@pydanny)</li> <li>Raphael Pierzina (@hackebrot)</li> </ul>"},{"location":"authors/#core-committers","title":"Core Committers","text":"<ul> <li>Michael Joseph (@michaeljoseph)</li> <li>Paul Moore (@pfmoore)</li> <li>Andrey Shpak (@insspb)</li> <li>Sorin Sbarnea (@ssbarnea)</li> <li>F\u00e1bio C. Barrionuevo da Luz (@luzfcb)</li> </ul>"},{"location":"authors/#contributors_1","title":"Contributors","text":"<ul> <li>Steven Loria (@sloria)</li> <li>Goran Peretin (@gperetin)</li> <li>Hamish Downer (@foobacca)</li> <li>Thomas Orozco (@krallin)</li> <li>Jindrich Smitka (@s-m-i-t-a)</li> <li>Benjamin Schwarze (@benjixx)</li> <li>Raphi (@raphigaziano)</li> <li>Thomas Chiroux (@ThomasChiroux)</li> <li>Sergi Almacellas Abellana (@pokoli)</li> <li>Alex Gaynor (@alex)</li> <li>Rolo (@rolo)</li> <li>Pablo (@oubiga)</li> <li>Bruno Rocha (@rochacbruno)</li> <li>Alexander Artemenko (@svetlyak40wt)</li> <li>Mahmoud Abdelkader (@mahmoudimus)</li> <li>Leonardo Borges Avelino (@lborgav)</li> <li>Chris Trotman (@solarnz)</li> <li>Rolf (@relekang)</li> <li>Noah Kantrowitz (@coderanger)</li> <li>Vincent Bernat (@vincentbernat)</li> <li>Germ\u00e1n Moya (@pbacterio)</li> <li>Ned Batchelder (@nedbat)</li> <li>Dave Dash (@davedash)</li> <li>Johan Charpentier (@cyberj)</li> <li>\u00c9ric Araujo (@merwok)</li> <li>saxix (@saxix)</li> <li>Tzu-ping Chung (@uranusjr)</li> <li>Caleb Hattingh (@cjrh)</li> <li>Flavio Curella (@fcurella)</li> <li>Adam Venturella (@aventurella)</li> <li>Monty Taylor (@emonty)</li> <li>schacki (@schacki)</li> <li>Ryan Olson (@ryanolson)</li> <li>Trey Hunner (@treyhunner)</li> <li>Russell Keith-Magee (@freakboy3742)</li> <li>Mishbah Razzaque (@mishbahr)</li> <li>Robin Andeer (@robinandeer)</li> <li>Rachel Sanders (@trustrachel)</li> <li>R\u00e9my Hubscher (@Natim)</li> <li>Dino Petron3 (@dinopetrone)</li> <li>Peter Inglesby (@inglesp)</li> <li>Ramiro Batista da Luz (@ramiroluz)</li> <li>Omer Katz (@thedrow)</li> <li>lord63 (@lord63)</li> <li>Randy Syring (@rsyring)</li> <li>Mark Jones (@mark0978)</li> <li>Marc Abramowitz (@msabramo)</li> <li>Lucian Ursu (@LucianU)</li> <li>Osvaldo Santana Neto (@osantana)</li> <li>Matthias84 (@Matthias84)</li> <li>Simeon Visser (@svisser)</li> <li>Guruprasad (@lgp171188)</li> <li>Charles-Axel Dein (@charlax)</li> <li>Diego Garcia (@drgarcia1986)</li> <li>maiksensi (@maiksensi)</li> <li>Andrew Conti (@agconti)</li> <li>Valentin Lab (@vaab)</li> <li>Ilja Bauer (@iljabauer)</li> <li>Elias Dorneles (@eliasdorneles)</li> <li>Matias Saguir (@mativs)</li> <li>Johannes (@johtso)</li> <li>macrotim (@macrotim)</li> <li>Will McGinnis (@wdm0006)</li> <li>C\u00e9dric Krier (@cedk)</li> <li>Tim Osborn (@ptim)</li> <li>Aaron Gallagher (@habnabit)</li> <li>mozillazg (@mozillazg)</li> <li>Joachim Jablon (@ewjoachim)</li> <li>Andrew Ittner (@tephyr)</li> <li>Diane DeMers Chen (@purplediane)</li> <li>zzzirk (@zzzirk)</li> <li>Carol Willing (@willingc)</li> <li>phoebebauer (@phoebebauer)</li> <li>Adam Chainz (@adamchainz)</li> <li>Sul\u00e9 (@suledev)</li> <li>Evan Palmer (@palmerev)</li> <li>Bruce Eckel (@BruceEckel)</li> <li>Robert Lyon (@ivanlyon)</li> <li>Terry Bates (@terryjbates)</li> <li>Brett Cannon (@brettcannon)</li> <li>Michael Warkentin (@mwarkentin)</li> <li>Bart\u0142omiej Kurzeja (@B3QL)</li> <li>Thomas O'Donnell (@andytom)</li> <li>Jeremy Carbaugh (@jcarbaugh)</li> <li>Nathan Cheung (@cheungnj)</li> <li>Abd\u00f3 Roig-Maranges (@aroig)</li> <li>Steve Piercy (@stevepiercy)</li> <li>Corey (@coreysnyder04)</li> <li>Dmitry Evstratov (@devstrat)</li> <li>Eyal Levin (@eyalev)</li> <li>mathagician (@mathagician)</li> <li>Guillaume Gelin (@ramnes)</li> <li>@delirious-lettuce (@delirious-lettuce)</li> <li>Gasper Vozel (@karantan)</li> <li>Joshua Carp (@jmcarp)</li> <li>@meahow (@meahow)</li> <li>Andrea Grandi (@andreagrandi)</li> <li>Issa Jubril (@jubrilissa)</li> <li>Nytiennzo Madooray (@Nythiennzo)</li> <li>Erik Bachorski (@dornheimer)</li> <li>cclauss (@cclauss)</li> <li>Andy Craze (@accraze)</li> <li>Anthony Sottile (@asottile)</li> <li>Jonathan Sick (@jonathansick)</li> <li>Hugo (@hugovk)</li> <li>Min ho Kim (@minho42)</li> <li>Ryan Ly (@rly)</li> <li>Akintola Rahmat (@mihrab34)</li> <li>Jai Ram Rideout (@jairideout)</li> <li>Diego Carrasco Gubernatis (@dacog)</li> <li>Wagner Negr\u00e3o (@wagnernegrao)</li> <li>Josh Barnes (@jcb91)</li> <li>Nikita Sobolev (@sobolevn)</li> <li>Matt Stibbs (@mattstibbs)</li> <li>MinchinWeb (@MinchinWeb)</li> <li>kishan (@kishan)</li> <li>tonytheleg (@tonytheleg)</li> <li>Roman Hartmann (@RomHartmann)</li> <li>DSEnvel (@DSEnvel)</li> <li>kishan (@kishan)</li> <li>Bruno Alla (@browniebroke)</li> <li>nicain (@nicain)</li> <li>Carsten R\u00f6snick-Neugebauer (@croesnick)</li> <li>igorbasko01 (@igorbasko01)</li> <li>Dan Booth Dev (@DanBoothDev)</li> <li>Pablo Panero (@ppanero)</li> <li>Chuan-Heng Hsiao (@chhsiao1981)</li> <li>Mohammad Hossein Sekhavat (@mhsekhavat)</li> <li>Amey Joshi (@amey589)</li> <li>Paul Harrison (@smoothml)</li> </ul>"},{"location":"command-line/","title":"Calling from the Command Line","text":"<p>Tackle is extremely flexible on the inputs that it accepts to run against. Basically any file, directory, or repo are acceptable inputs or no input at all. This document describes the logic behind how tackle takes in inputs including how additional args, kwargs, and flags are interpreted from the command line.  </p> <p>For how to structure files for a tackle provider, check out creating providers or creating self documenting CLIs check out declarative cli.</p> <p>Note: Calling tackle from the command line or from within a tackle file with a tackle hook is basically the same with the context being passed along calls.</p>"},{"location":"command-line/#targets","title":"Targets","text":"<p>Targets are the first argument in any tackle call. For instance:</p> <pre><code>tackle TARGET arg1 arg2 --key value --flag\n</code></pre> <p>The below describes the logic around how to qualify a target.</p>"},{"location":"command-line/#file-targets","title":"File Targets","text":"<p>Tackle can be called against any yaml file or json. Tackle runs the file as if it is in the current directory.</p> <pre><code>tackle some/file/location.yaml\n</code></pre> <p>You can also use the file flag.</p> <pre><code>tackle --file some/file/location.yaml\n</code></pre>"},{"location":"command-line/#directory","title":"Directory","text":"<p>Tackle can be called against any directory and looks for a \"tackle file\", a file that matches <code>tackle.yaml/toml/json</code> or <code>.tackle.yaml/toml/json</code> and runs against that.</p> <pre><code>tackle some/directory/location\n</code></pre> <p>You can use the key word argument <code>directory</code> or <code>d</code> for short.</p> <pre><code>tackle --directory some/directory/location\n</code></pre>"},{"location":"command-line/#repository","title":"Repository","text":"<p>Tackle can be called against any repository looking input which similar to a directory input, looks for a \"tackle file\" and runs against that.</p> <p>Repository sources can be abbreviated such that the following items are equivalent.</p> <ul> <li>https://github.com/robcxyz/tackle-provider</li> <li>github.com/robcxyz/tackle-provider</li> <li>robcxyz/tackle-provider</li> </ul> <pre><code>tackle robcxyz/tackle-provider\n</code></pre> <p>You can also specify files / directories</p> <pre><code>tackle robcxyz/tackle-provider --d some/directory/location -f some-file.yaml\n</code></pre>"},{"location":"command-line/#zipfile","title":"Zipfile","text":"<p>Tackle can also run against a zip file.</p> <pre><code>tackle path/to/some/zipfile.zip\n</code></pre>"},{"location":"command-line/#unknown-target-no-target","title":"Unknown Target / No Target","text":"<p>When a target is not recognized as a file, directory, repo, or zipfile, tackle attempts to use the target as an argument to the nearest tackle provider which is any directory with a tackle file or hooks directory. Nearest in this context means in the current directory, the parent directory, and so forth until no tackle provider is found.</p> <p>Call the nearest tackle provider (in this case in the parent directory) with target as argument.</p> <pre><code># \u2514\u2500\u2500 .tackle.yaml/json file or .hooks directory\n#    \u2514\u2500\u2500 calling directory\ntackle unknown-target\n</code></pre> <p>Or simply call <code>tackle</code> without a target which will do same as above.</p> <pre><code>tackle\n</code></pre>"},{"location":"command-line/#additional-args-keyword-args-flags","title":"Additional Args / Keyword Args / Flags","text":"<p>When calling a target, additional args / kwargs / flags can be supplied via the command line or through calling a tackle hook from within a tackle file.  </p>"},{"location":"command-line/#argument-matches-tackle-files-key","title":"Argument matches tackle file's key","text":"<p>When an input is supplied but it does not match any of the above criteria, by default tackle checks if there is a key in the parent directory and runs from that key. Logic is described in the next section.</p> <pre><code>tackle a-tackle-file.yaml a-key  # a-key is a key in the tackle file\n</code></pre>"},{"location":"command-line/#additional-arguments-keys-flags","title":"Additional Arguments / Keys / Flags","text":"<p>The preceding section described how targets are handled but tackle can also take in arbitrary args, key value pairs, and flags which are interpreted.  </p> <pre><code>tackle target ARGs --KEYs VALUEs --FLAGs\n</code></pre>"},{"location":"command-line/#extra-arguments","title":"Extra Arguments","text":"<p>Additional arguments are interpeted as the user doesn't want to run an entire tackle file but run a specific set of keys. So for instance given the following tackle file:</p> <p>File: <pre><code>key_a-&gt;: print Key A\nkey_b-&gt;: print Key B\n</code></pre></p> <p>Command: <pre><code>tackle file.yaml key_a\n</code></pre></p> <p>Only <code>key_a</code> would be run.</p> <p>This is useful if you want to only run a subsection of a tackle file or jump straight to a command.</p>"},{"location":"command-line/#extra-key-values-and-flags","title":"Extra Key Values and Flags","text":"<p>Additional key value pairs and flags are interpreted by command line calls as being overrides to the context. For instance given the following tackle file and call:</p> <p>File: <pre><code>key_a-&gt;: input What to set `key_a`?\nkey_b-&gt;: print \"{{key_a}}\"\n</code></pre></p> <p>Command: <pre><code>tackle file.yaml --key_a \"stuff and things\"\n</code></pre></p> <p>Would result in no prompt and \"stuff and things\" printed to the user.</p> <p>Flags are the same as key value pairs but override with True.</p>"},{"location":"command-line/#additional-command-line-arguments","title":"Additional Command Line Arguments","text":""},{"location":"command-line/#override-o","title":"override / -o","text":"<p>To override some inputs in the tackle file or to insert extra values, use the <code>override</code> option to point to a file with those extra values.  For instance:</p> <pre><code>tackle path/to/something --override some-file.yaml\n</code></pre> <p>Calling from python allows for assignment of variables via dicts or kwargs. See the testing providers docs for more information on calling tackler from python.</p>"},{"location":"command-line/#-print-p","title":"--print / -p","text":"<p>When the print flag is specified, the context after parsing is printed out to the screen which can then be piped to a file.</p> <pre><code>tackle --print TARGET\n</code></pre>"},{"location":"command-line/#-print-format-jsonyamltoml-pf-jsonyamltoml","title":"--print-format [json/yaml/toml] / -pf [json/yaml/toml]","text":"<p>Regardless of if the print flag is selected, print the output in the arguments format.</p> <p>Must be one of json, yaml, or toml. Defaults to json.</p> <pre><code>tackle --pf yaml\n</code></pre>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p> <ul> <li>Types of Contributions</li> <li>Contributor Setup</li> <li>Contributor Guidelines</li> <li>Contributor Testing</li> <li>Core Committer Guide</li> </ul>"},{"location":"contributing/#types-of-contributions","title":"Types of Contributions","text":"<p>You can contribute in many ways:</p>"},{"location":"contributing/#create-tackle-providers-hooks","title":"Create Tackle Providers / Hooks","text":"<p>Providers / Hooks can be either contributed directly to tackle as a native provider or as external providers / hooks that can be imported remotely. Hooks that have general use cases can be contributed directly to tackle where as hooks that are more specialized should be created as external providers.</p>"},{"location":"contributing/#native-providers","title":"Native Providers","text":"<p>Native providers should come with documentation on how to use the hooks by writing a <code>.tackle.meta.yaml</code> file at the base of the provider similar to the ones found in the existing providers. This file is parsed as a tackle file and includes links the source code. Please review the examples and get in touch if you have any questions on the discord. Hooks should also contain <code>Field</code> functions with descriptions so that</p>"},{"location":"contributing/#report-bugs","title":"Report Bugs","text":"<p>Report bugs at https://github.com/robcxyz/tackle/issues.</p> <p>If you are reporting a bug, please include:</p> <ul> <li>Your operating system name and version.</li> <li>Any details about your local setup that might be helpful in troubleshooting.</li> <li>If you can, provide detailed steps to reproduce the bug.</li> <li>If you don't have steps to reproduce the bug, just note your observations in as much detail as you can. Questions to start a discussion about the issue are welcome.</li> </ul>"},{"location":"contributing/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with \"bug\" is open to whoever wants to implement it.</p>"},{"location":"contributing/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"please-help\" is open to whoever wants to implement it.</p> <p>Please do not combine multiple feature enhancements into a single pull request.</p>"},{"location":"contributing/#write-documentation","title":"Write Documentation","text":"<p>Tackle could always use more documentation, whether as part of the official tackle docs, in docstrings, or even on the web in blog posts, articles, and such.</p> <p>If you want to review your changes on the documentation locally, you can do:</p> <pre><code>pip install -r docs/requirements.txt\nmkdoc serve\n</code></pre> <p>This will compile the documentation, open it in your browser and start watching the files for changes, recompiling as you save.</p>"},{"location":"contributing/#submit-feedback","title":"Submit Feedback","text":"<p>The best way to send feedback is to file an issue at https://github.com/robcxyz/tackle/issues.</p> <p>If you are proposing a feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> <li>Remember that this is a volunteer-driven project, and that contributions are welcome :)</li> </ul>"},{"location":"contributing/#setting-up-the-code-for-local-development","title":"Setting Up the Code for Local Development","text":"<p>Here's how to set up <code>tackle</code> for local development.</p> <ol> <li>Fork the <code>tackle</code> repo on GitHub.</li> <li>Clone your fork locally:</li> </ol> <pre><code>git clone git@github.com:your_name_here/tackle.git\n</code></pre> <ol> <li>Install your local copy into a virtualenv. Assuming you have virtualenvwrapper installed, this is how you set up your fork for local development:</li> </ol> <pre><code>cd tackle/\npython3 -m venv env\nsource env/bin/activate\npython setup.py install\n</code></pre> <ol> <li>Create a branch for local development:</li> </ol> <pre><code>git checkout -b name-of-your-bugfix-or-feature\n</code></pre> <p>Now you can make your changes locally.</p> <ol> <li>When you're done making changes, check that your changes pass the tests and lint check:</li> </ol> <pre><code>pip install tox\nmake test\n</code></pre> <p>Please note that tox runs lint check automatically, since we have a test environment for it.</p> <p>If you feel like running only the lint environment, please use the following command:</p> <pre><code>tox -e lint\n</code></pre> <ol> <li>Ensure that your feature or commit is fully covered by tests. Check report after regular tox run. You can also run coverage only report and get html report with statement by statement highlighting:</li> </ol> <pre><code>tox -e cov-report\n</code></pre> <p>You report will be placed to <code>htmlcov</code> directory. Please do not include this directory to your commits. By default this directory in our <code>.gitignore</code> file.</p> <ol> <li>Commit your changes and push your branch to GitHub:</li> </ol> <pre><code>git add .\ngit commit -m \"fix: some thing that is wrong #123\"\ngit push origin name-of-your-bugfix-or-feature\n</code></pre> <p>This project uses conventional commits which generates the changelog. PRs will be squashed accordingly.</p> <p>A little guide to how to prefix your commit message: - For changes that affect the core parser should be <code>feat</code> - For fixes to issues use <code>fix</code> along with the issue number (ie #123) - For changes to a provider API use <code>provider</code></p> <ol> <li>Submit a pull request through the GitHub website.</li> </ol>"},{"location":"contributing/#contributor-guidelines","title":"Contributor Guidelines","text":""},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before you submit a pull request, check that it meets these guidelines:</p> <ol> <li>The pull request should include tests.</li> <li>If the pull request adds functionality, the docs should be updated. Put your new functionality into a function with a docstring, and add the feature to the list in README.md.</li> <li>The pull request must pass all CI/CD jobs before being ready for review.</li> <li>If one CI/CD job is failing for unrelated reasons you may want to create another PR to fix that first.</li> </ol>"},{"location":"contributing/#coding-standards","title":"Coding Standards","text":"<ul> <li>PEP8</li> <li>Functions over class methods</li> <li> <p>Quotes via http://stackoverflow.com/a/56190/5549</p> </li> <li> <p>Use double quotes around strings that are used for interpolation or that are natural language messages</p> </li> <li>Use single quotes for small symbol-like strings (but break the rules if the strings contain quotes)</li> <li>Use triple double quotes for docstrings and raw string literals for regular expressions even if they aren't needed.</li> <li>Example:</li> </ul> <pre><code>LIGHT_MESSAGES = {\n    'English': \"There are %(number_of_lights)s lights.\",\n    'Pirate':  \"Arr! Thar be %(number_of_lights)s lights.\"\n}\ndef lights_message(language, number_of_lights):\n    \"\"\"Return a language-appropriate string reporting the light count.\"\"\"\n    return LIGHT_MESSAGES[language] % locals()\ndef is_pirate(message):\n    \"\"\"Return True if the given message sounds piratical.\"\"\"\n    return re.search(r\"(?i)(arr|avast|yohoho)!\", message) is not None\n</code></pre> <ul> <li>Write new code in Python 3.</li> </ul>"},{"location":"contributing/#testing-with-tox","title":"Testing with tox","text":"<p>Tox uses py.test under the hood, hence it supports the same syntax for selecting tests.</p> <p>For further information please consult the <code>pytest usage docs</code>.</p> <p>To run a particular test class with tox:</p> <pre><code>tox -e py '-k TestFindHooks'\n</code></pre> <p>To run some tests with names matching a string expression:</p> <pre><code>tox -e py '-k generate'\n</code></pre> <p>Will run all tests matching \"generate\", test_generate_files for example.</p> <p>To run just one method:</p> <pre><code>tox -e py '-k \"TestFindHooks and test_find_hook\"'\n</code></pre> <p>To run all tests using various versions of python in virtualenvs defined in tox.ini, just run tox:</p> <pre><code>tox\n</code></pre> <p>This configuration file setup the pytest-cov plugin and it is an additional dependency. It generate a coverage report after the tests.</p> <p>It is possible to tests with some versions of python, to do this the command is:</p> <pre><code>tox -e py36,pypy3\n</code></pre> <p>Will run py.test with the python3.6 and pypy3 interpreters, for example.</p>"},{"location":"contributing/#core-committer-guide","title":"Core Committer Guide","text":""},{"location":"contributing/#vision-and-scope","title":"Vision and Scope","text":"<p>Core committers, use this section to:</p> <ul> <li>Guide your instinct and decisions as a core committer</li> <li>Limit the codebase from growing infinitely</li> </ul>"},{"location":"contributing/#command-line-accessible","title":"Command-Line Accessible","text":"<ul> <li>Provides a command-line utility that creates projects from tackle</li> <li>Extremely easy to use without having to think too hard</li> <li>Flexible for more complex use via optional arguments</li> </ul>"},{"location":"contributing/#api-accessible","title":"API Accessible","text":"<ul> <li>Entirely function-based and stateless (Class-free by intentional design)</li> <li>Usable in pieces for developers of template generation tools</li> </ul>"},{"location":"contributing/#being-jinja2-specific","title":"Being Jinja2-specific","text":"<ul> <li>Sets a standard baseline for project template creators, facilitating reuse</li> <li>Minimizes the learning curve for those who already use Flask or Django</li> <li>Minimizes scope of tackle codebase</li> </ul>"},{"location":"contributing/#extensible","title":"Extensible","text":"<p>Being extendable by people with different ideas for Jinja2-based project template tools.</p> <ul> <li>Entirely function-based</li> <li>Aim for statelessness</li> <li>Lets anyone write more opinionated tools</li> </ul> <p>Freedom for tackle users to build and extend.</p> <ul> <li>No officially-maintained tackle providers, only ones by individuals</li> <li>Commercial project-friendly licensing, allowing for private tackle and private tackle-based tools</li> </ul>"},{"location":"contributing/#inclusive","title":"Inclusive","text":"<ul> <li>Cross-platform and cross-version support are more important than features/functionality</li> </ul>"},{"location":"contributing/#stable","title":"Stable","text":"<ul> <li>Aim for 100% test coverage and covering corner cases</li> <li>No pull requests will be accepted that drop test coverage on any platform, including Windows</li> <li>Conservative decisions patterned after CPython's conservative decisions with stability in mind</li> <li>Stable APIs that tool builders can rely on</li> <li>New features require a +1 from 3 core committers</li> </ul>"},{"location":"contributing/#vcs-hosted-templates","title":"VCS-Hosted Templates","text":"<p>Tackle providers are intentionally hosted VCS repos as-is.</p> <ul> <li>They are easily forkable</li> <li>It's easy for users to browse forks and files</li> <li>They are searchable via standard Github search interface</li> <li>Minimizes the need for packaging-related cruft files</li> <li>Easy to create a public project template and host it for free</li> <li>Easy to collaborate</li> </ul>"},{"location":"contributing/#process-pull-requests","title":"Process: Pull Requests","text":"<p>If a pull request is untriaged:</p> <ul> <li>Look at the roadmap</li> <li>Set it for the milestone where it makes the most sense</li> <li>Add it to the roadmap</li> </ul> <p>How to prioritize pull requests, from most to least important:</p> <ul> <li>Fixes for broken tests. Broken means broken on any supported platform or Python version.</li> <li>Extra tests to cover corner cases.</li> <li>Minor edits to docs.</li> <li>Bug fixes.</li> <li>Major edits to docs.</li> <li>Features.</li> </ul>"},{"location":"contributing/#process-issues","title":"Process: Issues","text":"<p>If an issue is a bug that needs an urgent fix, mark it for the next patch release. Then either fix it or mark as please-help.</p> <p>For other issues: encourage friendly discussion, moderate debate, offer your thoughts.</p> <p>New features require a +1 from 2 other core committers (besides yourself).</p>"},{"location":"contributing/#process-roadmap","title":"Process: Roadmap","text":"<p>The roadmap located here</p> <p>Due dates are flexible. Core committers can change them as needed. Note that GitHub sort on them is buggy.</p> <p>How to number milestones:</p> <ul> <li>Follow semantic versioning. Look at: http://semver.org</li> </ul> <p>Milestone size:</p> <ul> <li>If a milestone contains too much, move some to the next milestone.</li> <li>Err on the side of more frequent patch releases.</li> </ul>"},{"location":"contributing/#process-pull-request-merging-and-historymd-maintenance","title":"Process: Pull Request merging and HISTORY.md maintenance","text":"<p>If you merge a pull request, you're responsible for updating <code>AUTHORS.md</code> and <code>HISTORY.md</code></p> <p>When you're processing the first change after a release, create boilerplate following the existing pattern:</p> <pre><code>## x.y.z (Development)\n\nThe goals of this release are TODO: release summary of features\n\nFeatures:\n\n* Feature description, thanks to [@contributor](https://github.com/contributor) (#PR).\n\nBug Fixes:\n\n* Bug fix description, thanks to [@contributor](https://github.com/contributor) (#PR).\n\nOther changes:\n\n* Description of the change, thanks to [@contributor](https://github.com/contributor) (#PR).\n</code></pre>"},{"location":"contributing/#process-accepting-template-pull-requests","title":"Process: Accepting Template Pull Requests","text":"<ul> <li>Run the template to generate the project.</li> <li>Attempt to start/use the rendered project.</li> <li>Merge the template in.</li> <li>Update the history file.</li> </ul> <p>note: Adding a template doesn't give authors credit.</p>"},{"location":"contributing/#process-your-own-code-changes","title":"Process: Your own code changes","text":"<p>All code changes, regardless of who does them, need to be reviewed and merged by someone else. This rule applies to all the core committers.</p> <p>Exceptions:</p> <ul> <li>Minor corrections and fixes to pull requests submitted by others.</li> <li>While making a formal release, the release manager can make necessary, appropriate changes.</li> <li>Small documentation changes that reinforce existing subject matter. Most commonly being, but not limited to spelling and grammar corrections.</li> </ul>"},{"location":"contributing/#responsibilities","title":"Responsibilities","text":"<ul> <li>Ensure cross-platform compatibility for every change that's accepted. Windows, Mac, Debian &amp; Ubuntu Linux.</li> <li>Ensure that code that goes into core meets all requirements in this checklist: https://gist.github.com/audreyr/4feef90445b9680475f2</li> <li>Create issues for any major changes and enhancements that you wish to make. Discuss things transparently and get community feedback.</li> <li>Don't add any classes to the codebase unless absolutely needed. Err on the side of using functions.</li> <li>Keep feature versions as small as possible, preferably one new feature per version.</li> <li>Be welcoming to newcomers and encourage diverse new contributors from all backgrounds. Look at Code of Conduct.</li> </ul>"},{"location":"contributing/#becoming-a-core-committer","title":"Becoming a Core Committer","text":"<p>Contributors may be given core commit privileges. Preference will be given to those with:</p> <ol> <li>Past contributions to cookiecutter or tackle and other open-source projects. Contributions to tackle include both code (both accepted and pending) and friendly participation in the issue tracker. Quantity and quality are considered.</li> <li>A coding style that the other core committers find simple, minimal, and clean.</li> <li>Access to resources for cross-platform development and testing.</li> <li>Time to devote to the project regularly.</li> </ol>"},{"location":"creating-providers/","title":"Providers","text":"<p>This document covers all aspects of creating providers including the semantics of the file structure and dependencies.  For writing hooks which are contained within providers, check out the writing hooks documents for python and declarative hooks.</p> <p>As a recap, <code>providers</code> are collections of hooks and / or tackle files that import / call additional hooks. They can be stored remotely in a git repository and then imported / ran from tackle files or called directly from the command line.  For more information about tackle structure, check out the project structure docs.</p>"},{"location":"creating-providers/#basic-file-structure","title":"Basic File Structure","text":"<p>A provider either needs to have: - A tackle file</p> <pre><code>\u251c\u2500\u2500 hooks\n\u2502 \u251c\u2500\u2500 hooks.py\n\u2502 \u2514\u2500\u2500 hooks.yaml\n\u2514\u2500\u2500 tackle.yaml\n</code></pre>"},{"location":"creating-providers/#quick-start","title":"Quick Start","text":"<p>Since tackle box is a code generator, it makes sense for it to be able to generate the boilerplate to create providers. The quickest way to do that is with the <code>tackle-provider</code> provider which can be run as:</p> <pre><code>tackle sudoblockio/tackle-provider\n</code></pre> <p>The provider will then go through a number of configuration options such as:</p> <ul> <li>What type of license (ie Apache vs MIT vs closed source)</li> <li>Types of tests (unittest vs pytest)</li> <li>Intention of the provider (code generator vs utility)</li> </ul> <p>Using this provider one can create a functional provider in minutes that when pushed to github can be called with <code>tackle &lt;your org&gt;/&lt;your repo&gt;</code>.</p>"},{"location":"creating-providers/#configuration-options","title":"Configuration Options","text":""},{"location":"creating-providers/#requirements","title":"Requirements","text":"<p>Each provider can have its own pip requirements which when the provider is imported / called are automatically installed to support the execution of hooks. Requirements are located at the base of the provider as in the following directory structure:</p> <pre><code>\u251c\u2500\u2500 hooks\n\u2502 \u2514\u2500\u2500 hooks.py\n\u2514\u2500\u2500 requirements.txt\n</code></pre>"},{"location":"creating-providers/#autogenerated-docs","title":"Autogenerated Docs","text":"<p>Docs are automatically generated for any hooks located within the native providers directory. The docs are generated by a tackle file located in the <code>/docs</code> directory in the source and uses the provider_docs hook to extract metadata about each hook and render a set of templates. Additional metadata for each provider is located in a <code>.tackle.meta.yaml</code> file per the following directory structure.</p> <pre><code>\u251c\u2500\u2500 tackle.yaml\n\u2514\u2500\u2500 .tackle.meta.yaml\n</code></pre> <p>The <code>.tackle.meta.yaml</code> is itself a tackle file so can contain hooks that can read other files (ie test fixtures or fields within the same file). The structure is:</p> <pre><code>name: Name of hook (Required)\n\ndescription: Description of hook (Required)\n\nexamples: # Optional\n  - name: \"[hook_name](hook_name.md)\"\n    description: Description of hook\n    content: |\n      # A yaml string as input example\n      stuff: things\n      a key-&gt;: hook_name stuff\n    output: |\n      stuff: things\n      a key: things\n\nhook_examples:\n  hook_name:  # Key must match hook_name\n    - description: Description of hook\n      content: |\n        # A yaml string as input example\n        stuff: things\n        a key-&gt;: hook_name stuff\n      output: |\n        stuff: things\n        a key: things\n</code></pre> <p>TODO: Document how to create docs for a third party provider</p> <p>See examples in source for further information.</p>"},{"location":"debugging-tackle/","title":"Debugging","text":"<p>Debugging is somewhat rudimentary at this stage of tackle but there are some options to for both debugging tackle files and hooks.  </p> <ol> <li>Printing the context</li> <li>The debug hook</li> <li>Debugging the source</li> </ol>"},{"location":"debugging-tackle/#printing-the-context","title":"Printing the context","text":"<p>If you are not interested in what is going on in the middle of the parser, the easiest way to see what values have been set at the end is to run tackle with the <code>--print</code> flag or <code>-p</code> in short. The output is then a json which can be further cleaned up with jq like so.</p> <pre><code>tackle -p | jq -r\n</code></pre> <p>Note this only shows the public context.</p> <p>Additionally, tackle can print in yaml and toml formats. For instance using the <code>print-format</code> option,</p> <pre><code>tackle target -pf yaml\ntackle target --print-format yaml\n</code></pre>"},{"location":"debugging-tackle/#the-debug-hook","title":"The debug hook","text":"<p>Similar to setting a breakpoint, tackle has the ability to pause the parser and show the context at a given line. For instance:</p> <pre><code>stuff: things\npublic-&gt;: var stuff\nprivate_&gt;: var stuff\nd-&gt;: debug\n</code></pre> <p>Would show:</p> <pre><code>Public Context\n{'public': 'things', 'stuff': 'things'}\nPrivate Context\n{'private': 'things'}\n\n? CONTINUE  (Y/n)\n</code></pre> <p>Allowing users to debug tackle files by showing what is in each memory space.</p> <p>See the testing providers document for testing providers with pytest.</p>"},{"location":"declarative-cli/","title":"Declarative CLI","text":"<p>Tackle files can be turned into a self documenting CLI by wrapping business logic with declarative hooks which also serve as interfaces to calling other tackle hooks / providers. This document shows the semantics of this pattern.</p> <p>Example <code>tackle.yaml</code></p> <pre><code>&lt;-:\n  help: This is the default hook\n  target:\n    type: str\n    description: The thing to say hello to\n  exec&lt;-:\n    greeting-&gt;: select Who to greet? --choices ['world','universe']\n    hi-&gt;: greeter --target {{greeting}}\n  greeting-method&lt;-:\n    help: A method that greets\n    # ... Greeting options / logic\ngreeter&lt;-:\n  help: A reusable greeter object\n  target: str\n  exec&lt;-:\n    hi-&gt;: print Hello {{target}}\n</code></pre> <p>Running <code>tackle help</code> in the same directory as the file above produces its own help screen.</p> <pre><code>usage: tackle hello.yaml [--target]\n\nThis is the default hook\n\noptions:\n    --target [str] The thing to say hello to\nmethods:\n    greeting-method     A method that greets\n    greeter     A reusable greeter object\n</code></pre>"},{"location":"declarative-cli/#default-hook","title":"Default Hook","text":"<p>When calling a tackle provider without any arguments, the parser first calls the default hook which is a key simply with a left facing as shown below.</p> <pre><code>&lt;-:\n  help: This is the default hook\n  a_field: str  \n  exec&lt;-:\n    # Your business logic here\n    p-&gt;: print {{a_field}}\n</code></pre> <p>Default hooks when run without the <code>help</code> argument may require kwargs, flags. For instance running the above example without any arguments will result in an error such as:</p> <pre><code>1 validation error for\na_field\n  field required (type=value_error.missing)\n</code></pre> <p>This is because no default value has been given for the field <code>a_field</code> and so tackle raises an error for that. Check out declarative hook, input fields docs for further information on the options with creating fields.</p>"},{"location":"declarative-cli/#default-hook-additional-context","title":"Default Hook Additional Context","text":"<p>In the event that there is some additional context outside of the default hook, it is parsed after the default hook has been executed. For instance given this tackle file:</p> <pre><code>&lt;-:\n  help: This is the default hook\n  a_field: str  \n  exec&lt;-:\n    foo-&gt;: var {{a_field}}\n    # Your business logic here\nbar-&gt;: {{foo}}\n</code></pre> <p>When running <code>tackle example.yaml --a_field baz -pf yaml</code> the result is:</p> <pre><code>foo: baz\nbar: baz\n</code></pre> <p>Notice how the result of the default hook is made available to be used for rendering the key <code>bar</code>.</p>"},{"location":"declarative-cli/#default-hook-methods","title":"Default Hook Methods","text":"<p>Default hooks, like other declarative hooks, can have methods that can be embedded within one another. For given the example from the top, when running <code>tackle example.yaml greeting-method help</code>, we get a help screen like this:</p> <pre><code>usage: tackle example.yaml greeting-method\n\nA method that greets\n</code></pre> <p>Note: Issue #101 updating this</p>"},{"location":"declarative-cli/#normal-hooks","title":"Normal Hooks","text":"<p>When running <code>tackle help</code>, a help screen is not only produced for the default hook but for any other hooks that exist in the public hook namespace.</p> <p>For instance to call the <code>greeter</code> hook directly from the command line in the top example, one would call:</p> <pre><code>tackle example.yaml greeter --target foo\n</code></pre> <p>In this case, the outer context is not parsed as in the case of the default hook.</p>"},{"location":"declarative-cli/#importing-hooks","title":"Importing Hooks","text":"<p>Any hook defined in the <code>hooks</code> / <code>.hooks</code> directory are made available when calling tackle. So for instance lets say we had the following file in <code>.hooks/some-hooks.yaml</code>:</p> <pre><code>public&lt;-:\n  help: A public hook\n  public: foo\nprivate&lt;_:\n  help: A private hook\n  private: bar\n</code></pre> <p>When running <code>tackle example.yaml help</code>, we would get the public hook showing in the help screen and the private not. On the same vein, both hooks can be used from within the <code>example.yaml</code>.</p> <pre><code>call-public-&gt;: public\ncall-private-&gt;: private\n</code></pre> <p>Results in the following with the command: <code>tackle example.yaml -pf yaml</code></p> <pre><code>call-public:\n  stuff: public stuff\ncall-private:\n  things: private things\n</code></pre> <p>Future version will also allow you to import hooks from remote locations that along with making python hooks public which are private by default.</p>"},{"location":"declarative-hook-attributes/","title":"Declarative hook attributes","text":"<p>WIP</p> <p>Validators Extends Overrides Config Alias Return Remove</p>"},{"location":"declarative-hook-attributes/#validators","title":"Validators","text":"<p>Validators are functions that are run when a field is set and require returning the value to set the field.</p> <p>Validators can be set at the hook definition level or within a field itself. When defining validators on a hook definition level, an object with keys regex matched to field names is expected allowing users to apply validators to multiple fields at the same time.</p> <p>The shorthand version of validators leverages a macro to assume variable names when asserting logic where the value being validated</p> <p>Shorthand Validator <pre><code>SomeHook&lt;-:\n  foo: bar\n  validators:\n    foo:  # Apply validator to field `foo`\n      assert-&gt;: isinstance(v,'str')\n      return-&gt;: baz --if v=='bar'\n</code></pre></p> <p>Regex Matching Case <pre><code>SomeHook&lt;-:\n  foo: bar\n  baz: bing\n  validators:\n    foo|baz:\n      assert-&gt;: isinstance(v,'str')\n      return-&gt;: baz --if v=='bar'\n</code></pre></p> <pre><code>SomeHook&lt;-:\n  foo:\n    default: bar\n    validator:\n      assert-&gt;: isinstance(foo,'str')\n      return-&gt;: baz --if v=='bar'\n</code></pre> <pre><code>SomeHook&lt;-:\n  foo:\n    default: bar\n    validator:\n      values:\n        v: bar\n        info: ...\n      mode:\n      body:\n        assert-&gt;: isinstance(foo,'str')\n        return-&gt;: baz --if v=='bar'\n</code></pre>"},{"location":"declarative-hook-attributes/#extends","title":"Extends","text":"<p>Hooks can extend other hooks allowing inheritance patterns to keep hook implementations dry. Hooks that are extended inherit both their base fields and methods all of which can be overriden within the definition.</p> <pre><code>BaseHook&lt;-:\n  foo: bar\n  baz: bing\n\n  output&lt;-:\n    return-&gt;: \"{{foo}}\"\n\nExtendedHook&lt;-:\n  extends: BaseHook\n  baz: bang\nassert-&gt;: \"{{BaseHook.foo}}\" \"{{ExtendedHook.output}}\"\n</code></pre> <p>You can also extend from multiple hooks. Fields are inherited in order with the last item  </p>"},{"location":"declarative-hook-attributes/#overrides","title":"Overrides","text":""},{"location":"declarative-hook-attributes/#config","title":"Config","text":"<p>Hooks can have configuration properties the same as pydantic's to inform how the hook validates it's fields and other aspects of model instantiation.</p>"},{"location":"declarative-hooks/","title":"Declarative Hooks","text":"<p>Declarative hooks are hooks that are written within tackle files and almost mirror the functionality of python hooks. They are useful when you want to create reusable logic, validate schemas, or create self documenting CLI's out of tackle files. They can have strongly typed fields and can have object-oriented properties such as inheritance and methods that can be passed between hooks.</p>"},{"location":"declarative-hooks/#basic-usage","title":"Basic Usage","text":"<p>Declarative hooks are keys that end with an arrow to the left, <code>&lt;-</code> for public hooks / <code>&lt;_</code> for private hooks (more on this later), which is the same as hook calls (ie <code>-&gt;</code>/<code>_&gt;</code>) but in the opposite direction.</p> <p>For instance the following shows both a declarative hook and a call of that hook.</p> <pre><code>declarative_hook&lt;-:\n  input: str\nhook_call:\n  -&gt;: declarative_hook\n  input: stuff\n</code></pre> <p>Declarative hooks have no required fields as in the example above the hook is simply used to validate the input and by default will simply return an object with its fields.</p> <pre><code>hook_call:\n  input: stuff\n</code></pre>"},{"location":"declarative-hooks/#input-fields","title":"Input fields","text":"<p>Declarative hooks can have input fields with types, defaults, validators, and other parameters that mirrors functionality of pydantic's <code>Field</code>. There are many forms that</p> <p>In each of the previous examples, the input type for the <code>target</code> field was inferred by the default value but it is possible to make the input fields strongly typed just like python hooks. This can be done in two different ways, by giving the type as a string or as a map with named fields the same as pydantic's <code>Field</code> function.</p> <p>When the types are given as literals, they are also by default required. For instance the following hook would require each of the inputs with their corresponding type.</p> <pre><code>some_hook&lt;-:\n  a_str: str\n  a_bool: bool\n  a_int: int\n  a_float: float\n  a_list: list\n  a_dict: dict\ncall:\n  -&gt;: some_hook\n  a_str: foo\n  a_bool: true\n  a_int: 1\n  a_float: 1.2\n  a_list: ['stuff', 'things']  \n  a_dict: {'stuff': 'things'}\n</code></pre> <p>Additionally, hook fields can be declared with key value pairs corresponding to pydantic's <code>Field</code> inputs. For instance the following would be able to validate the type of an <code>input</code> field of type string:</p> <pre><code>some_hook&lt;-:\n  input:\n    type: str\n    default: foo\n    pattern: ^foo.*  # Like a regex validate\n    description: A bar\npass-&gt;: some_hook --input foo-bar\nfail-&gt;: some_hook --input bar --try --except {{print('Not valid')}}\n</code></pre> <p>When building declarative CLIs, one often populates the <code>description</code> field for the <code>help</code> screen so the method has docs.</p>"},{"location":"declarative-hooks/#exec-method","title":"<code>exec</code> method","text":"<p>If you want the hook to actually do something, the hook will need to have an <code>exec</code> method similar to how a python hooks have the same.  As a simple example, here we are creating a hook <code>greeter</code> that prints <code>Hello world!</code>:</p> <pre><code>greeter&lt;-:\n  exec:\n    target: world\n    hi_&gt;: print Hello {{target}}!\ncall-&gt;: greeter\n</code></pre> <p>By default, declarative hooks return the entire context from the exec method so in the example above, the output would be:</p> <pre><code>call:\n  target: world\n</code></pre> <p>This is because the key <code>hi_&gt;</code> is a private hook call (see memory management for more info) and only the public context is returned.</p> <p>Alternatively the <code>target</code> field could have been in the base of the hook and woul d</p>"},{"location":"declarative-hooks/#return-key","title":"<code>return</code> key","text":"<p>If you want to only return a part of the exec call, the <code>return</code> key is available for this. For instance given the following example:</p> <pre><code>greeter&lt;-:\n  exec:\n    target: world\n    hi-&gt;: print Hello {{target}}!\n  return: target\ncall-&gt;: greeter\n</code></pre> <p>The output would now be:</p> <pre><code>call: world\n</code></pre> <p>As the <code>return</code> key dereferences the <code>target</code> from the exec method.  </p> <p>TODO: Future versions will allow more flexible return inputs #93.</p>"},{"location":"declarative-hooks/#field-default-type","title":"Field Default Type","text":"<p>The type field does not need to be populated if given a default and the same type can be inferred.</p> <pre><code>some_hook&lt;-:\n  input:\n    default:\n      - stuff\n      - things\ncall:\n  -&gt;: some_hook --input foo --try\n  except:\n    p-&gt;: print Wrong type!!\n</code></pre>"},{"location":"declarative-hooks/#fields-with-hooks","title":"Fields With Hooks","text":"<p>Hooks can be used for the field's default value and is useful if you want to call some hook when the value is not supplied. These hook field defaults can be written in a couple ways.</p> <p><code>example.yaml</code> <pre><code>a_hook&lt;-:\n  literal_compact-&gt;: input\n  literal_expanded:\n    -&gt;: input\n  field_default_compact:\n    type: str\n    default-&gt;: input\n</code></pre></p> <p>Each one of these will in the absense of supplying a value call the input hook as below.</p> <pre><code>? literal_compact &gt;&gt;&gt; foo\n? literal_expanded &gt;&gt;&gt; bar\n? field_default_compact &gt;&gt;&gt; baz\n</code></pre> <p>Resulting in the following context easily viewable with the following command:</p> <pre><code>tackle example.yaml a_hook -p\n</code></pre> <pre><code>literal_compact: foo\nliteral_expanded: bar\nfield_default_compact: baz\n</code></pre>"},{"location":"declarative-hooks/#methods","title":"Methods","text":"<p>Declarative hooks can have methods that can be called similar to how the <code>exec</code> method is called. For instance the following would print out \"Hello world!\".</p> <pre><code>words&lt;-:\n  hi: Wadup\n  say&lt;-:\n    target: str\n    exec:\n      p-&gt;: print {{hi}} {{target}}\n\np-&gt;: words.say --hi Hello --target world!\n</code></pre> <p>Here you can see that there is method <code>say</code> that when called executes its own <code>exec</code> method which is able to access the base attribute <code>hi</code>.  This is useful in many contexts where one wants to extend base objects with additional functionality.</p> <p>Future versions are contemplating ways to do method overloading based on types. Stay tuned.</p> <p>Additionally, methods are callable from the command line. For instance if the above was in a file <code>.tackle.yaml</code>, you could call the method with:</p> <pre><code>tackle words say --hi Hello --target world!\n</code></pre>"},{"location":"declarative-hooks/#extending-hooks","title":"Extending Hooks","text":"<p>Tackle has the notion of extending hooks from base hooks similar to inheritance patterns found in OOP languages. This is useful if you have a schema that you want to use in multiple hooks or you want to create generic methods that apply to multiple schemas. For instance:</p> <pre><code>base&lt;-:\n  hi:\n    default: Hello\n\nwords&lt;-:\n  extends: base\n  say&lt;-:\n    target: str\n    exec:\n      p-&gt;: print {{hi}} {{target}}\n\np-&gt;: words.say --target world!\n</code></pre> <p>Here we can see some base hook <code>base</code> which is then extended in the <code>words</code> hook.</p> <p>Note: Future versions of tackle will support inheriting from schema specs like OpenAPI.</p>"},{"location":"declarative-hooks/#public-vs-private-hooks","title":"Public vs Private Hooks","text":"<p>Hooks are divided into two namespaces, public and private hooks which are mainly used to inform the display of a help screen. For instance when running <code>tackle example.yaml help</code> against this file:</p> <pre><code>public&lt;-:\n  help: A public hook\nprivate&lt;_:\n  help: A private hook\n</code></pre> <p>Only the public hook is shown as below:</p> <pre><code>usage: tackle example.yaml\n\nmethods:\n    public     A public hook\n</code></pre> <p>Private hooks are those hooks that perform some internal reusable business logic whereas public hooks are those that you want the user to be able to call from the command line and be documented from the help screen.</p> <p>More info in Declarative CLI docs on the details of the help screen and calling from the command line.</p>"},{"location":"definitions/","title":"Definitions","text":"<p>tackle file tackle provider tackle base hook python hook</p>"},{"location":"demos/","title":"Demos","text":"<p>In this section we will go over a number of demos of Tackle Box along with the main takeaways.</p> <p>To walk through all the demos, run: <pre><code>tackle robcxyz/tackle-demo\n</code></pre></p>"},{"location":"development-roadmap/","title":"Development Roadmap","text":"<p>Tackle is still a work in progress with the following new features planned.</p> <ul> <li>Composition</li> <li>Complex types</li> <li>[]</li> <li>IDE Autocomplete</li> <li>Providers allowing import of jinja extensions</li> <li>Provider registry</li> <li>Rewrite in compiled language</li> </ul>"},{"location":"development-roadmap/#ide-autocomplete","title":"IDE Autocomplete","text":"<p>Need to extract the json schema from each hook and upload that to schemastore.org/json/ with appropriate catalog.json file.</p>"},{"location":"development-roadmap/#providers-allowing-import-of-jinja-extensions","title":"Providers allowing import of jinja extensions","text":"<p>Providers give a good import abstraction so it would be cool to be able to allow dynamically importing of various jinja extensions as well. For instance if we defined an extension:</p>"},{"location":"development-roadmap/#provider-registry","title":"Provider registry","text":"<p>If this tool gets enough traction, a provider registry will be made to allow users to find new hooks and providers similar to the Terraform Registry and [Ansible Galaxy](https://galaxy.ansible.com/. Users should be able to link a GitHub repo to the registry and provide metadata that will allow users to easily be able to search for the hook / provider that they need with auto-generated documentation similar to how the docs show hook docs.</p>"},{"location":"development-roadmap/#rewrite-in-compiled-language","title":"Rewrite in compiled language","text":"<p>If this tool gets enough traction, it will be rewritten in a compiled language, most likely Rust. The current version is considered experimental with different patterns for expressing logic being formed. Future versions will maintain compatibility with python hooks and also support hooks being written in other languages.</p>"},{"location":"hook-methods/","title":"Hook Base Methods","text":"<p>Every hook has a number of base methods that are implemented alongside the declaration of the hook.  This document outlines each of these methods with an example of their use.</p> <ul> <li>Loops<ul> <li><code>for</code> / <code>reverse</code></li> </ul> </li> <li>Conditionals<ul> <li><code>if</code> / <code>when</code> / <code>else</code></li> </ul> </li> <li>Methods<ul> <li><code>chdir</code></li> <li><code>merge</code></li> <li><code>try</code> / <code>except</code></li> <li><code>defer</code> - Coming soon</li> </ul> </li> </ul>"},{"location":"hook-methods/#loops","title":"Loops","text":"<p>Hooks can be called in a loop based on specifying a list input in a <code>for</code> key and will return a list. Within the loop, the iterand is stored in a temporary variable <code>item</code> along with it's indexed position in a variable called <code>index</code>. For instance running:</p> <pre><code>printer:\n  -&gt;: var \"We are at item {{ item }} and index {{ index }}\"\n  for:\n    - stuff\n    - things\n</code></pre> <p>Would result in:</p> <pre><code>printer:\n  - We are at item stuff and index 0\n  - We are at item things and index 1\n</code></pre> <p>The <code>for</code> key must be a list so if the input is a string, it is rendered by default like in this example which does the same as above:</p> <pre><code>a_list:\n  - stuff\n  - things\n\nprinter:\n  -&gt;: print \"We are at item {{ item }} and index {{ index }}\"\n  for: a_list\nprinter_compact-&gt;: print \"{{ item }}/{{ index }}\" --for a_list\n</code></pre> <p>Loop iterands can be of any type as in this example:</p> <pre><code>printer:\n  -&gt;: print \"The type is {{ item.type }}\n  for:\n    - name: foo\n      type: stuff\n    - name: bar\n      type: things\n</code></pre> <p>Additionally, jinja hooks can be used to do some logic that could help with some patterns. For instance the keys hook can be used to create a list of keys from a map which can be used as an iterand.</p> <pre><code>inputs:\n  foo:\n    type: stuff\n  bar:\n    type: things\n\nprinter:\n  -&gt;: print \"The type is {{ inputs[item].type }}\n  for: \"{{keys(inputs)}}\"\n</code></pre>"},{"location":"hook-methods/#reverse","title":"<code>reverse</code>","text":"<p>To loop through a list in reverse, simply set a <code>reverse</code> key to true as in this example:</p> <pre><code>printer:\n  -&gt;: print \"We are at item {{ item }} and index {{ index }}\"\n  for:\n    - stuff\n    - things\n  reverse: true\n</code></pre> <p>Would result in:</p> <pre><code>printer:\n  - We are at item things and index 1\n  - We are at item stuff and index 0\n</code></pre>"},{"location":"hook-methods/#conditionals","title":"Conditionals","text":""},{"location":"hook-methods/#if","title":"<code>if</code>","text":"<p>Hooks can be conditionally called with an <code>if</code> key that needs to resolve to some kind of boolean. It is typically based on some kind of jinja expression. For instance:</p> <pre><code>planet-&gt;: select What planet you on? --choices ['earth','mars']\nweather:\n  -&gt;: print {{ planet | title }} weather is nice!\n  if: planet == 'earth'\n</code></pre> <p>Here we can see the <code>if</code> key that by default is wrapped with jinja braces and is evaluated as true or false depending on the value entered into the <code>planet</code> key. Full jinja syntax is supported so other assertions such as whether an item is in a list (ie <code>if: 'a key' in a_list</code>) is supported.</p> <p>The <code>if</code> key is evaluated after a <code>for</code> loops are entered allowing list comprehensions to be done. For instance this example would only print \"Hello world!\".</p> <pre><code>words:\n  - Hello\n  - cruel\n  - world!\nexpanded:\n  -&gt;: print {{item}}\n  for: words\n  if: item != 'cruel'\ncompact-&gt;: print {{item}} --for words --if \"item != 'cruel'\"\n</code></pre>"},{"location":"hook-methods/#when","title":"<code>when</code>","text":"<p>For imposing conditionality before a loop, the <code>when</code> method exists. For instance in this example the <code>when</code> is evaluated first, the loop is entered, and then the <code>if</code> condition is imposed to do a list comprehension.</p> <pre><code>words: ['Hello', 'cruel', 'world!']\nexpanded:\n  -&gt;: print {{item}}\n  for: words\n  when: \"'Hello' in words\"\n  if: item != 'cruel'\n</code></pre>"},{"location":"hook-methods/#else","title":"<code>else</code>","text":"<p>If you want to return a different value when the <code>if</code> or <code>when</code> condition resolves to false, use the <code>else</code> key with the value you wish to return otherwise.  For instance:</p> <pre><code>name-&gt;: input What is your name?\nhello:\n  -&gt;: print Hello {{ name }}!\n  if: name != 'Rob'\n  else: Hello me\n</code></pre> <p>Which can also be rendered.</p> <pre><code>intro: Hello\n...\n  else: {{intro}} me\n</code></pre> <p>And could have hooks embedded in it. <pre><code>hello:\n...\n  else: {{print('Hello me')}}\n</code></pre></p> <p>Or simply could be a dictionary output with further hooks. <pre><code>hello:\n...\n  else:\n    stuff:\n      things-&gt;: print foo\n</code></pre></p> <p>Currently only jinja hooks are supported as string values. Future could add support for <code>else-&gt;/else_&gt;</code> compact hook calls.</p> <p>Checkout the match hook if needing to do a lot of conditionals which can satisfy regexes when catching cases.</p>"},{"location":"hook-methods/#methods","title":"Methods","text":""},{"location":"hook-methods/#chdir","title":"<code>chdir</code>","text":"<p>Sometimes it is desirable to run the hook in another directory.  For this there is the <code>chdir</code> key where the hook is called in the context of the directory being specified. For instance one could run the <code>listdir</code> hook in another directory:</p> <pre><code>contents:\n  -&gt;: listdir\n  chdir: path/to/some/dir\n</code></pre>"},{"location":"hook-methods/#merge","title":"<code>merge</code>","text":"<p>If the output of the hook call is a map, then one can merge that map into the parent keys.  For instance given this <code>block</code> hook:</p> <pre><code>stuff: things\n\nto merge-&gt;:\n  merge: true\n  stuff: more things\n</code></pre> <p>Would result in:</p> <pre><code>stuff: more things\n</code></pre> <p>Future work will support merging operations for lists as interpreted as an append operation</p>"},{"location":"hook-methods/#try-except","title":"<code>try</code> / <code>except</code>","text":"<p>To catch errors, use the <code>try</code> method which also can run a context in the case of failure in an <code>except</code> method.  For instance in both these example the print would execute.</p> <pre><code>a failed command-&gt;: command \"foo bar\" --try  # Would exit without try\np-&gt;: print Hello world!  # This would print\n</code></pre> <pre><code>a failed command:\n  -&gt;: command \"foo bar\"\n  try: true\n  except:\n    p-&gt;: print Hello world!\n</code></pre>"},{"location":"hook-methods/#defer-coming-soon","title":"<code>defer</code> - Coming soon","text":"<p>Future versions of tackle fill have a <code>defer</code> functionality similar to Go where one can declare deferred actions that will run if there is a script error or when a tackle file / execution is finished.  Details still being worked out.</p>"},{"location":"installation/","title":"Installation","text":"<p>Tackle aims to be cross-platform (linux, windows, mac) and can be installed via python's package manager, pip.</p> <p>Warning -&gt; tackle can install additional packages. Keep reading document for recommended installation settings.</p>"},{"location":"installation/#simplest-installation","title":"Simplest installation","text":"<pre><code>pip install tackle\n</code></pre> <p>Windows users: Tackle strives to be fully functional on windows but has some incompatibilities.  Accepting PRs.</p>"},{"location":"installation/#intermediate-installation","title":"Intermediate installation","text":"<p>Tackle has the capability to install additional package dependencies from hooks. If you wish to keep your system python interpreter clean of packages, you should use a virtual environment.</p> <pre><code>python3 -m venv env\nsource env/bin/activate\npip install tackle\n</code></pre>"},{"location":"installation/#best-installation-method","title":"Best installation method","text":"<p>An even better way of using tackle is creating a function that by default activates a virtual environment, runs a tackle command, and deactivates the environment when done. For that, create a virtual environment (steps from above), install tackle, and then put this function changing the path to your virtual environment in your <code>~/.zshrc</code> / <code>~/.bashrc</code>.</p> <pre><code>tackle() {\n    # Change this path to your virtual environment!\n    source ~/code/tackle/env/bin/activate  \n    # And this one!\n    ~/code/tackle/env/bin/tackle \"$@\"  \n    deactivate\n}\n</code></pre> <p>Note: PRs welcome for windows for above method</p>"},{"location":"installation/#installing-additional-dependencies","title":"Installing additional dependencies","text":"<p>As mentioned, tackle has an import system that is able to install additional pip dependencies but you can also install dependencies for local hooks when you install tackle initially. To do that, run:</p> <pre><code>pip install \"tackle[all]\"\n</code></pre> <p>Note, if you import another provider, it may still have additional dependencies.</p>"},{"location":"installation/#building-from-source","title":"Building from source","text":"<p>If you want to contribute / build from source, run the following.</p> <pre><code>git clone https://github.com/robcxyz/tackle\ncd tackle\npython3 -m venv env\nsource env/bin/activate\npython setup.py install\n</code></pre>"},{"location":"jinja/","title":"Jinja","text":"<p>At the core of all tackle logic is the jinja templating language which enables the majority of the features in the syntax.</p>"},{"location":"jinja/#variable","title":"Variable","text":"<p>By default, all fields in tackle hooks are rendered if they have curly braces. For instance given the following hook call, the output would print <code>stuff</code> then <code>things</code>:</p> <pre><code>stuff: things\nstring-&gt;: print stuff\njinja-&gt;: print {{stuff}}\n</code></pre>"},{"location":"jinja/#for-loops","title":"For Loops","text":"<p>When running within a for loop, tackle automatically keeps track of the iterand and integer index of the loop. For instance the following would print out <code>stuff 0</code> and <code>things 1</code>:</p> <pre><code>printer:\n  -&gt;: print {{item}} {{index}}\n  for:\n    - stuff\n    - things\n</code></pre> <p>Alternatively that could be written as:</p> <pre><code>printer-&gt;: print {{item}} {{index}} --for ['stuff','things']\n</code></pre>"},{"location":"jinja/#rendering-by-default","title":"Rendering By Default","text":"<p>Not all fields need to be wrapped with jinja though including several base methods and hook fields. For instance the <code>if</code> and <code>for</code> methods are automatically interpreted as jinja expressions and do not need to be wrapped with braces. This is because writing an <code>if</code> statement makes little sense unless it is dynamic which jinja is needed for. Along the same thread, inputs of type string for <code>for</code> loops implicitly mean they need to be rendered. For instance the following would print out <code>stuff</code> and <code>things</code>.</p> <pre><code>a_list:\n  - stuff\n  - things\nprinter:\n  -&gt;: print {{item}}\n  if: \"'stuff' in a_list\"\n  for: a_list\n</code></pre> <p>Note the additional quotes in the if statement which is a yaml parsing nuance of ruamel, the parsing package used by tackle.  </p> <p>Hook fields additionally can be marked as being rendered by default in both python and declarative hooks. For instance with the <code>var</code> hook, a python hook used to render variables, the input is rendered by default so the following would work:</p> <pre><code>stuff: things\ncall-&gt;: var stuff\ncheck-&gt;: assert \"{{call}}\" things\n</code></pre> <p>This field can additionally be added to declarative hooks like so:</p> <pre><code>some_hook&lt;-:\n  input:\n    default: foo\n    render_by_default: true\nstuff: things\nschema-&gt;: some_hook --input stuff # Not things\ncheck-&gt;: assert \"{{schema.input}}\" things\n</code></pre>"},{"location":"jinja/#jinja-expressions","title":"Jinja Expressions","text":"<p>Jinja offers a rich expression syntax that is similar to python's and allows checking whether items are equal, items are in a list / map, and other things outside the scope of these docs that you can find in jinja's excellent documentation.</p> <p>For instance to conditionally run a key based on a user input:</p> <pre><code>user_input-&gt;: select Input what? --choices ['stuff','things']\nrun_stuff-&gt;: print Stuff --if user_input=='stuff'\nrun_things:\n  -&gt;: print Things\n  if: user_input == 'things'\n</code></pre> <p>Or one could check if an item is in a list:</p> <p>Note: <code>checkbox</code> hook is a multi-select prompt that returns a list</p> <pre><code>user_input-&gt;: checkbox Input what? --choices ['stuff','things'] --checked\nrun_stuff-&gt;: print Stuff --if \"'stuff' in user_input\"\nrun_things:\n  -&gt;: print Things\n  if: \"'stuff' in user_input\"\n</code></pre> <p>Notice in this example the extra quoting which is an artifact of yaml parsing and need to be encapsulated for the parser.</p>"},{"location":"jinja/#jinja-filters","title":"Jinja Filters","text":"<p>Jinja natively has numerous builtin functions that allow a wide variety of actions similar to tackle but with less options. To see the full list, check out jinja's documentation.</p>"},{"location":"jinja/#list-comprehensions","title":"List Comprehensions","text":"<p>While tackle supports list comprehensions, jinja conveniently does as well and can be done in a single line.</p> <pre><code>input_list:\n  - stuff\n  - and\n  - things\nreject_list:\n  - and\nlist_comprehension-&gt;: \"{{ input_list | reject('in', reject_list) | list }}\"\n</code></pre> <p>Here, <code>reject</code> and <code>list</code> are builtin jinja filters, not tackle hooks.</p>"},{"location":"jinja/#calling-hooks-from-jinja","title":"Calling Hooks from Jinja","text":"<p>Calling hooks from jinja can be convenient in a lot of situations when one wants to string hooks together. For instance here is an example using the yaml hook that reads a key from a file using a dynamic path based on variable inputs.</p> <pre><code>read_key_in_file-&gt;: \"{{yaml(path_join([a_str_var,join(a_list_var),'values.yaml'])).a_key}}\"\n</code></pre> <p>Note: The above example uses a convenience macro whereby without an actual hook declaration and jinja templating, tackle interprets that as an object to rander.</p> <p>Another nice pattern is to prompt a user to do something within an if statement as a one liner:</p> <pre><code>do_thing-&gt;: do_stuff 'input' --if confirm('Do the thing?')\n</code></pre>"},{"location":"key-words/","title":"Key words","text":"<ul> <li>return</li> <li>help</li> <li>args</li> <li>render_exclude</li> </ul>"},{"location":"known-issues/","title":"Known issues","text":"<p>Known Issues</p> <ul> <li>Using <code>append</code> hook from a block on outside key</li> <li>https://github.com/sudoblockio/tackle/issues/220</li> <li>Merging from a <code>match</code> hook</li> <li>https://github.com/sudoblockio/tackle/issues/184</li> </ul>"},{"location":"memory-management/","title":"Memory Management","text":"<p>Tackle has a memory management model that defines the order of precedence when rendering variables and the ability for tackle files to pass context between one another. These areas of memory allow users to more easily access and control the context that is used to call and pass variables.  </p> <p>There are four areas of memory, public, private, temporary, and existing. Public and private memory are focused on what is passed between tackle calls while temporary and existing is mainly focused on how to indent the context when building control flow in nested blocks.</p> <p>NOTE: Public and private memory is not to be confused with public and private hooks which relate to what hooks are externally callable.</p> Type Mutable Passed Between Calls Passed Between Contexts Public X X X Private X Temporary Existing X"},{"location":"memory-management/#public-vs-private-memory","title":"Public vs Private Memory","text":"<p>For passing variables between files, tackle has the notion of <code>public</code> and <code>private</code> memory spaces that are differentiated based on any kind of hook call that ends in <code>-&gt;</code> or <code>_&gt;</code> respectively.  Public contexts are exported when calling a declarative hook / tackle file / provider whereas private contexts stay local to the declarative hook / tackle file / provider. By default, non-hook calls are inserted into the public context. For instance given the following tackle file and running <code>tackle file.yaml -p</code>, with the <code>-p</code> short for <code>--print</code>, an option that prints out the output / public context:</p> <pre><code>stuff: things\nprivate_hook_&gt;: input Enter value?\npublic_hook-&gt;: var You entered value {{private_hook}}...\n</code></pre> <p>Would result in:</p> <pre><code>stuff: things\npublic_hook: You entered value &lt;the value you entered&gt;...\n</code></pre> <p>Public and private contexts are really only important when:</p> <ol> <li>Operating in schema constrained environments</li> <li> <p>For instance you want to instantiate some schema but need to do some control flow with intermediary variables. Private memory is a good place to put those variables and not have them brought into the schema.</p> </li> <li> <p>Using untrusted hooks and don't want things like passwords leaked 3.</p> </li> </ol> <pre><code>goto&lt;-:\n  exec:\n    type: journey\n    destination_&gt;: input Where we going? --default moon\n    itinerary-&gt;: var One trip to the {{destination}}\ntrip-&gt;: goto\n</code></pre> <p>Which when run with <code>tackle file.yaml -p</code> would prompt the user and return:</p> <pre><code>trip:\n  type: journey\n  itinerary: One trip to the moon\n</code></pre> <p>Where we can see that <code>destination</code> was not included in the output because it is a private hook. This shows how if you need to control the schema, private hooks are an good way manage what is return it while still having the ability to use internal variables and call internal actions.</p>"},{"location":"memory-management/#existing-context","title":"Existing Context","text":"<p>The existing context is the public context that is passed when calling another tackle file or providers from within a tackle file. It is helpful if you want to build context in one file and then use it in another. For instance a common pattern is to have a data file that holds variables that are then used to render / resolve underlying logic. In the following example we can see the initial file call another file and then use that context to perform an action.</p>"},{"location":"memory-management/#calling-tackleyaml","title":"<code>calling-tackle.yaml</code>","text":"<pre><code>globals-&gt;: tackle globals.yaml --find_in_parent --merge\n#...\ndo-&gt;: print {{stuff}}\n</code></pre> <p>Which could then call a file which asks for things like environment and then indexes some data (many ways to do this) allowing the previous file to access variables specific to the environment.</p>"},{"location":"memory-management/#globalsyaml","title":"<code>globals.yaml</code>","text":"<pre><code>environment-&gt;: select --choices ['dev','prod']\ndev_&gt;:\n  stuff: things\nprod_&gt;:\n  stuff: more things\nmerge-&gt;: get {{environment}} --merge\n</code></pre>"},{"location":"memory-management/#temporary-context","title":"Temporary Context","text":"<p>When parsing blocks and other hooks that parse their own individual context such as the match hook, an additional context is built so that users don't need to provide the full path to variables that are on the same level. For instance given this block hook, the following would run:</p> <pre><code>trips-&gt;:\n  for:\n    - space\n    - the moon\n    - mars\n  destination-&gt;: \"{{item}}\"\n  info_&gt;: print Let's go to {{destination}}!\n</code></pre> <p>Notice how within the <code>trip</code> block, the field <code>destination</code> can be referenced directly without its full path which would be <code>trips[index].destination</code>, something that would be a serious pain in complicated nested logic.  </p>"},{"location":"memory-management/#render-context-precedence","title":"Render Context Precedence","text":"<p>When variables are rendered, they can use any number of different contexts based on an order of precedence described below.</p> <ol> <li>Temporary</li> <li>Public</li> <li>Private</li> <li>Existing</li> </ol>"},{"location":"project-structure/","title":"Project Structure","text":"<p>Tackle box parses arbitrary configuration files (yaml / toml / json) called <code>tackle files</code> and only modifies the content with the calling of a <code>hook</code>. Hooks can be both written in python or declared within the tackle files and are grouped into <code>providers</code>. Providers don't necessarily need to have hooks or tackle files but logically would have at least one of them to do anything. So to be explicit:</p> <ul> <li><code>tackle file</code></li> <li>A configuration file that runs or declares hooks</li> <li>By default it is a file called <code>tackle.yaml</code> and is located at the base of a provider</li> <li>Can be called by other tackle files or can be imported to gain access to hooks declared within the tackle file</li> <li>Additional docs can be found here for how to write tackle files</li> <li><code>hook</code></li> <li>A reusable piece of logic that can be called from within tackle files</li> <li>Either written in python or declared within a tackle file</li> <li>Both python and declarative hooks are strongly typed and contain attributes to make calling them easy</li> <li><code>provider</code></li> <li>An importable / callable collection of hooks and / or a tackle files that runs hooks</li> <li>Tackle ships with a core set of native providers to do basic prompting / system operations / code generation</li> <li>Third party providers are generally stored in github repos and can be imported / called from other tackle files</li> <li>Additional docs can be found here for how to create providers</li> </ul> <p>For instance this is the basic layout of a provider:</p> <pre><code>\u251c\u2500\u2500 hooks\n\u2502 \u2514\u2500\u2500 hook-1.py\n\u2502 \u2514\u2500\u2500 hook-2.py\n\u2502 \u2514\u2500\u2500 requirements.txt\n\u2514\u2500\u2500 tackle.yaml\n</code></pre> <p>Which if it was located in github could be called with <code>tackle &lt;github org&gt;/&lt;repo name&gt;</code></p> <p>For code generators and other utilities that don't have any custom hooks, the provider structure could be as simple as:</p> <pre><code>\u251c\u2500\u2500 templates\n\u2502 \u2514\u2500\u2500 file1.tpl\n\u2502 \u2514\u2500\u2500 file2.tpl\n\u2514\u2500\u2500 tackle.yaml\n</code></pre> <p>Tackle files can also be run on their own or call one another.</p>"},{"location":"project-structure/#remote-providers","title":"Remote providers","text":"<p>Tackle adheres to the XDG base directory specification and stores all the local configuration files in <code>~/.config/tackle</code> such as providers which are stores at <code>~/.config/tackle/providers/&lt;provider org&gt;/&lt;provider name&gt;</code>.</p>"},{"location":"python-hooks/","title":"Creating Hooks","text":"<p>The core business logic of tackle box is expressed in python as a collection of &gt;100 hooks that can be easily extended with additional hooks in both python and declaratively in yaml. This document covers how to create new python hooks.  For the nuances with creating importable providers, checkout the project stucture and creating providers docs.</p>"},{"location":"python-hooks/#general-overview","title":"General Overview","text":"<p>Python hooks are any object located within the <code>hooks</code> directory that extends a <code>BaseHook</code> object, has a <code>hook_name</code> attribute, and implements an <code>exec</code> method as the entrypoint to calling the hook. For instance given this file structure:</p> <pre><code>\u251c\u2500\u2500 hooks\n|  \u2514\u2500\u2500 do_stuff.py  \n\u2514\u2500\u2500 tackle.yaml  \n</code></pre> <p>We could have a file <code>do_stuff.py</code> that has an object <code>DoStuffHook</code> that extends the <code>BaseHook</code>, has a <code>hook_name</code> attribute, and implements an <code>exec</code> method with a simple print statement like so:</p>"},{"location":"python-hooks/#do_stuffpy","title":"<code>do_stuff.py</code>","text":"<pre><code>from tackle import BaseHook\n\n\nclass DoStuffHook(BaseHook):\n    hook_name: str = \"do_stuff\"\n\n    def exec(self):\n        print(\"Doing stuff!\")\n</code></pre> <p>This hook could then be called within a tackle file printing a statement.:</p>"},{"location":"python-hooks/#tackleyaml","title":"<code>tackle.yaml</code>","text":"<pre><code>d-&gt;: do_stuff\n</code></pre>"},{"location":"python-hooks/#hook-fields","title":"Hook Fields","text":"<p>The BaseHook object is in fact a pydantic object allowing input fields to have types and validators which both raise useful errors if the user provides the wrong input.</p> <p>For instance given the following where we added the <code>stuff</code> attribute:</p> <pre><code>from tackle import BaseHook\n\n\nclass DoStuffHook(BaseHook):\n    hook_name: str = \"do_stuff\"\n\n    stuff: str = \"things\"\n\n    def exec(self) -&gt; str:\n        print(f\"Doing {self.stuff}!\")\n        return self.stuff\n</code></pre> <p>We could optionally override the <code>stuff</code> attribute which would be printed and returned when called as below:</p> <pre><code># Prints `Doing more-things`\ncompact-&gt;: do_stuff --stuff more-things\nexpanded:\n  -&gt;: do_stuff\n  stuff: more-things\n</code></pre> <p>Here we can see two forms of calling a hook, the compact and expanded forms. Compact hooks have their attributes and hook methods accessible as flags starting with <code>--</code> whereas expanded hooks have their fields flattened out at the same level as the hook call (ie <code>-&gt;: do_stuff</code>). Both forms can be used in combination with each other.</p>"},{"location":"python-hooks/#hook-arguments","title":"Hook Arguments","text":"<p>Hooks also have a notion of positional arguments that can be mapped to attributes when calling a hook. For instance here is an example similar to the last but with the following changes:</p> <ul> <li>No default value for the <code>stuff</code> attribute making it required</li> <li>A new <code>things</code> attribute</li> <li>An <code>args</code> field which is a list of attributes that are positionally mapped to their inputs</li> </ul> <pre><code>from tackle import BaseHook\n\n\nclass DoStuffHook(BaseHook):\n    hook_name: str = \"do_stuff\"\n    stuff: str\n    things: list = ['foo']\n\n    # Mapper for positional arguments\n    args: list = ['stuff', 'things']\n\n    def exec(self) -&gt; list:\n        print(f\"Doing {self.stuff}!\")\n        return self.things\n</code></pre> <p>Which could then be called as:</p> <pre><code>compact-&gt;: do_stuff foo ['bar','baz']\nexpanded:\n  -&gt;: do_stuff foo\n  things:\n    - bar\n    - baz\n</code></pre> <p>Which allows for simple compact expressions with both positional arguments and expanded forms returning the following:</p> <pre><code>compact:\n  - bar\n  - baz\nexpanded:\n  - bar\n  - baz\n</code></pre> <p>Note: Positional arguments sometimes need quoting to make sure the lexer is able to group inputs together properly.</p>"},{"location":"python-hooks/#hook-keyword-args","title":"Hook Keyword Args","text":"<p>In some cases, it is useful to have additional keyword args mapped to a specific variable. For instance with the tackle hook which wraps the tackle main call, the field, <code>kwargs: str = \"extra_context\"</code> allows additional ,</p>"},{"location":"python-hooks/#hooks-in-jinja","title":"Hooks in Jinja","text":"<p>Hooks with can also be called as jinja filters allowing them to be called in 2 additional ways. Jinja filters can be called with positional arguments as described in the previous section (ie <code>{{jinja_filter(arg1,arg2)}}</code>) or if they have a single positional input, with a pipe (ie <code>{{some_var | jinja_filter}}</code>). For instance the previous example could have been additionally called the following way:</p> <pre><code># Jinja's extension syntax with parenthesis\njinja_extension-&gt;: \"{{ do_stuff('bar') }}\"\n# Note - piped filters need a variable as an input\nfoo: bar\njinja_filter-&gt;: \"{{ foo | print }}\"  \n</code></pre>"},{"location":"python-hooks/#concepts","title":"Concepts","text":""},{"location":"python-hooks/#pydantic-and-types","title":"Pydantic and Types","text":"<p>Pydantic has some idioms to be aware of when writing hooks specifically around types and fields. Every attribute needs to be declared with a type in pydantic and will throw an error if the type is not explicitly declared within the attribute's definition or if the wrong type is fed into the field. Because everything that is output from a hook needs to serializable (i.e. it can't return python objects), many pydantic types aren't usable unless they can be directly serialized back into a structured data format (i.e. a string, int, float, list, or dict).  </p> <p>Multiple types for attributes are allowed by use of the <code>Union</code> or <code>Optional</code> types (see difference) so that within the exec statement one can qualify the type and process it appropriately. For instance:</p> <pre><code>from tackle import BaseHook\nfrom typing import Union\n\n\nclass DoStuffHook(BaseHook):\n    hook_name: str = \"do_stuff\"\n    things: Union[str] = None\n    args: list = ['things']\n\n    def exec(self):\n        if isinstance(self.things, list):\n            for i in self.things:\n                print(f\"Thing = {i}\")\n        elif isinstance(self.things, str):\n            print(self.things)\n        return self.things\n</code></pre>"},{"location":"python-hooks/#arguments-with-list-and-dict-types","title":"Arguments with list and dict types","text":"<p>Input arguments can be of any type though in practical terms, the only way to input list/map types is through rendering variable inputs. For instance given this hook:</p> <pre><code>class DoStuffHook(BaseHook):\n    hook_name: str = \"do_stuff\"\n    things: dict = None\n    more_things: list = None\n    args: list = ['things', 'more_things']\n\n    def exec(self):\n        ...\n</code></pre> <p>One could use input args per the following tackle file:</p> <pre><code>a_map:\n  stuff: things\na_list:\n  - stuff\n  - things\nwith_rendering-&gt;: do_stuff \"{{ a_map }}\" \"{{ a_list }}\"\n</code></pre> <p>But that's a little verbose so instead we can render inputs by default as explained in the next section.</p>"},{"location":"python-hooks/#controlling-rendering-of-fields","title":"Controlling Rendering of Fields","text":"<p>Sometimes it only makes sense to have inputs be maps or lists so for convenience sake there is a parameter to render strings by default so that users don't need to wrap with braces. For instance in this hook:</p> <pre><code>from tackle import BaseHook, Field\n\n\nclass DoStuffHook(BaseHook):\n    hook_name: str = \"do_stuff\"\n    things: dict = Field(None, render_by_default=True)\n</code></pre> <p>You can see the extra Field function which when passing <code>render_by_default</code> into it, the string is automatically wrapped with jinja braces and rendered. On top of setting this on a per field basis, one could specify a list of fields like so:</p> <pre><code>from tackle import BaseHook\n\n\nclass DoStuffHook(BaseHook):\n    hook_name: str = \"do_stuff\"\n    things: dict = None\n\n    _render_by_default: list = ['things']\n</code></pre> <p>Which when ran in a tackle file would be:</p> <pre><code>a_map:\n  stuff: things\n\ndo-1:\n  -&gt;: do_stuff a_map  # Cleaner\ndo-2:\n  -&gt;: do_stuff \"{{ a_map }}\"  # Braces needed without render_by_default\n# Validates both are equivalent\ntest-&gt;: assert \"{{ do-1 }}\" \"{{ do-2 }}\"\n</code></pre>"},{"location":"python-hooks/#validators-and-__init__","title":"Validators and <code>__init__</code>","text":"<p>While not a tackle specific functionality, pydantic validators and <code>__init__</code> special methods are supported.</p> <pre><code>from pydantic import validator\nfrom tackle import BaseHook\n\n\nclass DoStuffHook(BaseHook):\n    hook_name: str = \"a_hook\"\n    stuff: str\n    args: list = ['things']\n\n    @validator('stuff')\n    def validate(cls, value):\n        # Check if the input is valid - throw error otherwise\n        if value == 'not-things':\n            raise Exception\n        return value\n\n    def exec(self):\n        return self.stuff\n</code></pre> <p>Which if called with:</p> <pre><code>do-&gt;: do_stuff not-things\n</code></pre> <p>Would throw an exception.</p>"},{"location":"python-hooks/#autogenerated-documentation","title":"Autogenerated Documentation","text":"<p>Documentation can be autogenerated for hooks and providers that looks the same as the official documentation. There are two areas where documentation happens within a hook, in the docstring and within fields themselves.</p> <pre><code>from tackle import BaseHook, Field\n\n\nclass DoStuffHook(BaseHook):\n    \"\"\"Put your hooks description here. Will be rendered as markdown.\"\"\"\n    hook_name: str = \"do_stuff\"\n    things: dict = Field(None, description=\"Put the field's description here.\")\n\n    _render_by_default: list = ['things']\n</code></pre> <p>More specifics on autogenerated docs can be found in the creating providers docs.</p>"},{"location":"special-variables/","title":"Special Variables","text":"<p>A number of special variables exist for using within tackle files to gain access to common things.</p>"},{"location":"special-variables/#directories-and-files","title":"Directories and Files","text":"<ul> <li><code>cwd</code> - Current working directory  </li> <li><code>home_dir</code> - Home directory</li> <li><code>calling_directory</code> - The directory tackle was called from</li> <li><code>calling_file</code> - The path to the tackle file that was first called</li> <li><code>current_directory</code> - The directory of the file being parsed</li> <li><code>current_file</code> - The path to the current file being parsed</li> <li><code>tackle_dir</code> - Directory where tackle config is, defaults to <code>~/.config/tackle</code></li> <li><code>providers_dir</code> - Directory where tackle providers are, defaults to <code>~/.config/tackle/providers</code></li> <li><code>xdg_config_dirs</code> - XDG config dirs- ie ~/.config on linux - the base of the tackle dir</li> <li><code>xdg_cache_home</code> - XDG cache dir</li> <li><code>xdg_config_home</code> - XDG config home</li> <li><code>xdg_data_dirs</code> - XDG data dirs</li> <li><code>xdg_data_home</code> - XDG data dir</li> <li><code>xdg_runtime_dir</code> - XDG runtime dir</li> <li><code>xdg_state_home</code> - XDG state home</li> </ul>"},{"location":"special-variables/#system-properties","title":"System Properties","text":"<ul> <li><code>system</code> - OS (ie <code>Darwin</code>, <code>Linux</code>, <code>Windows</code>). Same as python's <code>platform.system()</code></li> <li><code>platform</code> - OS with kernel, ie <code>Linux-5.8.0-45-generic-x86_64-with-glibc2.29</code></li> <li><code>version</code> - Kernel's release, ie <code>#51~20.04.1-Ubuntu SMP Tue Feb 23 13:46:31 UTC 2021</code></li> <li><code>processor</code> - Processor architecture, ie <code>x86_64</code>. Same as <code>platform.processor()</code></li> <li><code>architecture</code> - Further architecture info, ie <code>('64bit', 'ELF')</code></li> <li><code>lsb_release</code> - Same as linux's lsb_release, ie <code>Ubuntu 20.04.4 LTS (Focal Fossa)</code></li> </ul>"},{"location":"special-variables/#tackle-internals","title":"Tackle Internals","text":"<p>See memory management docs for more details on the differences between contexts.</p> <ul> <li><code>this</code> - The public context from normal keys and hooks called with <code>-&gt;</code></li> <li><code>public_context</code> - The public context from normal keys and hooks called with <code>-&gt;</code></li> <li><code>private_context</code> - The private context from hooks called with <code>_&gt;</code></li> <li><code>existing_context</code> - The existing context passed into blocks</li> <li><code>temporary_context</code> - The temporary context when parsing blocks</li> <li><code>key_path</code> - A list of keys to identify position in document</li> <li><code>key_path_block</code> - Same as key path but normalized for being within a block</li> </ul>"},{"location":"testing-providers/","title":"Testing Providers","text":"<ul> <li>Testing hooks</li> <li>Testing tackle files</li> <li>Overrides</li> </ul> <p>Being able to test both the tackle files and providers is critical to building maintainable tackle files / hooks. Tackle uses pytest and a number of useful fixtures to enable testing. The following outlines some patterns that developers might find useful when testing their own providers.</p>"},{"location":"testing-providers/#testing-native-hooks","title":"Testing Native Hooks","text":"<p>Currently, all native hooks (ie providers that ship with tackle) use this pattern to allow running the tests locally from within the test's directory and from the Makefile with tox. It uses a fixture to change the directory to the test and runs a tackle file using the hook.</p> <p>Fixture in <code>conftest.py</code> <pre><code>import pytest\nimport os\n\n@pytest.fixture(scope=\"function\")\ndef change_dir(request):\n    \"\"\"Change to the current directory of the test.\"\"\"\n    os.chdir(request.fspath.dirname)\n</code></pre></p> <p>Then uses that fixture in the test like so:</p> <pre><code>from tackle import tackle\n\ndef test_provider_assert(change_dir):\n    \"\"\"Check assertions.\"\"\"\n    output = tackle('hook-fixture.yaml')\n    assert output['foo'] == 'bar'\n</code></pre> <p>The <code>hook-fixture.yaml</code> is some file that exercises the hook to demonstrate its functionality whose output can then be asserted.</p>"},{"location":"testing-providers/#testing-the-default-tackle-file","title":"Testing the Default Tackle File","text":"<p>When testing providers, often times there will be some tackle file which needs to have various options overriden. The following outlines how you can test tackle files that are built with and without declarative hooks which change the way options need to be overriden.</p> <p>Each of these tests assumes the test is being run from the base directory. To achieve this, one needs to additional supply a fixture that changes the directory.</p> <pre><code>import pytest\nimport os\n\n@pytest.fixture(scope='function')\ndef cd_base_dir(monkeypatch):\n    \"\"\"Change to the base directory for importing hooks.\"\"\"\n    monkeypatch.chdir(os.path.join(os.path.abspath(os.path.dirname(__file__)), '..'))\n</code></pre>"},{"location":"testing-providers/#testing-with-declarative-hooks","title":"Testing With Declarative Hooks","text":"<p>Declarative hook fields can be supplied via command line or when using tackle's main entrypoint (ie <code>tackle.main.tackle</code>), with arguments or kwargs.</p> <p><code>.tackle.yaml</code> <pre><code>a_hook&lt;-:\n  option1-&gt;: input\n  option2-&gt;: input\n</code></pre></p> <p><code>tests/test_main.py</code></p> <pre><code>from tackle import tackle\n\ndef test_main_build(cd_base_dir):\n    output = tackle('a_hook', option1='foo', option2='bar')\n\n    assert output['option1'] == 'foo'\n</code></pre> <p>Notice that both args and kwargs are simply provided in the tackle function. If you need to supply flags, you can do so via kwargs or as a list of</p> <p><code>.tackle.yaml</code> <pre><code>a_hook&lt;-:\n  a_flag: bool\n</code></pre></p> <p><code>tests/test_main.py</code></p> <pre><code>from tackle import tackle\n\ndef test_main_build(cd_base_dir):\n    output = tackle('a_hook', a_flag=True, global_flags=['a_flag'])\n\n    assert output['a_flag']\n</code></pre>"},{"location":"testing-providers/#testing-tackle-scripts","title":"Testing Tackle Scripts","text":"<p>Tackle files don't need to have declarative hooks exposed but need to have values overriden if they require some kind of user input. For instance given this tackle file, you would need to</p> <p><code>.tackle.yaml</code></p> <pre><code>a_input-&gt;: input\n# More business logic using `a_input`\n</code></pre> <p><code>tests/test_main.py</code></p> <pre><code>from tackle import tackle\n\ndef test_main_build(cd_base_dir):\n    output = tackle(override={'a_input': 'foo'})\n\n    assert output['a_input'] == 'foo'\n</code></pre> <p>Or as kwargs: <pre><code>def test_main_build(cd_base_dir):\n    output = tackle(a_input='foo')\n    # assert...\n</code></pre></p> <p>Or if you have a file of values you want to override:</p> <p><code>tests/a-fixture.yaml</code></p> <pre><code>a_input: foo\n</code></pre> <pre><code>def test_main_build(cd_base_dir):\n    output = tackle(override='a-fixture.yaml')\n    # assert...\n</code></pre> <p>Which is the logical input from the command line, ie <code>tackle some-target -o a-fixture.yaml</code>.</p>"},{"location":"using-providers/","title":"Using Providers","text":"<p>Providers can be called directly from the command line per the calling tackle documentation or within a tackle file with the two ways essentially mirroring one another.</p> <p>For instance from the command line: <pre><code># Remote providers\ntackle sudoblockio/tackle-provider  # Defaults to github org/repo\ntackle https://github.com/sudoblockio/tackle-provider\n# Local providers\ntackle path/to/dir/with/tackle/file\ntackle path/to/tackle/file.yaml\ntackle  # See notes below\n</code></pre></p> <p>Or from within a tackle file using the tackle hook: <pre><code>call local tackle-&gt;: tackle path/to/local/provider\ncall remote tackle-&gt;: tackle sudoblockio/tackle-provider\n</code></pre></p> <p>Both versions can take args, kwargs, or flags if the tackle provider supports consuming them, otherwise an error will be raised unless these values have been consumed by the end of execution.</p> <p>From command line: <pre><code>tackle some/provider some_arg --some kwarg --some_flag\n</code></pre></p> <p>From tackle file: <pre><code>call tackle-&gt;: tackle some-source some_arg --some kwarg --some_flag\n</code></pre></p>"},{"location":"using-providers/#remote-providers","title":"Remote Providers","text":"<p>Tackle ships with numerous native providers but additional ones can be accessed when they are committed to a git repository like on github. Remote providers can be</p> <p>By default, tackle uses the latest versioned release of a provider but to use the latest commit, one can add the <code>--latest</code> flag to override this default and use the latest commit from the default branch. Additionally, a specific release can be used by specifying the <code>--checkout</code> flag.  </p> <ul> <li><code>tackle gh-org/repo</code><ul> <li>If there is a release, use that</li> <li>Otherwise use latest commit</li> </ul> </li> <li><code>tackle gh-org/repo --latest</code><ul> <li>Use the latest commit regardless of release</li> </ul> </li> <li><code>tackle gh-org/repo --checkout v0.1.0</code><ul> <li>Use a specific release</li> </ul> </li> </ul>"},{"location":"using-providers/#calling-tackle-with-file-directory-args","title":"Calling Tackle with File / Directory Args","text":"<p>When remote providers are used, directories and files can</p> <pre><code>\u251c\u2500\u2500 hooks\n\u2502 \u2514\u2500\u2500 hooks.py # Defines a hook\n\u2514\u2500\u2500 a-dir\n  \u2514\u2500\u2500 a-file.yaml # Uses the hook\n</code></pre> <pre><code>tackle gh-org/gh-repo --file a-dir/a-file.yaml\n</code></pre> <p>Alternatively you could specify a directory as in this case:</p> <pre><code>\u251c\u2500\u2500 hooks\n\u2502 \u2514\u2500\u2500 hooks.py\n\u2514\u2500\u2500 a-dir\n  \u2514\u2500\u2500 tackle.yaml\n</code></pre> <pre><code>tackle gh-org/gh-repo --directory a-dir\n</code></pre>"},{"location":"using-providers/#calling-tackle-with-no-args-unknown-args","title":"Calling Tackle with No Args / Unknown Args","text":"<p>When calling <code>tackle</code> without any arguments or arguments that do not point to a tackle provider, tackle then looks for tackle providers in the parent directories. A tackle provider is any directory that has one of the following:</p> <ul> <li>A tackle file</li> <li><code>tackle.yaml</code></li> <li><code>.tackle.yaml</code></li> <li><code>tackle.json</code></li> <li><code>.tackle.json</code></li> <li><code>tackle.toml</code></li> <li><code>.tackle.toml</code></li> <li>A hooks directory</li> <li><code>hooks</code></li> <li><code>.hooks</code></li> </ul> <p>Similarly, if tackle is called with an argument that does not look like a remote repo (ie <code>str/str</code> - two strings separated by a slash), it will then look in the parent directory for a tackle base and use that arg for that execution.</p> <p>The reasoning for supporting this logic is one of the nice use cases of tackle in having a set of commands you might want to run regardless of where you are in a directory tree. A couple use cases could be:</p> <ol> <li> <p>A repo with a common set of commands that you want to run in a subdirectory. For instance lets say you have a bunch of IaC/k8s manifests and you want to run them with <code>tackle apply file.yaml</code>. the logic for apply could be in the parent and be available anywhere in the repo.</p> </li> <li> <p>Common commands in the home directory. For instance you could have a tackle file with a hook <code>ssh</code> and run <code>tackle ssh</code> anywhere in your system and it would run that hook.</p> </li> </ol> <p>There are more use cases but regardless, tackle is trying to be intelligent about what the arguments you give it means and if the arg is not recognized as a source, then it should do its best to try to resolve what that command means.</p>"},{"location":"using-providers/#importing-hooks-from-a-provider","title":"Importing hooks from a provider","text":"<p>Hooks can be imported from a tackle provider with the import hook but only hooks defined in a <code>hooks</code> directory. Hooks defined in the root tackle file (ie <code>some-provider/tackle.yaml</code>) can not be imported. To import hooks you can use the following syntax within tackle file, both in the root or in documents within the hooks directory (ie <code>some-provider/hooks/a-file.yaml</code>).</p> <pre><code># Using a special key as str\nimport_&gt;: path/to/local/or/remote/provider --latest\n# Or\nimport_&gt;:\n  - path/to/provider1\n  - path/to/provider2 --version v1.0\n  - path/to/provider3 --latest\n# Or\nimport_&gt;:\n  - src: remote/provider\n    version: v1.0\n  - src: path/to/provider\n    latest: true\n# Calling `import` hook\ndo some import-&gt;: import path/to/local/or/remote/provider\n\n# Finally - using the imported hook\nusing that hook-&gt;: the_imorted_hook ...\n</code></pre> <p>Here we use a private hook call to import hooks as the output of this hook call is not needed.</p>"},{"location":"writing-tackle-files/","title":"Tackle File Parsing Logic","text":"<p>This document aims to provide an overview of the core parsing logic for tackle files which are arbitrary yaml files that have hooks embedded in them.</p>"},{"location":"writing-tackle-files/#basics","title":"Basics","text":"<p>Tackle sequentially parses arbitrary json or yaml files with the parser only changing the data structure when hooks are called denoted by forward arrows, ie <code>-&gt;</code>/<code>_&gt;</code> at the end of a key / item in a list. Hooks can perform a variety of different actions such as prompting for inputs, making web requests, or generating code and return values that are stored in the key they were called from. After any key / value / item in a list is parsed, it is available to be referenced / reused in additional hook calls through jinja rendering.</p>"},{"location":"writing-tackle-files/#hook-call-forms","title":"Hook Call Forms","text":"<p>Hooks can be called in directly in expanded and compact forms or within jinja as an extensions or filters. For instance running:</p> <p><code>example.yaml</code> <pre><code>expanded:\n  -&gt;: input\n  message: Say hello to?\ncompact-&gt;: input Say hello to?\n# Or with jinja\njinja_expression-&gt;: \"{{input('Say hello to?')}}\"\n</code></pre></p> <p>Which when run with <code>tackle docs/scratch.yaml -pf yaml</code>:</p> <pre><code>? Say hello to? Alice\n? Say hello to? Bob\n? Say hello to? Jane\n</code></pre> <p>Results in the following context:</p> <pre><code>expanded: 'Alice'\ncompact: 'Bob'\njinja_expression: 'Jane'\n</code></pre> <p>In this example we are calling the input hook that prompts for a string input which has one mapped argument, <code>message</code>, which in the compact form of calling input allows it to be written in a single line. The exact semantics of how arguments are mapped can be found in the python hooks and declarative hooks documentation.</p> <p>The input hook has several parameters that are not mapped as arguments such as <code>default</code> which can be used in both expanded and compact forms but not in jinja which relies on mapped arguments. For instance:</p> <pre><code>expanded:\n  -&gt;: input\n  message: Say hello to?\n  default: world\n# Equivalent to\ncompact-&gt;: input Say hello to? --default world\n# Notice the additional argument\nprint-&gt;: print Hello {{compact}} Hello {{expanded}}\n</code></pre>"},{"location":"writing-tackle-files/#control-flow","title":"Control Flow","text":"<p>Tackle also enables conditionals, loops, and other base methods that are also able to be expressed in both hook call forms.  For instance here we can see a <code>for</code> loop in both forms:</p> <pre><code>ttd:\n  - stuff\n  - and\n  - things\n\nexpanded:\n  -&gt;: input\n  for: ttd  # Strings are rendered by default for `for` loops\n  message: What do you want to do?\n  default: \"{{item}}\" # Here we must explicitly render as default could be a str\n# Equivalent to\ncompact-&gt;: input What do you want to do? --for ttd --default \"{{ item }}\"\n</code></pre> <p>For more information on loops and conditional, check out the hook methods documentation.</p>"},{"location":"writing-tackle-files/#public-vs-private-hook-calls","title":"Public vs Private Hook Calls","text":"<p>Thus far all the examples have been of public hook calls denoted by <code>-&gt;</code> arrows which run the hook and store the value in the key but sometimes you might want to call hooks but not have the key stored in the output. To do this you would instead run a private hook denoted by <code>_&gt;</code> arrow.  Such cases exist when you are dealing with a strict schema and want to embed actions / logic in that schema or you want to keep a clean context and ignore the output of a key. The output of a private hook call is still available to be used later in the same context and is only removed when the context changes such as when a tackle hook is called that parses another tackle file / provider.</p> <p>For more information, check out the memory management docs.</p>"},{"location":"writing-tackle-files/#special-cases","title":"Special Cases","text":"<p>While all logic can be expressed simply through calling hooks, several convenient shorthand forms exist for calling common hooks such as <code>var</code> for rendering a variable and <code>block</code> for parsing a level of the input.  </p>"},{"location":"writing-tackle-files/#rendering-variables","title":"Rendering Variables","text":"<p>Values / keys are not rendered by default but instead need to be rendered through a hook call. To make this easier, a special case exists where if the value of a hook call is wrapped with braces (ie <code>key-&gt;: \"{{ another_key }}\"</code>) it is recursively rendered right away. For instance:</p> <pre><code>a_map:\n  stuff: things\nreference-&gt;: \"{{ a_map }}\"\n</code></pre> <p>Would result in:</p> <pre><code>a_map:\n  stuff: things\nreference:\n  stuff: things\n</code></pre> <p>This allows creation of renderable templates in keys that one can reuse depending on what the current context is.  For instance:</p> <pre><code>stuff: things\na_map:\n  more-stuff: \"{{ stuff }}\"\nreference-&gt;: \"{{ a_map }}\"\n</code></pre> <p>Would result in:</p> <pre><code>stuff: things\na_map:\n  more-stuff: \"{{ stuff }}\"\nreference:\n  stuff: things\n</code></pre>"},{"location":"writing-tackle-files/#blocks","title":"Blocks","text":"<p>Sometimes it is convenient to be able to apply logic to entire blocks of yaml for which there is a special case embedded in the parser. For instance, it is common to use a single / multi selector in a tackle file to restrict users to running a certain set of functions:</p> <pre><code>action:\n  -&gt;: select What are we doing today?\n  choices:\n    - code: Code tackle stuff\n    - do: Do things\n\ncode-&gt;:\n  if: action == 'code'\n  # Run a number of hooks conditional on the `action`\n  arbitrary:\n    contex: ...\n  gen-&gt;: tackle robcxyz/tackle-provider\n  open-&gt;: command touch code.py\n  # ...\n\ndo-&gt;:\n  if: action == 'do'\n  check_schedule-&gt;: webbrowser https://calendar.google.com/\n  # ...\n</code></pre> <p>If this example was run, the user would be prompted for a selection which based on their input, the block of code hooks would be executed based on the <code>if</code> condition.  Under the hood the parser is re-writing the input to execute a <code>block</code> hook like this example though the code above makes it simpler:</p> <pre><code>code:\n  -&gt;: block\n  if: action == 'code'\n  items:\n    arbitrary:\n      contex: ...\n    gen-&gt;: tackle robcxyz/tackle-provider\n    open-&gt;: command touch code.py\n</code></pre>"},{"location":"writing-tackle-files/#block-render-context","title":"Block render context","text":"<p>When writing blocks, one has access to two different render contexts, a local block context which is referenced and the outer global context.  For instance:</p> <pre><code>stuff: things\nfoo: bar\n\ncode-&gt;:\n  # ...\n  foo: baz\n  inner-context-&gt;: \"{{ foo }}\"\n  outer-context-&gt;: \"{{ stuff }}\"\n</code></pre> <p>In this example, the key \"inner-context\" would equal \"baz\" while the \"outer-context\" is able to reference \"stuff\".</p> <p>Check the memory management docs for more information on different contexts.</p>"},{"location":"writing-tackle-files/#side-note-on-blocks-try-out-match-hooks","title":"Side note on blocks - Try out <code>match</code> hooks","text":"<p>For another way of conditionally parsing blocks of yaml, checkout the <code>match</code> hook which performs similarly to match / switch case statements per the below example.</p> <pre><code>action:\n  -&gt;: select What are we doing today?\n  choices:\n    - code: Code tackle stuff\n    - do: Do things\n\nrun_action:\n  -&gt;: match\n  value: \"{{ action }}\"\n  case:  \n    code:\n      gen-&gt;: tackle robcxyz/tackle-provider\n      # ...\n\n    do:\n      if: action == 'do'\n      check_schedule-&gt;: webbrowser https://calendar.google.com/\n      # ...\n</code></pre> <p>Check out the declarative hooks docs for patterns on how you can wrap this logic with reusable interfaces.</p>"},{"location":"yaml-deficiencies/","title":"YAML Deficiencies","text":""},{"location":"yaml-deficiencies/#use-with-special-keys","title":"Use with Special Keys","text":"<pre><code># This will never work\nfoo: bar\nprint-&gt;: {{foo}}\nreturn-&gt;: {{foo}}\n</code></pre>"},{"location":"articles/comparisons/","title":"Comparisons to Other Tools","text":"<p>For the purpose of better understanding the applicability of tackle, this document tries to make some comparisons</p>"},{"location":"articles/comparisons/#code-generation","title":"Code Generation","text":"<p>Most code generators out there have only one way of building a render context.  For instance:</p> <ul> <li>create-react-app</li> <li>No prompting</li> <li>All configuration options baked in</li> <li>cookiecutter</li> <li>Input prompts</li> <li>User inputs based on a json config file</li> <li>openapi-generator</li> <li>Input spec</li> <li>User points to an OpenAPI spec</li> </ul> <p>Tackle being more of a DSL allows all these configuration options in a completely modular way with the only catch, that you need to explicitly declare all the functionality in a tackle file.  This tutorial walks through how to setup code generators based on each of the above patterns.</p>"},{"location":"cookbook/","title":"Tackle Cookbook","text":"<p>Here are a few recipes which should help you build tackle files and providers.</p> <ul> <li>Prompting</li> <li>Generating Code</li> <li>Creating Providers - WIP</li> <li>Creating Hooks - WIP</li> <li>Creating Schemas - WIP</li> <li>Reading Writing Data</li> <li>Flow Control</li> <li>Base Methods</li> <li>Block and Match Hooks</li> <li>Var </li> <li>Data Manipulation</li> <li>Config Management</li> <li>Infrastructure as Code File Structuring - WIP</li> </ul>"},{"location":"cookbook/base-methods/","title":"Base Methods","text":"<p>Besides fields associated with flow control like <code>if</code>, <code>else</code>, <code>when</code>, and <code>for</code>, we also have access to a number of other base methods:</p> <ul> <li><code>try</code> / <code>except</code> -&gt; Catch errors and do something</li> <li><code>merge</code> -&gt; Move the output up one level or append to the parent list</li> <li><code>chdir</code> -&gt; Change directory for a hook execution</li> </ul>"},{"location":"cookbook/base-methods/#try-except","title":"<code>try</code> / <code>except</code>","text":"<pre><code>a failed command-&gt;: command \"foo bar\" --try  # Would exit without try\np-&gt;: print Hello world!  # This would print\n</code></pre> <pre><code>a failed command:\n  -&gt;: command \"foo bar\"\n  try: true\n  except:\n    p-&gt;: print Hello world!\n</code></pre> <p>Values can also be renderable strings.</p>"},{"location":"cookbook/base-methods/#merge","title":"<code>merge</code>","text":"<p>When using the <code>merge</code> key, the output of the hook is merged up one level for objects and appended for lists.</p> <p>Objects </p> <pre><code>stuff: things\n\nmerge an object-&gt;:\n  merge: true\n  stuff: more things\n</code></pre> <p>Results in:</p> <pre><code>stuff: more things\n</code></pre> <p>Lists </p> <pre><code>- stuff: things\n- merge a list-&gt;:\n    merge: true\n    stuff: more things\n</code></pre> <p>Results in:</p> <pre><code>- stuff: things\n- stuff: more things\n</code></pre>"},{"location":"cookbook/base-methods/#chdir","title":"<code>chdir</code>","text":"<p>A hook can be temporarily executed in a directory</p> <pre><code>call-&gt;: file some-file --chdir path/to/file\n</code></pre>"},{"location":"cookbook/block-match/","title":"The <code>block</code> and <code>match</code> Hooks","text":"<p>There are two important hooks that users should be aware of, <code>block</code> and <code>match</code>.</p> <ul> <li><code>block</code> - Hook for wrapping objects with flow control and / or reindexing the data so that nested variables don't need to be referenced from the root</li> <li><code>match</code> - For <code>match</code> / <code>case</code> statements which again can have reindexed data</li> </ul>"},{"location":"cookbook/block-match/#blocks","title":"Blocks","text":"<p>Here we have an example of some input data (<code>action</code>) who's output determines what block of data to parse.</p> <pre><code>action:\n  -&gt;: select What are we doing today?\n  choices:\n    - code: Code tackle stuff\n    - do: Do things\n\ncode-&gt;:\n  if: action == 'code'\n  # Run a number of hooks conditional on the `action`\n  arbitrary:\n    contex: ...\n  gen-&gt;: tackle robcxyz/tackle-provider\n  open-&gt;: command touch code.py\n  # ...\n\ndo-&gt;:\n  if: action == 'do'\n  check_schedule-&gt;: webbrowser https://calendar.google.com/\n  # ...\n</code></pre>"},{"location":"cookbook/block-match/#block-render-context","title":"Block Render Context","text":"<p>Another use of blocks is to allow referencing of variables within an object without having to pass a full path to the variable as the data is indexed to the block start.</p> <pre><code>stuff: things\nfoo: bar\n\ncode-&gt;:\n  # ...\n  foo: baz\n  inner-context-&gt;: \"{{ foo }}\"\n  outer-context-&gt;: \"{{ stuff }}\"\n</code></pre> <pre><code>stuff: things\nfoo: bar\ncode:\n  foo: baz\n  inner-context: baz\n  outer-context: things\n</code></pre>"},{"location":"cookbook/block-match/#match-case","title":"Match / Case","text":"<p>Tackle supports <code>match</code> / <code>case</code> statements</p> <pre><code>action:\n  -&gt;: select What are we doing today?\n  choices:\n    - Do stuff: stuff\n    - Do things: things\n\nrun_action:\n  -&gt;: match action\n  case:  \n    stuff: Doing things\n    things: Doing stuff\n</code></pre> <p>Which can also have hooks and indexed data</p> <pre><code>run_action:\n  -&gt;: match select(choices=['stuff','things'])\n  case:\n    stuff-&gt;:\n      foo: bar\n      baz-&gt;: \"{{foo}}\"\n    things-&gt;: literal things\n</code></pre> <p>Which can also have a default denoted by a <code>_</code></p> <pre><code>run_action:\n  -&gt;: match select(choices=['foo','does-not-exist'])\n  case:\n    foo: bar\n    _: a default\n</code></pre>"},{"location":"cookbook/config-management/","title":"Config Management","text":"<p>WIP</p> <ul> <li>Combining files</li> <li>Composing</li> <li>Merging</li> <li>Creating schemas</li> <li>Validating schemas</li> <li>Methods on schemas</li> <li>Functions on schemas</li> </ul>"},{"location":"cookbook/creating-hooks/","title":"Creating Hooks","text":"<p>While the majority of information about creating hooks is in the related docs, this document aims to show a couple useful patterns when creating hooks.</p> <p>Related docs: - Creating Providers - Python Hooks - Declarative Hooks - Declarative CLI</p> <p>WIP</p> <p>-</p>"},{"location":"cookbook/creating-providers/","title":"Creating Providers","text":"<p>WIP</p> <ul> <li>Basic file structure</li> <li>Importing dependencies</li> <li>Testing</li> <li>Versioning</li> </ul>"},{"location":"cookbook/creating-schemas/","title":"Creating Schemas","text":"<p>WIP</p> <ul> <li>Basic hook</li> <li> </li> </ul>"},{"location":"cookbook/creating-schemas/#composing-hooks","title":"Composing hooks","text":""},{"location":"cookbook/data-manipulation/","title":"Tackle File Data Manipulation","text":"<p>The tackle data is the portion of a tackle file that is available to be used for rendering or business logic when parsing. There are four memory spaces for data, public, private, existing, and temporary that are explained in more detail in the memory management docs. Generally speaking, most users don't need to understand the concept in depth as it should be pretty intuitive for the average user.</p> <p>This document goes over some strategies on how to maintain / build / and manipulate data in a tackle file.</p>"},{"location":"cookbook/data-manipulation/#running-examples","title":"Running Examples","text":"<p>To run these examples, it is advised that you print the output to see what the context is when running a file.</p> <pre><code>tackle example-file.yaml -p\n</code></pre>"},{"location":"cookbook/data-manipulation/#data-across-files","title":"Data across files","text":"<p>You can merge data from many files very easily using the <code>tackle</code> hook or one of many other hooks that read / write files.</p> <p>tackle-1.yaml <pre><code>stuff: things\nanother_file-&gt;: tackle tackle-2.yaml\n</code></pre></p> <p>tackle-2.yaml <pre><code>foo-&gt;: var stuff\n</code></pre></p> <p>Output</p> <pre><code>stuff: things\nanother_file:\n  foo: things\n</code></pre>"},{"location":"cookbook/data-manipulation/#private-variables","title":"Private Variables","text":"<p>Objects declared with an underscore arrow (ie <code>_&gt;</code>) indicate the output should be going to private which is data that is not exported but can be used for rendering.</p> <pre><code>private_map_&gt;:\n  stuff: things\nexported_map-&gt;: \"{{private_map}}\"\nprivate_list_&gt;:\n  - stuff\n  - things\nexported_list-&gt;: \"{{private_list}}\"\n</code></pre> <p>Output</p> <pre><code>exported_map:\n  stuff: things\nexported_list:\n  - stuff\n  - things\n</code></pre>"},{"location":"cookbook/data-manipulation/#filtering-to-key","title":"Filtering to key","text":"<p>These examples show filtering to keys using jinja rendering.</p> <pre><code>a_map:\n  key: value\n\nmap_with_var-&gt;: var a_map.key\nmap_with_macro-&gt;: \"{{a_map.key}}\"\n\na_list:\n  - stuff\n  - things\n\nlist_with_var-&gt;: var a_list[0]\nlist_with_macro-&gt;: \"{{a_list[0]}}\"\n</code></pre> <p>Output</p> <pre><code>a_map:\n  key: value\nmap_with_var: value\nmap_with_macro: value\na_list:\n- stuff\n- things\nlist_with_var: stuff\nlist_with_macro: stuff\n</code></pre>"},{"location":"cookbook/data-manipulation/#merging-up-keys","title":"Merging up keys","text":"<p>Using the merge method, you can bring the output up a level if you are in a map.</p> <pre><code>a_map:\n  key: value\n  stuff: things\nmerge a_map-&gt;: var a_map --merge\n</code></pre> <p>Output</p> <pre><code>a_map:\n  key: value\nkey: value\nstuff: things\n</code></pre>"},{"location":"cookbook/data-manipulation/#append-with-merge-in-for-loop-in-list","title":"Append with merge in for loop in list","text":"<p>When merging in a list from a loop, it will append the output.</p> <pre><code>a_list:\n  - stuff\n  - things\n  - -&gt;: var item --for ['foo','bar']\n  - -&gt;: var item --for ['foo','bar'] --merge\n</code></pre> <p>Output</p> <pre><code>a_list:\n- stuff\n- things\n- - foo\n  - bar\n- bar\n- foo\n</code></pre>"},{"location":"cookbook/data-manipulation/#updating-a-key","title":"Updating a key","text":"<p>We can update a prior key with the set hook. Notice how this hook is private and would not be exported.</p> <pre><code>path:\n  to:\n    key: value\nupdate stuff_&gt;: update path/to/key \"a value\"\n</code></pre> <p>Output</p> <pre><code>path:\n  to:\n    key: a value\n</code></pre>"},{"location":"cookbook/data-manipulation/#appending-to-a-list","title":"Appending to a List","text":"<p>We can update a prior key with the set hook. Notice how this hook is private and would not be exported.</p> <pre><code>path:\n  to:\n    a_list:\n      - stuff\nappend things-&gt;: append path/to/a_list things\n</code></pre> <p>Output</p> <pre><code>path:\n  to:\n    a_list:\n      - stuff\n      - things\n</code></pre>"},{"location":"cookbook/data-manipulation/#temporary-context","title":"Temporary Context","text":"<p>When you are within a block, you are in an indexed memory space where the nearest keys take preference to previously parsed keys.</p> <pre><code>foo: bar\nstuff: things\na_block-&gt;:\n  if: true\n  foo: baz\n  check foo-&gt;: assert {{foo}} baz\n  check stuff-&gt;: assert {{stuff}} things\ncheck block-&gt;: assert {{a_block.foo}} baz\n</code></pre>"},{"location":"cookbook/flow-control/","title":"Flow Control","text":""},{"location":"cookbook/flow-control/#if-statements","title":"If Statements","text":"<pre><code>planet-&gt;: select What planet you on? --choices ['earth','mars']\nweather:\n  -&gt;: print {{ planet | title }} weather is nice!\n  if: planet == 'earth'\n</code></pre>"},{"location":"cookbook/flow-control/#else","title":"Else","text":"<pre><code>name-&gt;: input What is your name? --default Arthur\ncheck name:\n  -&gt;: print You may pass {{ name }}\n  if: name == 'Arthur'\n  else:\n    raise-&gt;: Wrong name...\n</code></pre> <p>Which can also be rendered.</p> <pre><code>check name:\n  # ...\n  else: \"Hello {{name}}\"\n</code></pre> <p>And could have hooks embedded in it.</p> <pre><code>check name:\n  # ...\n  else: \"{{print('Hello', name)}}\"\n</code></pre> <p>And of course it can be expressed in a single line.</p> <pre><code>name-&gt;: input What is your name?\nhello-&gt;: print You may pass {{ name }} --if name == 'Arthur' ---else \"{{print('Hello', name)}}\"\n</code></pre>"},{"location":"cookbook/flow-control/#when","title":"When","text":"<p><code>when</code> takes effect before for loops which <code>if</code> operates after.</p> <pre><code>words: ['Hello', 'cruel', 'world!']\nexpanded:\n  -&gt;: print {{item}}\n  for: words\n  when: \"'Hello' in words\"\n  if: item != 'cruel'\n</code></pre>"},{"location":"cookbook/flow-control/#for-loops-with-variable","title":"For Loops with Variable","text":"<p>The cleanest way to run a for loop is by declaring a variable within the loop</p> <pre><code>loop:\n  -&gt;: var \"i={{i}}\"\n  for: i in [1,3,5]\n</code></pre> <pre><code>loop:\n- i=1\n- i=3\n- i=5\n</code></pre> <p>If multiple variables are declared for a list iterand, the first positional variable becomes the index.</p> <pre><code>loop:\n  -&gt;: var \"i={{i}} v={{v}}\"\n  for: i, v in [1,3,5]\n</code></pre> <pre><code>loop:\n- i=0 v=1\n- i=1 v=3\n- i=2 v=5\n</code></pre> <p>This can also be done against objects</p> <pre><code>an_object:\n  foo: bar\n  stuff: things\nloop_one:\n  -&gt;: \"k={{k}}\"\n  for: k in an_object\nloop_two:\n  -&gt;: \"k={{k}} v={{v}}\"\n  for: k, v in an_object\nloop_three:\n  -&gt;: \"i={{i}} k={{k}} v={{v}}\"\n  for: k, v, i in an_object\n</code></pre> <pre><code>an_object:\n  foo: bar\n  stuff: things\nloop_one:\n- k=foo\n- k=stuff\nloop_two:\n- k=foo v=bar\n- k=stuff v=things\nloop_three:\n- i=0 k=foo v=bar\n- i=1 k=stuff v=things\n</code></pre>"},{"location":"cookbook/flow-control/#for-loops-without-variable","title":"For Loops without Variable","text":"<p>If you don't give a variable (ie <code>i in an_iterand</code>) then the variable names are assumed depending on if you are iterating over a list or an object.</p> <pre><code>loop:\n  -&gt;: \"item={{ item }} index={{ index }}\"\n  for:\n    - stuff\n    - things\n</code></pre> <p>Would result in:</p> <pre><code>loop:\n- item=stuff index=0\n- item=things index=1\n</code></pre> <p>Or for an object:</p> <pre><code>loop:\n  -&gt;: \"key={{ key }} value={{value}} index={{index}}\"\n  for:\n    foo: bar\n    stuff: things\n</code></pre> <pre><code>loop:\n- key=foo value=bar index=0\n- key=stuff value=things index=1\n</code></pre>"},{"location":"cookbook/flow-control/#for-loop-rendered","title":"For Loop Rendered","text":"<p>If the for loop value is a string, we attempt to render that by default (ie no braces).</p> <pre><code>a_list:\n  - stuff\n  - things\n\nprinter:\n  -&gt;: print \"We are at item {{ item }} and index {{ index }}\"\n  for: a_list\nprinter_compact-&gt;: print \"{{ item }}/{{ index }}\" --for a_list\n</code></pre>"},{"location":"cookbook/flow-control/#for-loop-using-keys-hook","title":"For Loop Using keys Hook","text":"<pre><code>inputs:\n  foo:\n    type: stuff\n  bar:\n    type: things\n\nprinter:\n  -&gt;: var \"The type is {{ inputs[item].type }}\"\n  for: \"{{keys(inputs)}}\"\n</code></pre> <pre><code>inputs:\n  foo:\n    type: stuff\n  bar:\n    type: things\nprinter:\n- The type is stuff\n- The type is things\n</code></pre>"},{"location":"cookbook/flow-control/#list-comprehension","title":"List Comprehension","text":"<pre><code>words:\n  - Hello\n  - cruel\n  - world!\nexpanded:\n  -&gt;: print {{item}}\n  for: words\n  if: item != 'cruel'\ncompact-&gt;: print {{item}} --for words --if \"item != 'cruel'\"\n</code></pre>"},{"location":"cookbook/generating-code/","title":"Code Generating Examples","text":"<p>Please checkout the tutorials for more thorough examples.</p>"},{"location":"cookbook/generating-code/#simple-generation-example","title":"Simple generation example","text":"<pre><code># Render context\nfoo: bar\n\n# Call generate hook\ngenerate hook in compact form-&gt;: generate path/to/templates output/path\n# Or\ngenerate hook in expanded form:\n  -&gt;: generate\n  templates: path/to/templates\n  output: output/path\n</code></pre>"},{"location":"cookbook/generating-code/#sample-project-structure","title":"Sample Project Structure","text":"<p>For instance given this file structure:</p> <pre><code>\u251c\u2500\u2500 templates\n\u2502 \u2514\u2500\u2500 file1.py\n\u2502 \u2514\u2500\u2500 file2.py\n\u2502 \u2514\u2500\u2500\u2500\u2500 dir\n\u2514\u2500\u2500 tackle.yaml\n</code></pre> <p><code>tackle.yaml</code> <pre><code>project_name-&gt;: input\nproject_slug-&gt;: input --default \"{{project_name.lower()|replace(' ', '_')|replace('-', '_')|replace('.', '_')|trim()}}\"\ngithub_username-&gt;: input What is your Github username / org?\nlicense-&gt;: select --choices ['apache','mit']\n# or use the license hook\n#license-&gt;: tackle robcxyz/tackle-license --output {{project_slug}}\npostgres_version:\n  -&gt;: select\n  choices:\n    - 14\n    - 13\n    - 12\ngen code-&gt;: generate templates {{project_slug}}\n</code></pre></p> <p>Would generate the following structure:</p> <pre><code>\u2502 \u2514\u2500\u2500 file1.py\n\u2502 \u2514\u2500\u2500 file2.py\n\u2502 \u2514\u2500\u2500\u2500\u2500 dir\n\u2514\u2500\u2500 LICENSE\n</code></pre>"},{"location":"cookbook/generating-code/#using-remote-providers","title":"Using Remote Providers","text":"<p>Here is an example of how to use a license hook.</p> <pre><code># project_slug is a standard name for your package directory\nproject_slug-&gt;: input What to call the project?\nlicense-&gt;: tackle robcxyz/tackle-license --output {{project_slug}}\n# project_slug is again used for other rendering outputs\n</code></pre>"},{"location":"cookbook/generating-code/#flow-control","title":"Flow Control","text":"<pre><code>use_docker-&gt;: confirm Do you want to use docker?\ndocker-&gt;:\n  if: use_docker\n  os:\n    -&gt;: select What docker base image?\n    choices:\n      - ubuntu\n      - alpine\n      - centos\n  registry-&gt;: select Where to push docker image? --choices ['dockerhub','quay']\n  generate dockerfile-&gt;: generate templates/Dockerfile {{project_slug}}/Dockerfile\n\n# Use items inside block to render other templates\n# For instance one could use {{docker.registry}} in a template\ngenerate ci-&gt;: generate templates/.github {{project_slug}}\n</code></pre> <p>Another version of the same without a <code>use_docker</code> variable:</p> <pre><code>docker-&gt;:\n  if: confirm('Do you want to use docker?')\n  os-&gt;: select What docker base image? --choices ['ubuntu','alpine','centos']\n  registry-&gt;: select Where to push docker image? --choices ['dockerhub','quay']\n  generate dockerfile-&gt;: generate templates/Dockerfile {{project_slug}}/Dockerfile\ngenerate ci-&gt;: generate templates/.github {{project_slug}}\n</code></pre>"},{"location":"cookbook/generating-code/#splitting-up-context","title":"Splitting up Context","text":"<p>Not specifically to code generation, but it is sometimes useful to have a sort of hierarchical layout with global variables. For instance:</p> <p><code>child/tackle.yaml</code> <pre><code>context: tackle global.yaml --find_in_parent --merge\n</code></pre></p> <p><code>global.yaml</code></p> <pre><code>envs_&gt;:\n  dev:\n    num_servers: 1 # etc...\n  prod:\n    num_servers: 2\n\n# or in multiple lines / mix\nenvironments:\n  - prod\n  - dev\nenv-&gt;: select --choices environments\nmerge it up a level with var hook-&gt;: var envs[env] --merge\n\nOr all the above in one line-&gt;: var {{envs[select(choices=keys(envs))]}} --merge\n</code></pre> <p>Resulting in the following context</p> <pre><code>#? env &gt;&gt;&gt; prod\nenvironments:\n- prod\n- dev\nenv: prod\nnum_servers: 2\n</code></pre> <p>And then can be used to generate code or call CLIs wrapped with tackle such as kubectl.</p>"},{"location":"cookbook/generating-code/#rendering-in-segments","title":"Rendering in Segments","text":"<p>Segments of a code generation can be done ahead of time.</p> <pre><code>python_function_template: |\n  {%for i in foo%}\n  def {{i}}Function(x: int, y: int)\n    print(x + y)\n  {% endfor%}\n\npython_function_rendered-&gt;: {{python_function_template}}\n</code></pre> <p>Which can then be further combined within the tackle file, rendered into a template, or updated within a file as described below.</p>"},{"location":"cookbook/generating-code/#using-the-update_section-hook","title":"Using the update_section Hook","text":"<p>Tackle can be used to update a section between two markers.</p> <p><code>.tackle.yaml</code> <pre><code>update_readme&lt;-:\n  help: Update the README.md table\n  exec:\n    rows:\n      - name: Stuff\n        desc: A thing\n      - name: Thing\n        desc: A stuff\n    update:\n      -&gt;: update_section README.md\n      content: |\n        | Name | Description |\n        |---|---|\n        {% for i in rows %}| {{i.name}} | {{i.desc}} |\n        {% endfor %}\n</code></pre></p> <p>Running <code>tackle update-readme</code></p> <pre><code>My App...\n\n[//]: # (--start--)\n\n| Name | Description |\n|---|---|\n| Stuff | A thing |\n| Thing | A stuff |\n\n[//]: # (--end--)\n\nDoes stuff\n</code></pre>"},{"location":"cookbook/iac-file-structuring/","title":"File Structuring","text":"<p>Tackle files can call other tackle files and has a couple default inputs that make for using it in some interesting ways. This document aims to show some patterns using multiple files with tackle.</p> <p>WIP</p> <ul> <li>Parent / base tackle</li> <li>Keep a hooks dir or tackle</li> <li>Segmenting environments</li> <li>Environment mixin</li> <li>Wrapping commands</li> <li>Manifests</li> <li>Rendering vs parsing vs merging  </li> </ul>"},{"location":"cookbook/prompting/","title":"Prompting","text":"<p>Tackle allows for a rich set of prompting options using the following hooks:</p> <ul> <li><code>input</code> - Text input for strings</li> <li><code>confirm</code> - Binary input for booleans</li> <li><code>select</code> - A selector of choices</li> <li><code>checkbox</code> - A multi-selector of choices</li> </ul> <p>There are other types of prompts such as <code>editor</code> and<code>password</code> which are specialized versions of the <code>input</code> hook that will not be covered in this document.</p>"},{"location":"cookbook/prompting/#multi-line-prompting","title":"Multi-line Prompting","text":"<p>Prompt hooks can be expressed in expanded form.</p> <pre><code>confirm hook:\n  -&gt;: confirm\n  message: A confirm message\n  default: false\ninput hook:\n  -&gt;: input\n  message: An input message\n  default: stuff\nselect hook:\n  -&gt;: select\n  message: A select message\n  choices:\n    - stuff\n    - things\ncheckbox hook:\n  -&gt;: checkbox --checked\n  message: A checkbox message\n  choices: [ 'stuff','things' ]  \n</code></pre> <p>output</p> <pre><code>? A confirm message No\n? An input message stuff\n? A select message stuff\n? A checkbox message\n\u276f \u25c9 stuff\n  \u25c9 things\n</code></pre>"},{"location":"cookbook/prompting/#single-line-prompting","title":"Single-line Prompting","text":"<p>They can also be expressed in compact form .</p> <pre><code>confirm hook-&gt;: confirm A confirm message --default false\ninput hook-&gt;: input An input message --default stuff\nselect hook-&gt;: select A select message --choices ['stuff','things']\ncheckbox hook-&gt;: checkbox A checkbox message --choices ['stuff','things'] --checked\n</code></pre> <p>output</p> <pre><code>? A confirm message No\n? An input message stuff\n? A select message stuff\n? A checkbox message\n\u276f \u25c9 stuff\n  \u25c9 things\n</code></pre>"},{"location":"cookbook/prompting/#embedded-with-jinja-prompting","title":"Embedded with Jinja Prompting","text":"<p>Prompt hooks can be embedded in one another.</p> <pre><code>confirm + input hook-&gt;: input A message --if \"confirm('Confirm this?')\"\ninput + select hook-&gt;: input \"A message with param={{select('A param',choices=['stuff','things'])}}\"\n</code></pre> <p>output</p> <pre><code>? Confirm this? Yes\n? A message\n? A param stuff\n? A message with param=stuff\n</code></pre>"},{"location":"cookbook/prompting/#input-options","title":"Input Options","text":"<p>The <code>input</code> hook can be expressed with some options.</p> <pre><code>input-minimal-&gt;: input\ninput-compact-&gt;: input \"What stuff?\"\ninput-expanded:\n  -&gt;: input\n  message: \"What stuff?\"\n  default: things\n</code></pre> <pre><code>? input-minimal &gt;&gt;&gt;  \n? What stuff?  \n? What stuff?  things\n</code></pre> <p>Resulting Context</p> <pre><code>input-minimal: &lt;user input&gt;\ninput-compact: &lt;user input&gt;\ninput-expanded: things\n</code></pre>"},{"location":"cookbook/prompting/#checkbox-select-choice-inputs","title":"Checkbox / Select Choice Inputs","text":"<p>The <code>select</code> and <code>checkbox</code> are very similar with the following examples applying to both.</p>"},{"location":"cookbook/prompting/#list-choice","title":"List Choice","text":"<p>Choice inputs can be a list and be rendered from an existing key.</p> <pre><code>selection:\n  -&gt;: select\n  message: A message\n  choices:\n    - stuff\n    - things\n\na_list:\n  - stuff\n  - things\n\nselection rendered:\n  -&gt;: checkbox\n  message: A message\n  choices: a_list\n</code></pre> <p>output</p> <pre><code>? A message stuff\n? A message\n\u276f \u25cb stuff\n  \u25cb things\n</code></pre>"},{"location":"cookbook/prompting/#prompt-display-with-different-output","title":"Prompt Display with Different Output","text":"<p>Choices can also be in the form of a list of maps with the keys being the displayed prompts and the values as the output of the selection.</p> <pre><code>a_map:\n  - a string: stuff\n  - a map:\n    stuff: things\n  - a list:\n      - stuff\n      - things\n\nselection:\n  -&gt;: select\n  choices: a_map\n\n# Or in compact form\n# selection-&gt;: select --choices a_map\n</code></pre> <pre><code>? selection &gt;&gt;&gt;\n\u276f \u25cb a string\n  \u25cb a map\n  \u25cb a list\n</code></pre> <p>The output of the hook in this case would be <code>foo</code>, <code>{'bar':'baz'}</code>, or <code>['stuff','things']</code> depending on the selection.</p>"},{"location":"cookbook/prompting/#list-keys-map-choice","title":"List Keys Map Choice","text":"<p>Sometimes it is convenient to extract the keys from a map as choices which can then be used elsewhere to index the map. In this case we use the <code>keys</code> hooks to extract a list of keys from a map.</p> <pre><code>a_map:\n  stuff: foo\n  things: bar\n\nselection-&gt;: select --choices keys(a_map)\nprint value-&gt;: print {{a_map[selection]}}\n\n# Or as a single liner\nprint value single line-&gt;: print {{a_map[select(choices=keys(a_map))]}}\n</code></pre>"},{"location":"cookbook/prompting/#checkbox-default","title":"Checkbox Default","text":"<p>The default of the <code>checkbox</code> hook is that nothing is selected but it is possible for all the values to selected as the default.</p> <pre><code>checker-&gt;: checkbox --choices ['stuff','and','things'] --checked\n</code></pre> <pre><code>? checker &gt;&gt;&gt;\n\u276f \u25c9 stuff\n  \u25c9 and\n  \u25c9 things\n</code></pre> <p>Resulting in</p> <pre><code>checker:\n  - stuff\n  - and\n  - things\n</code></pre>"},{"location":"cookbook/reading-writing-data/","title":"Reading and Writing Data","text":""},{"location":"cookbook/reading-writing-data/#the-yaml-json-toml-hooks","title":"The <code>yaml</code> / <code>json</code> / <code>toml</code> hooks","text":"<p>The yaml, json hooks allow reading and writing to files in essentially same way. Also see toml, ini, and file hooks which are similar.</p> <p>To read from a file:</p> <pre><code>vars-&gt;: yaml some-file.yaml\n</code></pre> <p>To write to a file:</p> <pre><code>some:\n  important: data\n\ncompact-&gt;: yaml some-file.yaml {{some}}\nexpanded:\n  -&gt;: yaml\n  path: some-file.yaml\n  data:\n    important: data\n</code></pre>"},{"location":"cookbook/reading-writing-data/#the-yaml_in_place-json_in_place-toml_in_place-hooks","title":"The <code>yaml_in_place</code> / <code>json_in_place</code> / <code>toml_in_place</code> hooks","text":"<p>Note this is a WIP. Input welcome.</p> <p>Yaml / json / toml can be updated in place, ie without having to both read and write the file over consecutive hook calls.</p> <p>Docs</p> <ul> <li><code>yaml_in_place</code></li> <li><code>json_in_place</code> - WIP</li> </ul> <p>NOTE: These are still a WIP. Focus is on yaml_in_place and then will be shared by json and toml.</p>"},{"location":"providers/Arithmatic/","title":"Arithmetic Provider","text":"<p>Hooks that perform arithmetic operations.</p>"},{"location":"providers/Arithmatic/#hooks","title":"Hooks","text":"Type Description Return average Hook for taking the average of a list of numbers. int modulo Hook for taking the modulo of an integer with optionally checking if it is equal to another number, 0 by default. int sum Hook for summing a list of numbers. int"},{"location":"providers/Arithmatic/#examples","title":"Examples","text":""},{"location":"providers/Arithmatic/#sum","title":"sum","text":"<p>Sum a list of numbers</p> <p><pre><code>total-&gt;: sum [1, 2, 3, 4, 5]\n</code></pre> <pre><code>total: 15\n</code></pre></p>"},{"location":"providers/Arithmatic/#average","title":"average","text":"<p>Calculate the average of a list of numbers</p> <p><pre><code>avg-&gt;: average [1, 2, 3, 4, 5]\n</code></pre> <pre><code>avg: 3.0\n</code></pre></p>"},{"location":"providers/Arithmatic/#modulo","title":"modulo","text":"<p>Take the modulo of a number</p> <p><pre><code>odd-&gt;: modulo 5 2\neven-&gt;: modulo 6 2\n</code></pre> <pre><code>odd: 1\neven: 0\n</code></pre></p>"},{"location":"providers/Arithmatic/average/","title":"average","text":"<p>Source</p> <p>Hook for taking the average of a list of numbers.</p>"},{"location":"providers/Arithmatic/average/#inputs","title":"Inputs","text":"Name Type Default Required Description input list True The list to calculate the average from. attribute str None None False"},{"location":"providers/Arithmatic/average/#arguments","title":"Arguments","text":"Position Argument Type 1 input list"},{"location":"providers/Arithmatic/average/#returns","title":"Returns","text":"<p><code>int | float</code></p>"},{"location":"providers/Arithmatic/average/#examples","title":"Examples","text":"<p>Calculate the average of a list of numbers <pre><code>avg-&gt;: average [1, 2, 3, 4, 5]\n</code></pre></p> <pre><code>avg: 3.0\n</code></pre>"},{"location":"providers/Arithmatic/modulo/","title":"modulo","text":"<p>Source</p> <p>Hook for taking the modulo of an integer with optionally checking if it is equal to another number, 0 by default.</p>"},{"location":"providers/Arithmatic/modulo/#inputs","title":"Inputs","text":"Name Type Default Required Description input int True The input integer to take the modulo of. divisor int True The divisor to take the modulo with. equal_to int None None False"},{"location":"providers/Arithmatic/modulo/#arguments","title":"Arguments","text":"Position Argument Type 1 input int 2 divisor int 3 equal_to int"},{"location":"providers/Arithmatic/modulo/#returns","title":"Returns","text":"<p><code>int | bool</code></p>"},{"location":"providers/Arithmatic/modulo/#examples","title":"Examples","text":"<p>Take the modulo of a number <pre><code>odd-&gt;: modulo 5 2\neven-&gt;: modulo 6 2\n</code></pre></p> <pre><code>odd: 1\neven: 0\n</code></pre>"},{"location":"providers/Arithmatic/sum/","title":"sum","text":"<p>Source</p> <p>Hook for summing a list of numbers.</p>"},{"location":"providers/Arithmatic/sum/#inputs","title":"Inputs","text":"Name Type Default Required Description input list True The list to sum. attribute str None None False"},{"location":"providers/Arithmatic/sum/#arguments","title":"Arguments","text":"Position Argument Type 1 input list"},{"location":"providers/Arithmatic/sum/#returns","title":"Returns","text":"<p><code>int | float</code></p>"},{"location":"providers/Arithmatic/sum/#examples","title":"Examples","text":"<p>Sum a list of numbers <pre><code>total-&gt;: sum [1, 2, 3, 4, 5]\n</code></pre></p> <pre><code>total: 15\n</code></pre>"},{"location":"providers/Collections/","title":"Collections Provider","text":"<p>Hooks that act on collections of items.</p>"},{"location":"providers/Collections/#hooks","title":"Hooks","text":"Type Description Return concat Hook for concatenating a list of items. list distinct Hook for getting distinct items from a list. Optional[list] list_key_values Hook for getting a list of values from a list of maps based on a key. Optional[list] range Create a list of integers within a range, ie -&gt;: range 3 1 -&gt; [3,2,1]. If given one arg, then that is considered 'stop'. If given two args, they are 'start' and 'stop'. If given three args, the last arg is for how much to increment through range. list sort Hook for sorting complex lists, dicts, or items within a key both in place or as output. Union[list, dict, NoneType]"},{"location":"providers/Collections/#examples","title":"Examples","text":""},{"location":"providers/Collections/#sort","title":"sort","text":"<p>Sort a list in place based on a reference to a key path list or keys in dict</p> <p><pre><code>stuff:\n  things:\n    - foo\n    - bar\n    - baz\nin-place_&gt;: sort stuff/things\n# Argument is a list so it is output to key\noutput-&gt;: sort {{stuff.things}}\n</code></pre> <pre><code>stuff:\n  things:\n    - bar\n    - baz\n    - foo\noutput:\n  - bar\n  - baz\n  - foo\n</code></pre></p>"},{"location":"providers/Collections/#concatenate","title":"concatenate","text":"<p>Concatenate two lists.</p> <p><pre><code>list_1_&gt;:  # Notice this is private block so won't be in output\n  - foo\n  - bar\nlist_2_&gt;:\n  - stuff\n  - things\nout-&gt;: concat {{list_1}} {{list_2}}\n</code></pre> <pre><code># Only `out` key now\nout:\n  - foo\n  - bar\n  - stuff\n  - things\n</code></pre></p>"},{"location":"providers/Collections/#distinct","title":"distinct","text":"<p>Get distinct members from a list. Can also operate on context.</p> <p><pre><code>list:\n  - stuff\n  - stuff\n  - things\ncompact-&gt;: distinct {{list}}\nexpanded:\n  -&gt;: distinct\n  src:\n    - stuff\n    - stuff\n    - things\n</code></pre> <pre><code>list:\n  - stuff\n  - stuff\n  - things\ncompact:\n  - stuff\n  - things\nexpanded:\n  - stuff\n  - things\n</code></pre></p>"},{"location":"providers/Collections/#list_key_values","title":"list_key_values","text":"<p>From a list of maps, get the values based on a key.</p> <p><pre><code>list_of_maps:\n  - stuff: things\n    foo: bar\n  - foo: baz\n    stuff: mo tings\n\nlist_key_values:\n  -&gt;: list_key_values list_of_maps\n  key: stuff\n</code></pre> <pre><code>list_of_maps:\n  - stuff: things\n    foo: bar\n  - foo: baz\n    stuff: mo tings\nlist_key_values:\n  - things\n  - mo tings\n</code></pre></p>"},{"location":"providers/Collections/concat/","title":"concat","text":"<p>Source</p> <p>Hook for concatenating a list of items.</p>"},{"location":"providers/Collections/concat/#inputs","title":"Inputs","text":"Name Type Default Required Description src list True A list to concatenate the items of."},{"location":"providers/Collections/concat/#arguments","title":"Arguments","text":"Position Argument Type 1 src list"},{"location":"providers/Collections/concat/#returns","title":"Returns","text":"<p><code>list</code></p>"},{"location":"providers/Collections/distinct/","title":"distinct","text":"<p>Source</p> <p>Hook for getting distinct items from a list.</p>"},{"location":"providers/Collections/distinct/#inputs","title":"Inputs","text":"Name Type Default Required Description src Union[list, str] True A list to get the distinct values from or a str with separators or list for a key path to the element to rewrite the distinct items back to the context. src_is_key_path bool False True If the src is a list and is meant to be a key path. sep str / True For string src's, a separator for key path."},{"location":"providers/Collections/distinct/#arguments","title":"Arguments","text":"Position Argument Type 1 src Union[list, str]"},{"location":"providers/Collections/distinct/#returns","title":"Returns","text":"<p><code>Optional[list]</code></p>"},{"location":"providers/Collections/distinct/#examples","title":"Examples","text":"<p>Distinct values of list passed into <code>src</code> field. <pre><code>list:\n  - stuff\n  - stuff\n  - things\ncompact-&gt;: distinct {{list}}\nexpanded:\n  -&gt;: distinct\n  src:\n    - stuff\n    - stuff\n    - things\n</code></pre></p> <pre><code>list:\n  - stuff\n  - stuff\n  - things\ncompact:\n  - stuff\n  - things\nexpanded:\n  - stuff\n  - things\n</code></pre> <p>Distinct values operating on context <pre><code>a:\n  list:\n    - stuff\n    - stuff\n    - things\ncompact_&gt;: distinct a/list  # string inputs interpreted path to key\n# Also notice how hook is private as the output is useless\n</code></pre></p> <pre><code>a:\n  list:\n    - stuff\n    - things\n</code></pre>"},{"location":"providers/Collections/list_key_values/","title":"list_key_values","text":"<p>Source</p> <p>Hook for getting a list of values from a list of maps based on a key.</p>"},{"location":"providers/Collections/list_key_values/#inputs","title":"Inputs","text":"Name Type Default Required Description src list True A list to extract the keys out of. key str True reject_keys dict None False A dict of keys with values to not include in output. src_is_key_path bool False True If the src is a list and is meant to be a key path. sep str / True For string src's, a separator for key path."},{"location":"providers/Collections/list_key_values/#arguments","title":"Arguments","text":"Position Argument Type 1 src list 2 key str"},{"location":"providers/Collections/list_key_values/#returns","title":"Returns","text":"<p><code>Optional[list]</code></p>"},{"location":"providers/Collections/range/","title":"range","text":"<p>Source</p> <p>Create a list of integers within a range, ie -&gt;: range 3 1 -&gt; [3,2,1]. If given one arg, then that is considered 'stop'. If given two args, they are 'start' and 'stop'. If given three args, the last arg is for how much to increment through range.</p>"},{"location":"providers/Collections/range/#inputs","title":"Inputs","text":"Name Type Default Required Description start int 0 True Starting number. end int None False Ending number. increment int None False The increment in the range - when start &gt; end, defaults to -1.."},{"location":"providers/Collections/range/#arguments","title":"Arguments","text":"Position Argument Type 1 start int 2 end int 3 increment int"},{"location":"providers/Collections/range/#returns","title":"Returns","text":"<p><code>list</code></p>"},{"location":"providers/Collections/sort/","title":"sort","text":"<p>Source</p> <p>Hook for sorting complex lists, dicts, or items within a key both in place or as output.</p>"},{"location":"providers/Collections/sort/#inputs","title":"Inputs","text":"Name Type Default Required Description src Union[list, dict, str] True Either a list of strings or a list of dicts to sort and return the output or a string key_path to sort both in place or as output (see <code>in_place</code>). key str None False If the <code>src</code> is a list of maps, the key to sort the contents by. keys list [] True A list of fields to sort on for dict inputs based on priority. in_place bool True True If the <code>src</code> is a string (ie a key path), then sort the item in place (ie replace original) and return None. reverse bool False True To sort in reverse. src_is_key_path bool False True If the src is a list and is meant to be a key path. sep str / True For string src's, a separator for key path. index Union[int, list] None False If the input <code>src</code> is a list, use the index as the sort key. Takes both an int for single index or list for multiple criteria."},{"location":"providers/Collections/sort/#arguments","title":"Arguments","text":"Position Argument Type 1 src Union[list, dict, str] 2 keys list"},{"location":"providers/Collections/sort/#returns","title":"Returns","text":"<p><code>Union[list, dict, NoneType]</code></p>"},{"location":"providers/Collections/sort/#examples","title":"Examples","text":"<p>Sort a list in place based on a reference to a key path list or keys in dict <pre><code>stuff:\n  things:\n    - foo\n    - bar\n    - baz\nin-place_&gt;: sort stuff/things  # Notice this is a private hook\n# Argument is a list so it is output to key\noutput-&gt;: sort {{stuff.things}}\n</code></pre></p> <pre><code>stuff:\n  things:\n    - bar\n    - baz\n    - foo\noutput:\n  - bar\n  - baz\n  - foo\n</code></pre>"},{"location":"providers/Command/","title":"Command Provider","text":"<p>Hooks that run system commands.</p>"},{"location":"providers/Command/#hooks","title":"Hooks","text":"Type Description Return command Run system commands. Any os_system Run system commands via os.system(command). WIP NoneType"},{"location":"providers/Command/command/","title":"command","text":"<p>Source</p> <p>Run system commands.</p>"},{"location":"providers/Command/command/#inputs","title":"Inputs","text":"Name Type Default Required Description command str True A shell command. ignore_error bool False True Ignore errors. multiline bool False True Don't automatically breakup lines system bool False True Use python's os.system command instead of popen based stream reader."},{"location":"providers/Command/command/#arguments","title":"Arguments","text":"Position Argument Type 1 command str"},{"location":"providers/Command/command/#returns","title":"Returns","text":"<p><code>Any</code></p>"},{"location":"providers/Command/command/#examples","title":"Examples","text":""},{"location":"providers/Command/command/#basic","title":"Basic","text":"<p>The most minimal implementation. <pre><code>command_example-&gt;: command echo 'here'\n</code></pre></p>"},{"location":"providers/Command/os_system/","title":"os_system","text":"<p>Source</p> <p>Run system commands via os.system(command). WIP</p>"},{"location":"providers/Command/os_system/#inputs","title":"Inputs","text":"Name Type Default Required Description command str True A shell command."},{"location":"providers/Command/os_system/#arguments","title":"Arguments","text":"Position Argument Type 1 command str"},{"location":"providers/Command/os_system/#returns","title":"Returns","text":"<p><code>NoneType</code></p>"},{"location":"providers/Console/","title":"Console Provider","text":"<p>Hooks that print things to the console like tables and markdown via [rich] or print.</p>"},{"location":"providers/Console/#hooks","title":"Hooks","text":"Type Description Return markdown Hook for printing markdown and returning the output. None markdown_frontmatter Hook for reading frontmatter from a Markdown file. Optional[dict] pprint Wraps python pprint builtin.Link NoneType print Hook for printing an input and returning the output.Link NoneType table Hook for creating tables with rich - github.com/willmcgugan/rich. None"},{"location":"providers/Console/#requirements","title":"Requirements","text":"<ul> <li>rich</li> </ul>"},{"location":"providers/Console/#examples","title":"Examples","text":""},{"location":"providers/Console/#print","title":"print","text":"<p>Print to console</p> <pre><code>compact-&gt;: print stuff and things\n</code></pre>"},{"location":"providers/Console/#print_1","title":"print","text":"<p>Print to console</p> <pre><code>stuff:\n  and: things\ncompact-&gt;: pprint \"{{ stuff }}\"\n</code></pre>"},{"location":"providers/Console/#markdown","title":"markdown","text":"<p>Print markdown to console</p> <p><pre><code>compact-&gt;: |\n  markdown \"# A title\"\n  Section with things\nexpanded:\n  -&gt;: markdown\n  text: |\n    # Another title\n    More sections with things\n</code></pre> \u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557 \u2551                            A title                                   \u2551 \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d Section with things \u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557 \u2551                         Another title                                \u2551 \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d More sections with things</p>"},{"location":"providers/Console/#table","title":"table","text":"<p>Print a table to the console</p> <p><pre><code>column_names:\n  - stuff\n  - things\n\ndata:\n  - [ 'foo', 'bar' ]\n  - [ 'here', 1 ]\n\ntable:\n  -&gt;: table\n  column_names: \"{{ column_names }}\"\n  contents: \"{{ data }}\"\n</code></pre> \u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513 \u2503 stuff \u2503 things \u2503 \u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529 \u2502 foo   \u2502 bar    \u2502 \u2502 here  \u2502 1      \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518</p>"},{"location":"providers/Console/markdown/","title":"markdown","text":"<p>Source</p> <p>Hook for printing markdown and returning the output.</p>"},{"location":"providers/Console/markdown/#inputs","title":"Inputs","text":"Name Type Default Required Description text str True The text to render as markdown. justify str None False Justify value for paragraphs. Defaults to None."},{"location":"providers/Console/markdown/#arguments","title":"Arguments","text":"Position Argument Type 1 text str"},{"location":"providers/Console/markdown/#returns","title":"Returns","text":"<p><code>None</code></p>"},{"location":"providers/Console/markdown/#examples","title":"Examples","text":""},{"location":"providers/Console/markdown/#basic-markdown","title":"Basic markdown","text":"<p>Markdown doesn't render perfectly in the terminal but it is real markdown. <pre><code>compact-&gt;: |\n  markdown \"# A title\"\n  Section with things\nexpanded:\n  -&gt;: markdown\n  text: |\n    # Another title\n    More sections with things\n</code></pre></p> <pre><code>\u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557\n\u2551              A title            \u2551\n\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d\nSection with things\n\u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557\n\u2551           Another title         \u2551\n\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d\nMore sections with things\n</code></pre>"},{"location":"providers/Console/markdown/#all-section-types-with-markdown","title":"All section types with markdown","text":"<p>Example with with many section headers.</p> <p>Note output headers will have additional formatting in console.</p> <pre><code>expanded:\n  -&gt;: markdown\n  text: |\n    # Header\n    Stuff and things\n    ## Second header\n    Stuff and things\n    ### Third header\n    Stuff and things\n    #### Fourth header\n    Stuff and things\n    ##### Fifth header\n    Stuff and things\n</code></pre> <pre><code>\u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557\n\u2551                           Header                                \u2551\n\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d\n\nStuff and things\n\n\n                        Second header\n\nStuff and things\n\n                         Third header\n\nStuff and things\n\n                        Fourth header\n\nStuff and things\n\n                         Fifth header\n\nStuff and things\n</code></pre>"},{"location":"providers/Console/markdown_frontmatter/","title":"markdown_frontmatter","text":"<p>Source</p> <p>Hook for reading frontmatter from a Markdown file.</p>"},{"location":"providers/Console/markdown_frontmatter/#inputs","title":"Inputs","text":"Name Type Default Required Description path str True Path to the Markdown file."},{"location":"providers/Console/markdown_frontmatter/#arguments","title":"Arguments","text":"Position Argument Type 1 path str"},{"location":"providers/Console/markdown_frontmatter/#returns","title":"Returns","text":"<p><code>Optional[dict]</code></p>"},{"location":"providers/Console/pprint/","title":"pprint","text":"<p>Source</p> <p>Wraps python pprint builtin.Link</p>"},{"location":"providers/Console/pprint/#inputs","title":"Inputs","text":"Name Type Default Required Description objects Any None False The object to be pretty printed. indent int 1 True Specifies the amount of indentation added for each nesting level. width int 80 True Specifies the desired maximum number of characters per line in the output. If a structure cannot be formatted within the width constraint, a best effort will be made. depth int None False Controls the number of nesting levels which may be printed; if the data structure being printed is too deep, the next contained level is replaced by .... By default, there is no constraint on the depth of the objects being formatted. compact bool False True Impacts the way that long sequences (lists, tuples, sets, etc) are formatted. If compact is false (the default) then each item of a sequence will be formatted on a separate line. If compact is true, as many items as will fit within the width will be formatted on each output line. sort_dicts bool True True If sort_dicts is true (the default), dictionaries will be formatted with their keys sorted, otherwise they will display in insertion order. underscore_numbers bool False True If underscore_numbers is true, integers will be formatted with the _ character for a thousands separator, otherwise underscores are not displayed (the default)."},{"location":"providers/Console/pprint/#arguments","title":"Arguments","text":"Position Argument Type 1 objects Any"},{"location":"providers/Console/pprint/#returns","title":"Returns","text":"<p><code>NoneType</code></p>"},{"location":"providers/Console/pprint/#examples","title":"Examples","text":""},{"location":"providers/Console/pprint/#basic-pprint","title":"Basic pprint","text":"<pre><code>stuff:\n  and: things\npprint-&gt;: pprint \"{{ stuff }}\" # Will pretty print `and: things`\n</code></pre>"},{"location":"providers/Console/print/","title":"print","text":"<p>Source</p> <p>Hook for printing an input and returning the output. Link</p>"},{"location":"providers/Console/print/#inputs","title":"Inputs","text":"Name Type Default Required Description objects any None False The objects to print. sep str False Separator between printed objects. end str '\\n' False What to print at the end flush bool False False No clue."},{"location":"providers/Console/print/#arguments","title":"Arguments","text":"Position Argument Type 1 objects any"},{"location":"providers/Console/print/#returns","title":"Returns","text":"<p><code>NoneType</code></p>"},{"location":"providers/Console/print/#examples","title":"Examples","text":""},{"location":"providers/Console/print/#compact-print-most-common-use","title":"Compact print - most common use","text":"<pre><code>compact-&gt;: print stuff and things\n</code></pre>"},{"location":"providers/Console/print/#expanded-print","title":"Expanded print","text":"<p><pre><code>expanded:\n  -&gt;: print\n  objects: stuff and\n  end: \" \"\n</code></pre> Output: <pre><code>stuff and things\n</code></pre></p>"},{"location":"providers/Console/table/","title":"table","text":"<p>Source</p> <p>Hook for creating tables with rich - github.com/willmcgugan/rich.</p>"},{"location":"providers/Console/table/#inputs","title":"Inputs","text":"Name Type Default Required Description column_names List [] True List of column names sort bool False True Boolean to sort contents or contents_split contents Any None False List of lists to put into columns / rows contents_split List None False List of strings to separate into columns based on <code>separator</code> separator str None False A string to separate the strings in the contents"},{"location":"providers/Console/table/#returns","title":"Returns","text":"<p><code>None</code></p>"},{"location":"providers/Console/table/#examples","title":"Examples","text":""},{"location":"providers/Console/table/#basic-table","title":"Basic table","text":"<p>Creating a table example that shows in the terminal <pre><code>column_names:\n  - stuff\n  - things\n\ndata:\n  - [ 'foo', 'bar' ]\n  - [ 'here', 1 ]\n\ntable:\n  -&gt;: table\n  column_names: \"{{ column_names }}\"\n  contents: \"{{ data }}\"\n</code></pre></p> <pre><code>\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n\u2503 stuff \u2503 things \u2503\n\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\n\u2502 foo   \u2502 bar    \u2502\n\u2502 here  \u2502 1      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"providers/Context/","title":"Context Provider","text":"<p>Hooks that change the context, ie the portion of the tackle file that has been parsed sequentially. Allows referencing of nested keys.</p>"},{"location":"providers/Context/#hooks","title":"Hooks","text":"Type Description Return append Hook for updating dict objects with items. Optional[list] delete Hook for getting a key based on a key path which is a list with keys and numbers for indexes in a list. NoneType get Hook for getting a key based on a key path which is a list with keys and numbers for indexes in a list. None keys Hook for returning the keys of a dict as a list. Optional[list] pop Hook for removing (<code>pop</code>) a key from a dict or item from a list based on index.Follows python's pop Union[dict, list, NoneType] set Hook for setting a key based on a key path which is a list with keys and numbers for indexes in a list. None update Hook for updating dict objects with values, appending list values, or overwriting string / int / float values. Optional[dict] values Hook for returning the values of a dict as a list. Optional[list]"},{"location":"providers/Context/#examples","title":"Examples","text":""},{"location":"providers/Context/#set","title":"set","text":"<p>Set a previous key based on a key path</p> <p><pre><code>stuff:\n  and: things\nset_&gt;: set stuff/and other-stuff\n</code></pre> <pre><code>stuff:\n  and: other-stuff\n</code></pre></p>"},{"location":"providers/Context/#get","title":"get","text":"<p>Get a previous key based on a key path</p> <p><pre><code>stuff:\n  and: things\nget-&gt;: get stuff/and\n</code></pre> <pre><code>stuff:\n  and: things\nget: things\n</code></pre></p>"},{"location":"providers/Context/#delete","title":"delete","text":"<p>Delete a previous key based on a key path</p> <p><pre><code>stuff:\n  and: things\ndelete_&gt;: delete stuff/and/things\n</code></pre> <pre><code>stuff:\n  and:\n</code></pre></p>"},{"location":"providers/Context/#pop","title":"pop","text":"<p>Removes an item from a list or key from a map in place based or with a result</p> <p><pre><code>path:\n  to:\n    list:\n      - stuff\n      - things\nresult-&gt;: pop {{path.to.list}}\nremove in place_&gt;: pop path/to/list 0\n</code></pre> <pre><code>path:\n  to:\n    list:\n      - things\nresult:\n  - stuff\n</code></pre></p>"},{"location":"providers/Context/#append","title":"append","text":"<p>Appends an item to a list in place or with a result</p> <p><pre><code>list:\n  - stuff\nresult-&gt;: append {{path.to.list}} things\nappend in place_&gt;: append path/to/list 0\n</code></pre> <pre><code>list:\n  - stuff\n  - things\nresult:\n  - stuff\n  - things\n</code></pre></p>"},{"location":"providers/Context/#keys","title":"keys","text":"<p>Get the keys from a dict</p> <p><pre><code>path:\n  to:\n    map:\n      stuff: 1\n      things: 2\nmap_keys-&gt;: keys path/to/map\n</code></pre> <pre><code>path:\n  to:\n    map:\n      stuff: things\n      foo: bar\nmap_keys:\n  - stuff\n  - things\n</code></pre></p>"},{"location":"providers/Context/append/","title":"append","text":"<p>Source</p> <p>Hook for updating dict objects with items.</p>"},{"location":"providers/Context/append/#inputs","title":"Inputs","text":"Name Type Default Required Description src Union[list, str] True A list append to and output the result or a str with separators or list for a key path to the element to append to within the context. src_is_key_path bool False True If the src is a list and is meant to be a key path. sep str / True For string src's, a separator for key path. item Any True An item to append to a list."},{"location":"providers/Context/append/#arguments","title":"Arguments","text":"Position Argument Type 1 src Union[list, str] 2 item Any"},{"location":"providers/Context/append/#returns","title":"Returns","text":"<p><code>Optional[list]</code></p>"},{"location":"providers/Context/append/#examples","title":"Examples","text":"<p>Taking a literal input <pre><code>list:\n  - stuff\nresult-&gt;: append {{path.to.list}} things\n</code></pre></p> <pre><code>list:\n  - stuff\nresult:\n  - stuff\n  - things\n</code></pre> <p>Or modifying the context <pre><code>list:\n  - stuff\nappend in place_&gt;: append path/to/list 0\n</code></pre></p> <pre><code>list:\n  - stuff\n  - things\n</code></pre> <p>Expanded in place <pre><code>list:\n  - stuff\nappend in place:\n  _&gt;: append\n  src: path/to/list\n  item: things\n</code></pre></p> <pre><code>list:\n  - stuff\n  - things\n</code></pre> <p>Expanded literal <pre><code>list:\n  - stuff\nappended:\n  _&gt;: append\n  src: \"{{list}}\"\n  item: things\n</code></pre></p> <pre><code>list:\n  - stuff\nappended:\n  - stuff\n  - things\n</code></pre>"},{"location":"providers/Context/delete/","title":"delete","text":"<p>Source</p> <p>Hook for getting a key based on a key path which is a list with keys and numbers for indexes in a list.</p>"},{"location":"providers/Context/delete/#inputs","title":"Inputs","text":"Name Type Default Required Description path Union[list, str] True A list or string with a separator for the path to the value you want to update with strings for keys and ints for indexes in the list. sep str / True For string paths, a separator for key path."},{"location":"providers/Context/delete/#arguments","title":"Arguments","text":"Position Argument Type 1 path Union[list, str]"},{"location":"providers/Context/delete/#returns","title":"Returns","text":"<p><code>NoneType</code></p>"},{"location":"providers/Context/delete/#examples","title":"Examples","text":"<p>Delete a key based on a key path <pre><code>one:\n  - that:\n      stuff: things\ntwo:\n  - that:\n      stuff: things\nthree:\n  - that:\n      stuff: things\n\ndeleter_list:\n  -&gt;: delete\n  path:\n    - one\n    - 0\n    - that\n    - stuff\n\ndeleter_str:\n  -&gt;: delete\n  path: two/0/that/stuff\n\ndeleter_str_sep:\n  -&gt;: delete\n  path: three.0.that.stuff\n  sep: .\n</code></pre></p>"},{"location":"providers/Context/get/","title":"get","text":"<p>Source</p> <p>Hook for getting a key based on a key path which is a list with keys and numbers for indexes in a list.</p>"},{"location":"providers/Context/get/#inputs","title":"Inputs","text":"Name Type Default Required Description path Union[list, str] True A list or string with a separator for the path to the value you want to update with strings for keys and ints for indexes in the list. sep str / True For string paths, a separator for key path. fallback Any None True Fallback value if the keys is not found."},{"location":"providers/Context/get/#arguments","title":"Arguments","text":"Position Argument Type 1 path Union[list, str] 2 fallback Any"},{"location":"providers/Context/get/#returns","title":"Returns","text":"<p><code>None</code></p>"},{"location":"providers/Context/get/#examples","title":"Examples","text":"<p>Get a key based on a key path <pre><code>stuff:\n  and: things\nget-&gt;: get stuff/and\n</code></pre></p> <pre><code>stuff:\n  and: things\nget: things\n</code></pre>"},{"location":"providers/Context/keys/","title":"keys","text":"<p>Source</p> <p>Hook for returning the keys of a dict as a list.</p>"},{"location":"providers/Context/keys/#inputs","title":"Inputs","text":"Name Type Default Required Description src Union[dict, str, list] True A dict to get the keys from and output the result or a str with separators or list for a key path to the element to get the keys from within the context. sep str / True For string src's, a separator for key path."},{"location":"providers/Context/keys/#arguments","title":"Arguments","text":"Position Argument Type 1 src Union[dict, str, list]"},{"location":"providers/Context/keys/#returns","title":"Returns","text":"<p><code>Optional[list]</code></p>"},{"location":"providers/Context/pop/","title":"pop","text":"<p>Source</p> <p>Hook for removing (<code>pop</code>) a key from a dict or item from a list based on index.Follows python's pop</p>"},{"location":"providers/Context/pop/#inputs","title":"Inputs","text":"Name Type Default Required Description src Union[dict, str, list] True A list to remove an item from or dict to remove a key and output the result or a str with separators or list for a key path to the item operate on within the context. src_is_key_path bool False True If the src is a list and is meant to be a key path. item Union[str, int] None False A string for a key to remove from a dict <code>src</code> or integer for an index to remove from a list <code>src</code>. sep str / True For string src's, a separator for key path."},{"location":"providers/Context/pop/#arguments","title":"Arguments","text":"Position Argument Type 1 src Union[dict, str, list] 2 item Union[str, int]"},{"location":"providers/Context/pop/#returns","title":"Returns","text":"<p><code>Union[dict, list, NoneType]</code></p>"},{"location":"providers/Context/pop/#examples","title":"Examples","text":"<p>Removes an item from a list <pre><code>list:\n  - stuff\n  - things\nnew_list-&gt;: pop \"{{list}}\" 1\n</code></pre></p> <pre><code>list:\n  - stuff\n  - things\nnew_list:\n  - stuff\n</code></pre> <p>Removes an item from a list in place based on a path <pre><code>path:\n  to:\n    list:\n      - stuff\n      - things\nremove in place_&gt;: pop path/to/list 0\n</code></pre></p> <pre><code>path:\n  to:\n    list:\n      - things\n</code></pre> <p>List pop in place expanded <pre><code>path:\n  to:\n    list:\n      - stuff\n      - things\nremove in place:\n  _&gt;: pop\n  src: path/to/list\n  item: 0\n</code></pre></p> <pre><code>path:\n  to:\n    list:\n      - things\n</code></pre>"},{"location":"providers/Context/set/","title":"set","text":"<p>Source</p> <p>Hook for setting a key based on a key path which is a list with keys and numbers for indexes in a list.</p>"},{"location":"providers/Context/set/#inputs","title":"Inputs","text":"Name Type Default Required Description path Any True A list or string with a separator for the path to the value you want to update with strings for keys and ints for indexes in the list. value Any True The value to update the key with. sep str / True For string paths, a separator for key path."},{"location":"providers/Context/set/#arguments","title":"Arguments","text":"Position Argument Type 1 path Any 2 value Any"},{"location":"providers/Context/set/#returns","title":"Returns","text":"<p><code>None</code></p>"},{"location":"providers/Context/update/","title":"update","text":"<p>Source</p> <p>Hook for updating dict objects with values, appending list values, or overwriting string / int / float values.</p>"},{"location":"providers/Context/update/#inputs","title":"Inputs","text":"Name Type Default Required Description src Union[dict, str, list] True A dict to update and output the result or a str with separators or list for a key path to the item update within the context. input Any True The value to update the input <code>src</code>. sep str / True For string src's, a separator for key path."},{"location":"providers/Context/update/#arguments","title":"Arguments","text":"Position Argument Type 1 src Union[dict, str, list] 2 input Any"},{"location":"providers/Context/update/#returns","title":"Returns","text":"<p><code>Optional[dict]</code></p>"},{"location":"providers/Context/update/#examples","title":"Examples","text":"<p>Update a map with a string and a map in place <pre><code>input:\n  map:\n    stuff: things\nupdate with string in place_&gt;: update input/map \"more things\"\nupdate with map in place_&gt;: update input/map {'foo':'bar'}\n</code></pre></p> <pre><code>input:\n  map:\n    stuff: more things\n    foo: bar\n</code></pre>"},{"location":"providers/Context/update/#update-a-map-with-another-map-in-place","title":"Update a map with another map in place","text":"<pre><code>input:\n  map:\n    stuff: things\nupdate in place_&gt;: update input/map {'foo':'bar'}\n</code></pre> <pre><code>input:\n  map:\n    stuff: things\n    foo: bar\n</code></pre>"},{"location":"providers/Context/values/","title":"values","text":"<p>Source</p> <p>Hook for returning the values of a dict as a list.</p>"},{"location":"providers/Context/values/#inputs","title":"Inputs","text":"Name Type Default Required Description src Union[dict, str, list] True A dict to get the values from and output the result or a str with separators or list for a key path to the element to get the values from within the context. sep str / True For string src's, a separator for key path."},{"location":"providers/Context/values/#arguments","title":"Arguments","text":"Position Argument Type 1 src Union[dict, str, list]"},{"location":"providers/Context/values/#returns","title":"Returns","text":"<p><code>Optional[list]</code></p>"},{"location":"providers/Datetime/","title":"Datetime Provider","text":"<p>Hooks that work with date and time</p>"},{"location":"providers/Datetime/#hooks","title":"Hooks","text":"Type Description Return date_now Hook for updating dict objects with items. str datetimme Hook for updating dict objects with items. str"},{"location":"providers/Datetime/#examples","title":"Examples","text":""},{"location":"providers/Datetime/#date_now","title":"date_now","text":"<p>Get the current date or timestamp.</p> <pre><code>now-&gt;: date_now\nyear-&gt;: date_now %Y\nmonth_year-&gt;: date_now \"%B %Y\"\ntimestamp-&gt;: date_now --timestamp\ntimestamp_utc-&gt;: date_now --timestamp --utc\n</code></pre>"},{"location":"providers/Datetime/date_now/","title":"date_now","text":"<p>Source</p> <p>Hook for updating dict objects with items.</p>"},{"location":"providers/Datetime/date_now/#inputs","title":"Inputs","text":"Name Type Default Required Description format str %m-%d-%Y True Date time formatting per the official docs timestamp bool False True Output as timestamp. Precedence over format. utc bool False True Output in UTC."},{"location":"providers/Datetime/date_now/#arguments","title":"Arguments","text":"Position Argument Type 1 format str"},{"location":"providers/Datetime/date_now/#returns","title":"Returns","text":"<p><code>str</code></p>"},{"location":"providers/Datetime/date_now/#examples","title":"Examples","text":""},{"location":"providers/Datetime/date_now/#get-current-date-timestamp","title":"Get current date / timestamp","text":"<pre><code>now-&gt;: date_now\nyear-&gt;: date_now %Y\nmonth_year-&gt;: date_now \"%B %Y\"\ntimestamp-&gt;: date_now --timestamp\ntimestamp_utc-&gt;: date_now --timestamp --utc\n</code></pre>"},{"location":"providers/Datetime/datetimme/","title":"datetimme","text":"<p>Source</p> <p>Hook for updating dict objects with items.</p>"},{"location":"providers/Datetime/datetimme/#inputs","title":"Inputs","text":"Name Type Default Required Description year int True month int None False day int None False hour int 0 True minute int 0 True second int 0 True microsecond int 0 True tzinfo str None False fold int 0 True"},{"location":"providers/Datetime/datetimme/#returns","title":"Returns","text":"<p><code>str</code></p>"},{"location":"providers/Environment/","title":"Environment Provider","text":"<p>Operate to environment variables</p>"},{"location":"providers/Environment/#hooks","title":"Hooks","text":"Type Description Return export Hook for setting environment variables that returns None. None get_env Hook for getting environment variables. None set_env Hook for setting environment variables. None unset Hook for unsetting environment variables. None"},{"location":"providers/Environment/#examples","title":"Examples","text":""},{"location":"providers/Environment/#get_env","title":"get_env","text":"<p>Get environment variables</p> <pre><code>compact-&gt;: get_env ENV_VAR\nexpanded:\n  -&gt;: get_env\n  environment_variable: ENV_VAR\n</code></pre>"},{"location":"providers/Environment/#set_env","title":"set_env","text":"<p>Set environment variables</p> <pre><code>compact-&gt;: set_env ENV_VAR VALUE\nexpanded:\n  -&gt;: set_env\n  environment_variable: ENV_VAR\n  value: VALUE\n</code></pre>"},{"location":"providers/Environment/#unset","title":"unset","text":"<p>Unset environment variables</p> <pre><code>compact-&gt;: unset ENV_VAR\nexpanded:\n  -&gt;: unset\n  environment_variable: ENV_VAR\n</code></pre>"},{"location":"providers/Environment/#export","title":"export","text":"<p>Setting / getting environment variables</p> <pre><code>compact-&gt;: export ENV_VAR VALUE\nexpanded:\n  -&gt;: export\n  environment_variable: ENV_VAR\n  value: VALUE\n</code></pre>"},{"location":"providers/Environment/export/","title":"export","text":"<p>Source</p> <p>Hook for setting environment variables that returns None.</p>"},{"location":"providers/Environment/export/#inputs","title":"Inputs","text":"Name Type Default Required Description environment_variable str True The name of the environment variable to set. value str None False The value to set it."},{"location":"providers/Environment/export/#arguments","title":"Arguments","text":"Position Argument Type 1 environment_variable str 2 value str"},{"location":"providers/Environment/export/#returns","title":"Returns","text":"<p><code>None</code></p>"},{"location":"providers/Environment/export/#examples","title":"Examples","text":""},{"location":"providers/Environment/export/#export_1","title":"export","text":"<pre><code>compact-&gt;: export ENV_VAR VALUE\nexpanded:\n  -&gt;: export\n  environment_variable: ENV_VAR\n  value: VALUE\n</code></pre>"},{"location":"providers/Environment/get_env/","title":"get_env","text":"<p>Source</p> <p>Hook for getting environment variables.</p>"},{"location":"providers/Environment/get_env/#inputs","title":"Inputs","text":"Name Type Default Required Description environment_variable str None False Dict for setting and string for getting environment variables fallback str None False A fallback for getting."},{"location":"providers/Environment/get_env/#arguments","title":"Arguments","text":"Position Argument Type 1 environment_variable str 2 fallback str"},{"location":"providers/Environment/get_env/#returns","title":"Returns","text":"<p><code>None</code></p>"},{"location":"providers/Environment/get_env/#examples","title":"Examples","text":""},{"location":"providers/Environment/get_env/#basic-implementation","title":"Basic implementation","text":"<pre><code>compact-&gt;: get_env ENV_VAR\nexpanded:\n  -&gt;: get_env\n  environment_variable: ENV_VAR\n</code></pre>"},{"location":"providers/Environment/set_env/","title":"set_env","text":"<p>Source</p> <p>Hook for setting environment variables.</p>"},{"location":"providers/Environment/set_env/#inputs","title":"Inputs","text":"Name Type Default Required Description environment_variable str True The name of the environment variable to set. value str None False The value to set it."},{"location":"providers/Environment/set_env/#arguments","title":"Arguments","text":"Position Argument Type 1 environment_variable str 2 value str"},{"location":"providers/Environment/set_env/#returns","title":"Returns","text":"<p><code>None</code></p>"},{"location":"providers/Environment/set_env/#examples","title":"Examples","text":""},{"location":"providers/Environment/set_env/#basic-implementation","title":"Basic implementation","text":"<pre><code>compact-&gt;: get_env ENV_VAR\nexpanded:\n  -&gt;: get_env\n  environment_variable: ENV_VAR\n</code></pre>"},{"location":"providers/Environment/unset/","title":"unset","text":"<p>Source</p> <p>Hook for unsetting environment variables.</p>"},{"location":"providers/Environment/unset/#inputs","title":"Inputs","text":"Name Type Default Required Description environment_variable str True The name of the environment variable to set."},{"location":"providers/Environment/unset/#arguments","title":"Arguments","text":"Position Argument Type 1 environment_variable str"},{"location":"providers/Environment/unset/#returns","title":"Returns","text":"<p><code>None</code></p>"},{"location":"providers/Environment/unset/#examples","title":"Examples","text":""},{"location":"providers/Environment/unset/#basic-implementation","title":"Basic implementation","text":"<pre><code>compact-&gt;: unset ENV_VAR\nexpanded:\n  -&gt;: unset\n  environment_variable: ENV_VAR\n</code></pre>"},{"location":"providers/Files/","title":"File Provider","text":"<p>Hooks that operate on the files.</p>"},{"location":"providers/Files/#hooks","title":"Hooks","text":"Type Description Return chmod Hook for changing the mode of a path or paths. NoneType chown Hook for changing the ownership of a file with shutil. NoneType copy Hook coying a file/files or directory/directories to a location. NoneType create_file Hook to create an empty file - like touch. Union[str, list] file Hook to read or write a file. Optional[str] move Hook  for moving a directory or directories to a location. NoneType read_section Hook for reading a section of a document. None remove Hook for removing a directory or directories. NoneType shred Hook for shredding file/files. NoneType unzipfile Hook to unzip a file. None which Wrapper of shutil.which -&gt; posix which. str zipfile Hook to zip a file or directory. None"},{"location":"providers/Files/#examples","title":"Examples","text":""},{"location":"providers/Files/#copy","title":"copy","text":"<p>Copy a file or directory single file</p> <pre><code>compact-&gt;: copy path/to/file output/path\nexpanded:\n  -&gt;: jinja\n  template: path/to/file\n  output: output/path\n</code></pre>"},{"location":"providers/Files/#chmod","title":"chmod","text":"<p>Change directory permissions</p> <pre><code>compact-&gt;: chmod tackle.yaml \"0o600\"\nexpanded:\n  -&gt;: chmod\n  path: tackle.yaml\n  mode: \"0o600\"\n</code></pre>"},{"location":"providers/Files/chmod/","title":"chmod","text":"<p>Source</p> <p>Hook for changing the mode of a path or paths.</p>"},{"location":"providers/Files/chmod/#inputs","title":"Inputs","text":"Name Type Default Required Description path Union[str, list] True String or list of paths, either directories or files. mode str True The mode to write to the files. See python's os package chmod for more details."},{"location":"providers/Files/chmod/#arguments","title":"Arguments","text":"Position Argument Type 1 path Union[str, list] 2 mode str"},{"location":"providers/Files/chmod/#returns","title":"Returns","text":"<p><code>NoneType</code></p>"},{"location":"providers/Files/chmod/#examples","title":"Examples","text":""},{"location":"providers/Files/chmod/#basic","title":"Basic","text":"<p>The most minimal implementation. <pre><code>compact-&gt;: chmod tackle.yaml \"0o600\"\nexpanded:\n  -&gt;: chmod\n  path: tackle.yaml\n  mode: \"0o600\"\n</code></pre></p>"},{"location":"providers/Files/chown/","title":"chown","text":"<p>Source</p> <p>Hook for changing the ownership of a file with shutil.</p>"},{"location":"providers/Files/chown/#inputs","title":"Inputs","text":"Name Type Default Required Description path Union[str, list] True String or list of paths, either directories or files. user str True The user to assign ownership. group str True The group to assign ownership."},{"location":"providers/Files/chown/#arguments","title":"Arguments","text":"Position Argument Type 1 path Union[str, list] 2 user str 3 group str"},{"location":"providers/Files/chown/#returns","title":"Returns","text":"<p><code>NoneType</code></p>"},{"location":"providers/Files/copy/","title":"copy","text":"<p>Source</p> <p>Hook coying a file/files or directory/directories to a location.</p>"},{"location":"providers/Files/copy/#inputs","title":"Inputs","text":"Name Type Default Required Description src Union[List, str] True String or list of sources, either a directories or files dst str True The destination to copy to. create_path bool True True"},{"location":"providers/Files/copy/#arguments","title":"Arguments","text":"Position Argument Type 1 src Union[List, str] 2 dst str"},{"location":"providers/Files/copy/#returns","title":"Returns","text":"<p><code>NoneType</code></p>"},{"location":"providers/Files/copy/#examples","title":"Examples","text":""},{"location":"providers/Files/copy/#basic","title":"Basic","text":"<p>The most minimal implementation. <pre><code>compact-&gt;: copy path/to/src output/path\nexpanded:\n  -&gt;: copy\n  src: path/to/src\n  dst: output/path\n</code></pre></p>"},{"location":"providers/Files/create_file/","title":"create_file","text":"<p>Source</p> <p>Hook to create an empty file - like touch.</p>"},{"location":"providers/Files/create_file/#inputs","title":"Inputs","text":"Name Type Default Required Description path Union[str, list] True String or list of paths to create files at."},{"location":"providers/Files/create_file/#arguments","title":"Arguments","text":"Position Argument Type 1 path Union[str, list]"},{"location":"providers/Files/create_file/#returns","title":"Returns","text":"<p><code>Union[str, list]</code></p>"},{"location":"providers/Files/create_file/#examples","title":"Examples","text":""},{"location":"providers/Files/create_file/#basic","title":"Basic","text":"<p>Create an empty file. <pre><code>compact-&gt;: create_file path/to/file/to/create\nexpanded:\n  -&gt;: create_file\n  path: path/to/file/to/read\n</code></pre></p>"},{"location":"providers/Files/file/","title":"file","text":"<p>Source</p> <p>Hook to read or write a file.</p>"},{"location":"providers/Files/file/#inputs","title":"Inputs","text":"Name Type Default Required Description path str True Path to read a file or write file if contents are given. contents Any None False If writing to file, the contents to write."},{"location":"providers/Files/file/#arguments","title":"Arguments","text":"Position Argument Type 1 path str 2 contents Any"},{"location":"providers/Files/file/#returns","title":"Returns","text":"<p><code>Optional[str]</code></p>"},{"location":"providers/Files/file/#examples","title":"Examples","text":""},{"location":"providers/Files/file/#read-a-file","title":"Read a file","text":"<p>Read a file into a variable as a string. <pre><code>compact-&gt;: file path/to/file/to/read\nexpanded:\n  -&gt;: file\n  path: path/to/file/to/read\n</code></pre></p>"},{"location":"providers/Files/file/#write-to-a-file","title":"Write to a file","text":"<p>Write to a file with contents. <pre><code>stuff: |\n  and things...\ncompact-&gt;: file path/to/file/to/write {{stuff}}\nexpanded:\n  -&gt;: file\n  path: path/to/file/to/read\n  contents: {{stuff}}\n</code></pre></p>"},{"location":"providers/Files/move/","title":"move","text":"<p>Source</p> <p>Hook  for moving a directory or directories to a location.</p>"},{"location":"providers/Files/move/#inputs","title":"Inputs","text":"Name Type Default Required Description src Union[List, str] True String or list of sources, either directories or files dst str True String for path to copy to create_path bool True True Boolean to create the directory path if it does not exist."},{"location":"providers/Files/move/#arguments","title":"Arguments","text":"Position Argument Type 1 src Union[List, str] 2 dst str"},{"location":"providers/Files/move/#returns","title":"Returns","text":"<p><code>NoneType</code></p>"},{"location":"providers/Files/move/#examples","title":"Examples","text":""},{"location":"providers/Files/move/#basic","title":"Basic","text":"<p>The most minimal implementation. <pre><code>compact-&gt;: move path/to/src output/path\nexpanded:\n  -&gt;: move\n  src: path/to/src\n  dst: output/path\n</code></pre></p>"},{"location":"providers/Files/read_section/","title":"read_section","text":"<p>Source</p> <p>Hook for reading a section of a document.</p>"},{"location":"providers/Files/read_section/#inputs","title":"Inputs","text":"Name Type Default Required Description document str True Path to a document to render a section of. start str --start-- True Marker generally in some kind of comment to begin reading from. end str --end-- True Marker generally in some kind of comment to end reading from."},{"location":"providers/Files/read_section/#arguments","title":"Arguments","text":"Position Argument Type 1 document str 2 start str 3 end str"},{"location":"providers/Files/read_section/#returns","title":"Returns","text":"<p><code>None</code></p>"},{"location":"providers/Files/remove/","title":"remove","text":"<p>Source</p> <p>Hook for removing a directory or directories.</p>"},{"location":"providers/Files/remove/#inputs","title":"Inputs","text":"Name Type Default Required Description path Union[List, str] True String or list of paths to remove."},{"location":"providers/Files/remove/#arguments","title":"Arguments","text":"Position Argument Type 1 path Union[List, str]"},{"location":"providers/Files/remove/#returns","title":"Returns","text":"<p><code>NoneType</code></p>"},{"location":"providers/Files/remove/#examples","title":"Examples","text":""},{"location":"providers/Files/remove/#basic","title":"Basic","text":"<p>Remove a file or directory <pre><code>compact-&gt;: remove path/to/file\nexpanded:\n  -&gt;: remove\n  path: path/to/dir\nexpanded_list:\n  -&gt;: remove\n  path:\n    - path/to/src1\n    - path/to/src2\n</code></pre></p>"},{"location":"providers/Files/shred/","title":"shred","text":"<p>Source</p> <p>Hook for shredding file/files.</p>"},{"location":"providers/Files/shred/#inputs","title":"Inputs","text":"Name Type Default Required Description src Union[List, str] True String or list of sources, either directories or files passes int 10 True The number of passes to overwrite the location."},{"location":"providers/Files/shred/#arguments","title":"Arguments","text":"Position Argument Type 1 src Union[List, str] 2 passes int"},{"location":"providers/Files/shred/#returns","title":"Returns","text":"<p><code>NoneType</code></p>"},{"location":"providers/Files/shred/#examples","title":"Examples","text":""},{"location":"providers/Files/shred/#basic","title":"Basic","text":"<p>The most minimal implementation. <pre><code>compact-&gt;: shred path/to/file\nexpanded:\n  -&gt;: shred\n  src: path/to/src\n  passes: 10  # Default\nexpanded_list:\n  -&gt;: shred\n  src:\n    - path/to/src1\n    - path/to/src2\n</code></pre></p>"},{"location":"providers/Files/unzipfile/","title":"unzipfile","text":"<p>Source</p> <p>Hook to unzip a file.</p>"},{"location":"providers/Files/unzipfile/#inputs","title":"Inputs","text":"Name Type Default Required Description input str True Input path output str . True Output path, default to current directory"},{"location":"providers/Files/unzipfile/#returns","title":"Returns","text":"<p><code>None</code></p>"},{"location":"providers/Files/which/","title":"which","text":"<p>Source</p> <p>Wrapper of shutil.which -&gt; posix which.</p>"},{"location":"providers/Files/which/#inputs","title":"Inputs","text":"Name Type Default Required Description path str True String path run <code>which</code> against."},{"location":"providers/Files/which/#arguments","title":"Arguments","text":"Position Argument Type 1 path str"},{"location":"providers/Files/which/#returns","title":"Returns","text":"<p><code>str</code></p>"},{"location":"providers/Files/zipfile/","title":"zipfile","text":"<p>Source</p> <p>Hook to zip a file or directory.</p>"},{"location":"providers/Files/zipfile/#inputs","title":"Inputs","text":"Name Type Default Required Description input str True Input path output str True Output path"},{"location":"providers/Files/zipfile/#returns","title":"Returns","text":"<p><code>None</code></p>"},{"location":"providers/Generate/","title":"Generate Provider","text":"<p>Hooks that generate files through jinja templating.</p>"},{"location":"providers/Generate/#hooks","title":"Hooks","text":"Type Description Return file_update Hook for jinja templates. If given an <code>output</code>, the rendered contents are output to a file, otherwise the rendered contents are output as a string. None generate Hook for generating project outputs. Recursively renders all files and folders in a given target directory to an output. If there is a \"templates\" directory and a file or directory that matches the <code>templates</code> input param, use that as target. Paths to templates and output are cross-platform but should be written with <code>/</code> path separators. None jinja Hook for jinja templates. If given an <code>output</code>, the rendered contents are output to a file, otherwise the rendered contents are output as a string. str update_section Hook for updating a section of a document. None"},{"location":"providers/Generate/#examples","title":"Examples","text":""},{"location":"providers/Generate/#jinja","title":"jinja","text":"<p>Render a single file</p> <pre><code>compact-&gt;: jinja path/to/template/file.tpl output/path.py\nexpanded:\n  -&gt;: jinja\n  template: path/to/template/file.tpl\n  ouput: output/path.py\n</code></pre>"},{"location":"providers/Generate/#generate","title":"generate","text":"<p>Recursively render a directory</p> <pre><code>stuff: things  # Arbitrary context\ncompact-&gt;: generate path/to/template/file/or/dir output/path\nexpanded:\n  -&gt;: jinja\n  template: path/to/template/file/or/dir\n  output: output/path\n</code></pre>"},{"location":"providers/Generate/file_update/","title":"file_update","text":"<p>Source</p> <p>Hook for jinja templates. If given an <code>output</code>, the rendered contents are output to a file, otherwise the rendered contents are output as a string.</p>"},{"location":"providers/Generate/file_update/#inputs","title":"Inputs","text":"Name Type Default Required Description template str True Path to the template to render relative to <code>file_system_loader</code>. start_marker str &lt;!-start-&gt; True Some marker in the template to start replacing the contents within. end_marker str &lt;!-end-&gt; True Some marker in the template to stop replacing the contents within. start_line int None False The line number to update from. Supersedes marker. extra_context dict None False Extra context update the global context to render with. render_context dict None False A render context that invalidates the default context. additional_context dict None False A map to use as additional context when rendering. file_system_loader Union[str, list] . True List of paths or string path to directory with templates to load from. Docs."},{"location":"providers/Generate/file_update/#arguments","title":"Arguments","text":"Position Argument Type 1 template str"},{"location":"providers/Generate/file_update/#returns","title":"Returns","text":"<p><code>None</code></p>"},{"location":"providers/Generate/generate/","title":"generate","text":"<p>Source</p> <p>Hook for generating project outputs. Recursively renders all files and folders in a given target directory to an output. If there is a \"templates\" directory and a file or directory that matches the <code>templates</code> input param, use that as target. Paths to templates and output are cross-platform but should be written with <code>/</code> path separators.</p>"},{"location":"providers/Generate/generate/#inputs","title":"Inputs","text":"Name Type Default Required Description templates Union[str, list] templates True Path or list of paths to a templatable directory or file to recursively render the contents. output str . True Path to put the output file(s). copy_without_render Union[str, list] [] True List of path to files to only copy and not render. overwrite_if_exists bool False True Overwrite the output if exists. skip_if_file_exists bool False True Skip creating if path exists. skip_overwrite_files list None False List of files to skip generating over if they exist. render_context dict None False A render context that invalidates the default context. extra_context Union[str, dict, List[dict]] None False A map / list of maps to use as extra context when rendering. Lists inputs are merged together as lists themselves don't make sense. file_system_loader Union[str, list] . True List of paths or string path to directory with templates to load from. Docs."},{"location":"providers/Generate/generate/#arguments","title":"Arguments","text":"Position Argument Type 1 templates Union[str, list] 2 output str"},{"location":"providers/Generate/generate/#returns","title":"Returns","text":"<p><code>None</code></p>"},{"location":"providers/Generate/generate/#examples","title":"Examples","text":""},{"location":"providers/Generate/generate/#basic","title":"Basic","text":"<p>The most minimal implementation. <pre><code>stuff: things\ngenerate_example-&gt;: generate path/to/template/file/or/dir output/path\n</code></pre></p>"},{"location":"providers/Generate/generate/#with-specific-context","title":"With specific context","text":"<pre><code>generate with specific context:\n  _&gt;: generate\n  templates: path/to/template/file/or/dir\n  output: output/path\n  render_context:\n    stuff: things\n</code></pre>"},{"location":"providers/Generate/generate/#with-extra-context","title":"With extra context","text":"<pre><code>stuff: things\ngenerate with specific context:\n  _&gt;: generate\n  templates: path/to/template/file/or/dir\n  output: output/path\n  extra_context:\n    foo: bar\n</code></pre>"},{"location":"providers/Generate/generate/#copy-without-render","title":"Copy without render","text":"<p>In case you don't want to render a file (for example a template), you can copy without rendering. <pre><code>expanded:\n  -&gt;: generate render_src output\n  copy_without_render:\n    - ./render_src/.hidden.yaml\n    - ./render_src/no-render/*\n</code></pre></p>"},{"location":"providers/Generate/jinja/","title":"jinja","text":"<p>Source</p> <p>Hook for jinja templates. If given an <code>output</code>, the rendered contents are output to a file, otherwise the rendered contents are output as a string.</p>"},{"location":"providers/Generate/jinja/#inputs","title":"Inputs","text":"Name Type Default Required Description template str True Path to the template to render relative to <code>file_system_loader</code>. output str None False Path to the output the template. extra_context dict None False Extra context update the global context to render with. render_context dict None False A render context that invalidates the default context. additional_context dict None False A map to use as additional context when rendering. file_system_loader Union[str, list] . True List of paths or string path to directory with templates to load from. Docs."},{"location":"providers/Generate/jinja/#arguments","title":"Arguments","text":"Position Argument Type 1 template str 2 output str"},{"location":"providers/Generate/jinja/#returns","title":"Returns","text":"<p><code>str</code></p>"},{"location":"providers/Generate/jinja/#examples","title":"Examples","text":""},{"location":"providers/Generate/jinja/#basic","title":"Basic","text":"<p>The most minimal implementation. <pre><code>stuff: things\njinja_example-&gt;: jinja path/to/template/file.tpl output/path.py\n</code></pre></p>"},{"location":"providers/Generate/jinja/#with-specific-context","title":"With specific context","text":"<pre><code>jinja with specific context:\n  _&gt;: jinja\n  templates: path/to/template/file.tpl\n  output: output/path.py\n  render_context:\n    stuff: things\n</code></pre>"},{"location":"providers/Generate/jinja/#with-extra-context","title":"With extra context","text":"<pre><code>stuff: things\njinja with specific context:\n  _&gt;: jinja\n  templates: path/to/template/file.tpl\n  output: output/path.py\n  extra_context:\n    foo: bar\n</code></pre>"},{"location":"providers/Generate/update_section/","title":"update_section","text":"<p>Source</p> <p>Hook for updating a section of a document.</p>"},{"location":"providers/Generate/update_section/#inputs","title":"Inputs","text":"Name Type Default Required Description document str True Path to a document to render a section of. content str True A string to update within the section of the document start_render str --start-- True Marker generally in some kind of comment to begin rendering from. end_render str --end-- True Marker generally in some kind of comment to end rendering from."},{"location":"providers/Generate/update_section/#arguments","title":"Arguments","text":"Position Argument Type 1 document str 2 content str 3 start_render str 4 end_render str"},{"location":"providers/Generate/update_section/#returns","title":"Returns","text":"<p><code>None</code></p>"},{"location":"providers/Ini/","title":"Ini File Provider","text":"<p>Wraps ini library to read and write.</p>"},{"location":"providers/Ini/#hooks","title":"Hooks","text":"Type Description Return ini Hook for reading and writing ini files. Hook reads from <code>path</code> if no <code>data</code> field is provided, otherwise it writes the <code>data</code> to <code>path</code>. Union[dict, str, list] ini_decode Hook for decoding an ini string to a dict. dict ini_encode Hook for converting a dict to an ini encoded string. str"},{"location":"providers/Ini/#examples","title":"Examples","text":""},{"location":"providers/Ini/#read-ini","title":"Read ini","text":"<p>Read a ini file into a key</p> <pre><code>compact-&gt;: ini path/to/file.ini\nexpanded:\n  -&gt;: ini\n  path: path/to/file.ini\n</code></pre>"},{"location":"providers/Ini/#write-ini","title":"Write ini","text":"<p>Read a ini file into a key</p> <pre><code>stuff:\n  and: things\ncompact-&gt;: ini path/to/file.ini \"{{stuff}}\"\nexpanded:\n  -&gt;: ini\n  path: path/to/file.ini\n  contents: \"{{ stuff }}\"\n</code></pre>"},{"location":"providers/Ini/ini/","title":"ini","text":"<p>Source</p> <p>Hook for reading and writing ini files. Hook reads from <code>path</code> if no <code>data</code> field is provided, otherwise it writes the <code>data</code> to <code>path</code>.</p>"},{"location":"providers/Ini/ini/#inputs","title":"Inputs","text":"Name Type Default Required Description path str True The file path to put read or write to. data Union[dict, list, str] None False Map or renderable string to a map key to write. Must have three levels for the section, key, and value - ie {section:{key1:value1, key2:value2}}. allow_no_value bool True True Whether to allow a no values."},{"location":"providers/Ini/ini/#arguments","title":"Arguments","text":"Position Argument Type 1 path str 2 data Union[dict, list, str]"},{"location":"providers/Ini/ini/#returns","title":"Returns","text":"<p><code>Union[dict, str, list]</code></p>"},{"location":"providers/Ini/ini_decode/","title":"ini_decode","text":"<p>Source</p> <p>Hook for decoding an ini string to a dict.</p>"},{"location":"providers/Ini/ini_decode/#inputs","title":"Inputs","text":"Name Type Default Required Description data str True Yaml string to convert to dict."},{"location":"providers/Ini/ini_decode/#arguments","title":"Arguments","text":"Position Argument Type 1 data str"},{"location":"providers/Ini/ini_decode/#returns","title":"Returns","text":"<p><code>dict</code></p>"},{"location":"providers/Ini/ini_encode/","title":"ini_encode","text":"<p>Source</p> <p>Hook for converting a dict to an ini encoded string.</p>"},{"location":"providers/Ini/ini_encode/#inputs","title":"Inputs","text":"Name Type Default Required Description data dict str True"},{"location":"providers/Ini/ini_encode/#arguments","title":"Arguments","text":"Position Argument Type 1 data dict"},{"location":"providers/Ini/ini_encode/#returns","title":"Returns","text":"<p><code>str</code></p>"},{"location":"providers/Json/","title":"JSON Provider","text":"<p>Wraps json library to read and write json.</p>"},{"location":"providers/Json/#hooks","title":"Hooks","text":"Type Description Return json Hook for reading and writing json. Hook reads from <code>path</code> if no <code>data</code> field is provided, otherwise it writes the <code>data</code> to <code>path</code>. Union[dict, str] json_decode Hook for decoding a JSON string to a dict. Union[dict, list] json_encode Hook for converting a dict to a JSON encoded string. str"},{"location":"providers/Json/#examples","title":"Examples","text":""},{"location":"providers/Json/#read-json","title":"Read json","text":"<p>Read a json file into a key</p> <pre><code>compact-&gt;: json path/to/file.json\nexpanded:\n  -&gt;: json\n  path: path/to/file.json\n</code></pre>"},{"location":"providers/Json/#write-json","title":"Write json","text":"<p>Read a json file into a key</p> <pre><code>stuff:\n  and: things\ncompact-&gt;: json path/to/file.json \"{{stuff}}\"\nexpanded:\n  -&gt;: json\n  path: path/to/file.json\n  contents: \"{{ stuff }}\"\n</code></pre>"},{"location":"providers/Json/json/","title":"json","text":"<p>Source</p> <p>Hook for reading and writing json. Hook reads from <code>path</code> if no <code>data</code> field is provided, otherwise it writes the <code>data</code> to <code>path</code>.</p>"},{"location":"providers/Json/json/#inputs","title":"Inputs","text":"Name Type Default Required Description path str True The file path to put read or write to. data Union[dict, list, str] None False Map/list or renderable string to a map/list key to write."},{"location":"providers/Json/json/#arguments","title":"Arguments","text":"Position Argument Type 1 path str 2 data Union[dict, list, str]"},{"location":"providers/Json/json/#returns","title":"Returns","text":"<p><code>Union[dict, str]</code></p>"},{"location":"providers/Json/json_decode/","title":"json_decode","text":"<p>Source</p> <p>Hook for decoding a JSON string to a dict.</p>"},{"location":"providers/Json/json_decode/#inputs","title":"Inputs","text":"Name Type Default Required Description data str True JSON string to convert to dict."},{"location":"providers/Json/json_decode/#arguments","title":"Arguments","text":"Position Argument Type 1 data str"},{"location":"providers/Json/json_decode/#returns","title":"Returns","text":"<p><code>Union[dict, list]</code></p>"},{"location":"providers/Json/json_encode/","title":"json_encode","text":"<p>Source</p> <p>Hook for converting a dict to a JSON encoded string.</p>"},{"location":"providers/Json/json_encode/#inputs","title":"Inputs","text":"Name Type Default Required Description data Union[dict, list, str] True Map/list or renderable string to data to convert to JSON string."},{"location":"providers/Json/json_encode/#arguments","title":"Arguments","text":"Position Argument Type 1 data Union[dict, list, str]"},{"location":"providers/Json/json_encode/#returns","title":"Returns","text":"<p><code>str</code></p>"},{"location":"providers/Logic/","title":"Logic Provider","text":"<p>Hooks for various logical operations such as match/case, assert, and while loops.</p>"},{"location":"providers/Logic/#hooks","title":"Hooks","text":"Type Description Return assert Hook for asserting an input is equal to a value. bool match Hook for match / case statements. Takes a dict where the keys are matched to a value. If the case value has an arrow in it (ie key-&gt;: ... ) the arrow is stripped away. All matched values are ran as hooks. Union[list, dict, NoneType] raise Hook for raising an error. None return Hook for stopping parsing and returning a given value instead of the public context data. For strings it renders the value, for dicts / lists it parses it, for everything else (bool / int) it returns the value as is. Any returns Hook for stopping parsing and returning a given value instead of the public context data. Returns the value as is without parsing or rendering as compared to the <code>return</code> hook which renders / parses by default. Any"},{"location":"providers/Logic/#examples","title":"Examples","text":""},{"location":"providers/Logic/#match","title":"match","text":"<p>The <code>match</code> hook mimics common match/case statements</p> <pre><code># Stand in for some kind of thing to match against\nselection:\n  -&gt;: select What to do?\n  choices: ['agree','disagree']\n\nmatcher:\n  -&gt;: match selection\n  case:\n    agree: Some value\n    disagree-&gt;: # Run some tackle context\n    ...\n</code></pre>"},{"location":"providers/Logic/#assert","title":"assert","text":"<p>Hook to assert if two items are equal. Can also easily be done with jinja but with this hook you can exit based on the assertion.</p> <p><pre><code>stuff: things\nassertion-&gt;: assert {{stuff}} things  # Would exit otherwise\nwith-jinja-&gt;: {{stuff!='things'}}  # Equivalent and would not exit\n</code></pre> <pre><code>stuff: things\nassertion: true\nwith-jinja: false\n</code></pre></p>"},{"location":"providers/Logic/#type","title":"type","text":"<p>Hook to get type of variable.</p> <p><pre><code>stuff: things\nmap:\n  stuff: things\nstuff_type-&gt;: type stuff  # rendered by default\nmap_type-&gt;: type map\n</code></pre> <pre><code>stuff: things\nmap:\n  stuff: things\nstuff_type: str\nmap_type: dict\n</code></pre></p>"},{"location":"providers/Logic/assert/","title":"assert","text":"<p>Source</p> <p>Hook for asserting an input is equal to a value.</p>"},{"location":"providers/Logic/assert/#inputs","title":"Inputs","text":"Name Type Default Required Description input Any True The input - ie right hand side of assert. value Any None False The value - ie left hand side of assert. exit_on_failure bool True True Whether to exit on assertion error."},{"location":"providers/Logic/assert/#arguments","title":"Arguments","text":"Position Argument Type 1 input Any 2 value Any"},{"location":"providers/Logic/assert/#returns","title":"Returns","text":"<p><code>bool</code></p>"},{"location":"providers/Logic/assert/#examples","title":"Examples","text":"<p>Assert if two items are equal. Can also easily be done with jinja but with this hook you can exit based on the assertion. <pre><code>stuff: things\nassertion-&gt;: assert {{stuff}} things  # Would exit otherwise\nwith-jinja-&gt;: {{stuff!='things'}}  # Equivalent and would not exit\n# `assert` is a special key as well and skips output\nassert-&gt;: things {{stuff}}\n# Note - this does not work because of yaml parsing error\n#assert-&gt;: \"{{stuff}}\" things\n</code></pre></p> <pre><code>stuff: things\nassertion: true\nwith-jinja: false\n</code></pre>"},{"location":"providers/Logic/match/","title":"match","text":"<p>Source</p> <p>Hook for match / case statements. Takes a dict where the keys are matched to a value. If the case value has an arrow in it (ie key-&gt;: ... ) the arrow is stripped away. All matched values are ran as hooks.</p>"},{"location":"providers/Logic/match/#inputs","title":"Inputs","text":"Name Type Default Required Description value str int float bool case dict True A dictionary where the keys are cases to be matched. Runs hooks if present."},{"location":"providers/Logic/match/#arguments","title":"Arguments","text":"Position Argument Type 1 value str"},{"location":"providers/Logic/match/#returns","title":"Returns","text":"<p><code>Union[list, dict, NoneType]</code></p>"},{"location":"providers/Logic/match/#examples","title":"Examples","text":"<p>The <code>match</code> hook mimics common match/case statements <pre><code># Stand in for some kind of thing to match against\nselection:\n  -&gt;: select What to do?\n  choices: ['agree','disagree']\n\nmatcher:\n  -&gt;: match selection\n  case:\n    agree: Some value\n    disagree-&gt;: # Run some tackle context\n    ...\n</code></pre></p>"},{"location":"providers/Logic/raise/","title":"raise","text":"<p>Source</p> <p>Hook for raising an error.</p>"},{"location":"providers/Logic/raise/#inputs","title":"Inputs","text":"Name Type Default Required Description message str None False A message to show when raising an error."},{"location":"providers/Logic/raise/#arguments","title":"Arguments","text":"Position Argument Type 1 message str"},{"location":"providers/Logic/raise/#returns","title":"Returns","text":"<p><code>None</code></p>"},{"location":"providers/Logic/return/","title":"return","text":"<p>Source</p> <p>Hook for stopping parsing and returning a given value instead of the public context data. For strings it renders the value, for dicts / lists it parses it, for everything else (bool / int) it returns the value as is.</p>"},{"location":"providers/Logic/return/#inputs","title":"Inputs","text":"Name Type Default Required Description value Any None False The value to return."},{"location":"providers/Logic/return/#arguments","title":"Arguments","text":"Position Argument Type 1 value Any"},{"location":"providers/Logic/return/#returns","title":"Returns","text":"<p><code>Any</code></p>"},{"location":"providers/Logic/return/#examples","title":"Examples","text":"<p>The <code>return</code> hook stops parsing and returns whatever value by rendering <pre><code>foo:\n  bar: baz\nignored key-&gt;: return foo\n</code></pre></p> <pre><code>bar: baz\n</code></pre> <p>The <code>return</code> hook can also be a special key <pre><code>foo:\n  bar: baz\nreturn-&gt;: foo --if true\n</code></pre></p> <pre><code>bar: baz\n</code></pre>"},{"location":"providers/Logic/returns/","title":"returns","text":"<p>Source</p> <p>Hook for stopping parsing and returning a given value instead of the public context data. Returns the value as is without parsing or rendering as compared to the <code>return</code> hook which renders / parses by default.</p>"},{"location":"providers/Logic/returns/#inputs","title":"Inputs","text":"Name Type Default Required Description value Any None False The value to return."},{"location":"providers/Logic/returns/#arguments","title":"Arguments","text":"Position Argument Type 1 value Any"},{"location":"providers/Logic/returns/#returns_1","title":"Returns","text":"<p><code>Any</code></p>"},{"location":"providers/Logic/returns/#examples","title":"Examples","text":"<p>The <code>returns</code> hook stops parsing and returns whatever string value <pre><code>foo:\n  bar: baz\nreturns-&gt;: foo\n</code></pre></p> <pre><code>bar: baz\n</code></pre> <p>The <code>returns</code> hook stops parsing <pre><code>foo: bar\nreturns-&gt;: foo  # Does not render by default vs `return` hook which does\n</code></pre></p> <pre><code>foo\n</code></pre>"},{"location":"providers/Paths/","title":"Paths Provider","text":"<p>Hooks for file path operations including symlinking</p>"},{"location":"providers/Paths/#hooks","title":"Hooks","text":"Type Description Return basename Hook for getting the basename from a path. None dirname Hook for getting the basename from a path. None find_in_child Hook to find the absolute path to a file or directory in child directories. list find_in_parent Hook to find the absolute path to a file or directory in parent directories. str flatten_paths Hook for flattening a dictionary into a list of paths. list glob Hook for running python's glob module. Return a possibly empty list of path names that match pathname, which must be a string containing a path specification. list isdir Hook for os package 'path.isdir'. bool isfile Hook for os package 'path.isfile'. bool listdir Hook for <code>listdir</code>. Lists the contents of a directory. list mkdir Hook creating a directory. str path_exists Hook for os package 'path.exists'. bool path_join Hook joining paths. None symlink Hook creating symlinks wrapping <code>os.symlink</code> functionality. Wraps<code>os.symlink</code> NoneType temp_dir Hook creating a temporary directory. str"},{"location":"providers/Paths/#examples","title":"Examples","text":""},{"location":"providers/Paths/#mkdir","title":"mkdir","text":"<p>Make a directory</p> <pre><code>compact-&gt;: mkdir path/to/dir\nexpanded:\n  -&gt;: mkdir\n  path: path/to/dir\n</code></pre>"},{"location":"providers/Paths/#listdir","title":"listdir","text":"<p>List the contents of a directory</p> <pre><code>compact-&gt;: listdir path/to/dir\nexpanded:\n  -&gt;: listdir\n  path: path/to/dir\n</code></pre>"},{"location":"providers/Paths/#symlink","title":"symlink","text":"<p>Create a symlink</p> <pre><code>compact-&gt;: symlink path/to/source path/to/destination\nexpanded:\n  -&gt;: symlink\n  src: path/to/source\n  dst: path/to/destination\n  target_is_directory: true\n</code></pre>"},{"location":"providers/Paths/#path_exists","title":"path_exists","text":"<p>Check if a path exists</p> <pre><code>compact-&gt;: path_exists path/to/file/or/dir\nexpanded:\n  -&gt;: path_exists\n  path: path/to/file/or/dir\n</code></pre>"},{"location":"providers/Paths/#isdir","title":"isdir","text":"<p>Check if a path exists</p> <pre><code>compact-&gt;: isdir path/to/dir\nexpanded:\n  -&gt;: isdir\n  path: path/to/dir\n</code></pre>"},{"location":"providers/Paths/#isfile","title":"isfile","text":"<p>Check if a path exists</p> <pre><code>compact-&gt;: isfile path/to/dir\nexpanded:\n  -&gt;: isfile\n  path: path/to/dir\n</code></pre>"},{"location":"providers/Paths/#path_join","title":"path_join","text":"<p>Check if a path exists</p> <p><pre><code>compact-&gt;: path_join ['path','to','dir']\nexpanded:\n  -&gt;: path_join\n  paths:\n    - path\n    - to\n    - dir\n</code></pre> <pre><code>compact: path/to/dir  # \\ for windows\nexpanded: path/to/dir\n</code></pre></p>"},{"location":"providers/Paths/#find_in_parent","title":"find_in_parent","text":"<p>Return the path to a target file in a parent directory</p> <pre><code>compact-&gt;: find_in_parent a-file.yaml\nexpanded:\n  -&gt;: find_in_parent\n  target: a-file.yaml\n</code></pre>"},{"location":"providers/Paths/#find_in_child","title":"find_in_child","text":"<p>Get a list of paths to a target file in child directories</p> <pre><code>compact-&gt;: find_in_child a-file.yaml\nexpanded:\n  -&gt;: find_in_child\n  target: a-file.yaml\n</code></pre>"},{"location":"providers/Paths/basename/","title":"basename","text":"<p>Source</p> <p>Hook for getting the basename from a path.</p>"},{"location":"providers/Paths/basename/#inputs","title":"Inputs","text":"Name Type Default Required Description path str True Path to the file/directory to get the basename of."},{"location":"providers/Paths/basename/#arguments","title":"Arguments","text":"Position Argument Type 1 path str"},{"location":"providers/Paths/basename/#returns","title":"Returns","text":"<p><code>None</code></p>"},{"location":"providers/Paths/dirname/","title":"dirname","text":"<p>Source</p> <p>Hook for getting the basename from a path.</p>"},{"location":"providers/Paths/dirname/#inputs","title":"Inputs","text":"Name Type Default Required Description path str True Path to the file/directory to get the directory name of."},{"location":"providers/Paths/dirname/#arguments","title":"Arguments","text":"Position Argument Type 1 path str"},{"location":"providers/Paths/dirname/#returns","title":"Returns","text":"<p><code>None</code></p>"},{"location":"providers/Paths/find_in_child/","title":"find_in_child","text":"<p>Source</p> <p>Hook to find the absolute path to a file or directory in child directories.</p>"},{"location":"providers/Paths/find_in_child/#inputs","title":"Inputs","text":"Name Type Default Required Description target str True The name of the file to find the absolute path to fallback Any None False String to fallback on if the target is not found. starting_dir str . True The starting directory to search from. Defaults to current working directory."},{"location":"providers/Paths/find_in_child/#arguments","title":"Arguments","text":"Position Argument Type 1 target str"},{"location":"providers/Paths/find_in_child/#returns","title":"Returns","text":"<p><code>list</code></p>"},{"location":"providers/Paths/find_in_parent/","title":"find_in_parent","text":"<p>Source</p> <p>Hook to find the absolute path to a file or directory in parent directories.</p>"},{"location":"providers/Paths/find_in_parent/#inputs","title":"Inputs","text":"Name Type Default Required Description target str True The name of the file to find the absolute path to fallback Any None False String to fallback on if the target is not found. starting_dir str . True The starting directory to search from. Defaults to current working directory."},{"location":"providers/Paths/find_in_parent/#arguments","title":"Arguments","text":"Position Argument Type 1 target str"},{"location":"providers/Paths/find_in_parent/#returns","title":"Returns","text":"<p><code>str</code></p>"},{"location":"providers/Paths/flatten_paths/","title":"flatten_paths","text":"<p>Source</p> <p>Hook for flattening a dictionary into a list of paths.</p>"},{"location":"providers/Paths/flatten_paths/#inputs","title":"Inputs","text":"Name Type Default Required Description paths Union[dict, list] True A list or map representing paths to files that should be flattened base_path str True A base path to prefix in the output."},{"location":"providers/Paths/flatten_paths/#arguments","title":"Arguments","text":"Position Argument Type 1 paths Union[dict, list]"},{"location":"providers/Paths/flatten_paths/#returns","title":"Returns","text":"<p><code>list</code></p>"},{"location":"providers/Paths/glob/","title":"glob","text":"<p>Source</p> <p>Hook for running python's glob module. Return a possibly empty list of path names that match pathname, which must be a string containing a path specification.</p>"},{"location":"providers/Paths/glob/#inputs","title":"Inputs","text":"Name Type Default Required Description pathname str True The path to file or directory root_dir str None False The root dir to run glob from. dir_fd int None False Similar to root_dir, but it specifies the root directory as an open directory descriptor instead of a path recursive bool False True Search underlying directories. include_hidden bool False True Include hidden files / dirs."},{"location":"providers/Paths/glob/#arguments","title":"Arguments","text":"Position Argument Type 1 pathname str"},{"location":"providers/Paths/glob/#returns","title":"Returns","text":"<p><code>list</code></p>"},{"location":"providers/Paths/isdir/","title":"isdir","text":"<p>Source</p> <p>Hook for os package 'path.isdir'.</p>"},{"location":"providers/Paths/isdir/#inputs","title":"Inputs","text":"Name Type Default Required Description path str True The path to a directory"},{"location":"providers/Paths/isdir/#arguments","title":"Arguments","text":"Position Argument Type 1 path str"},{"location":"providers/Paths/isdir/#returns","title":"Returns","text":"<p><code>bool</code></p>"},{"location":"providers/Paths/isfile/","title":"isfile","text":"<p>Source</p> <p>Hook for os package 'path.isfile'.</p>"},{"location":"providers/Paths/isfile/#inputs","title":"Inputs","text":"Name Type Default Required Description path str True The path to a file"},{"location":"providers/Paths/isfile/#arguments","title":"Arguments","text":"Position Argument Type 1 path str"},{"location":"providers/Paths/isfile/#returns","title":"Returns","text":"<p><code>bool</code></p>"},{"location":"providers/Paths/listdir/","title":"listdir","text":"<p>Source</p> <p>Hook for <code>listdir</code>. Lists the contents of a directory.</p>"},{"location":"providers/Paths/listdir/#inputs","title":"Inputs","text":"Name Type Default Required Description path str . True Path to directory to list contents. sort bool False True Boolean to sort the output ignore_hidden bool False True Boolean to ignore hidden files or directories ignore_hidden_files bool False True Boolean to ignore hidden files ignore_hidden_directories bool False True Boolean to ignore hidden directories only_files bool False True Only return files. only_directories bool False True Only return directories. exclude Union[str, list] None False A list or string of regexes to ignore."},{"location":"providers/Paths/listdir/#arguments","title":"Arguments","text":"Position Argument Type 1 path str"},{"location":"providers/Paths/listdir/#returns","title":"Returns","text":"<p><code>list</code></p>"},{"location":"providers/Paths/mkdir/","title":"mkdir","text":"<p>Source</p> <p>Hook creating a directory.</p>"},{"location":"providers/Paths/mkdir/#inputs","title":"Inputs","text":"Name Type Default Required Description path str True The path to file or directory"},{"location":"providers/Paths/mkdir/#arguments","title":"Arguments","text":"Position Argument Type 1 path str"},{"location":"providers/Paths/mkdir/#returns","title":"Returns","text":"<p><code>str</code></p>"},{"location":"providers/Paths/mkdir/#examples","title":"Examples","text":""},{"location":"providers/Paths/mkdir/#mkdir_1","title":"mkdir","text":"<p>Make a directory <pre><code>compact-&gt;: mkdir path/to/dir\nexpanded:\n  -&gt;: mkdir\n  path: path/to/dir\n</code></pre></p>"},{"location":"providers/Paths/path_exists/","title":"path_exists","text":"<p>Source</p> <p>Hook for os package 'path.exists'.</p>"},{"location":"providers/Paths/path_exists/#inputs","title":"Inputs","text":"Name Type Default Required Description path str True The path to file or directory"},{"location":"providers/Paths/path_exists/#arguments","title":"Arguments","text":"Position Argument Type 1 path str"},{"location":"providers/Paths/path_exists/#returns","title":"Returns","text":"<p><code>bool</code></p>"},{"location":"providers/Paths/path_join/","title":"path_join","text":"<p>Source</p> <p>Hook joining paths.</p>"},{"location":"providers/Paths/path_join/#inputs","title":"Inputs","text":"Name Type Default Required Description paths list True List of items in a path to file or directory."},{"location":"providers/Paths/path_join/#arguments","title":"Arguments","text":"Position Argument Type 1 paths list"},{"location":"providers/Paths/path_join/#returns","title":"Returns","text":"<p><code>None</code></p>"},{"location":"providers/Paths/symlink/","title":"symlink","text":"<p>Source</p> <p>Hook creating symlinks wrapping <code>os.symlink</code> functionality. Wraps<code>os.symlink</code></p>"},{"location":"providers/Paths/symlink/#inputs","title":"Inputs","text":"Name Type Default Required Description src str True String or list of sources, either a directories or files dst str True String for path to copy to target_is_directory bool False True The default value of this parameter is False. If the specified target path is directory then its value should be True. overwrite bool False True Overwrite the destination."},{"location":"providers/Paths/symlink/#arguments","title":"Arguments","text":"Position Argument Type 1 src str 2 dst str"},{"location":"providers/Paths/symlink/#returns","title":"Returns","text":"<p><code>NoneType</code></p>"},{"location":"providers/Paths/temp_dir/","title":"temp_dir","text":"<p>Source</p> <p>Hook creating a temporary directory.</p>"},{"location":"providers/Paths/temp_dir/#inputs","title":"Inputs","text":"<p>No inputs</p>"},{"location":"providers/Paths/temp_dir/#returns","title":"Returns","text":"<p><code>str</code></p>"},{"location":"providers/Prompts/","title":"Prompt Provider","text":"<p>Wraps PyInquirer python package for basic prompting.</p>"},{"location":"providers/Prompts/#hooks","title":"Hooks","text":"Type Description Return checkbox Hook for PyInquirer <code>checkbox</code> type prompts. Allows the user to multi-select from a list of choices and outputs a list. Takes in three forms of <code>choices</code> inputs. A list of string, a list of maps with all keys having a <code>name</code> field per the original spec, or list of maps with the key as the question, the value as the output. list confirm Hook to confirm with a message and return a boolean. Source example bool editor Hook for PyInquirer <code>editor</code> type prompts. Opens an editor like nano to fill in a field. Source example bool expand Hook for PyInquirer <code>expand</code> type prompt. Source example list input Hook for PyInquirer 'input' type prompts. Allows the user to input a string input. Source example str password Hook for PyInquirer <code>password</code> type prompts. Masks the input as the user types it in. Source example str rawlist Hook for PyInquirer 'rawlist' type prompts. Similar to <code>select</code> hook with lessflexibility. Source example list select Hook for PyInquirer 'list' type prompts, a single selector that returns a string. Takes in two forms of <code>choices</code> inputs, list of string or list of maps with the key as the question and the value as the output. Source example Any"},{"location":"providers/Prompts/#examples","title":"Examples","text":""},{"location":"providers/Prompts/#input","title":"input","text":"<p>Prompt that allows user to input a field.</p> <p><pre><code>compact_implicit-&gt;: input\ncompact_with_question-&gt;: input Ask a question?\ninput_expanded:\n  -&gt;: input\n  message: A question?\n  default: things\n</code></pre> <pre><code>? compact_implicit &gt;&gt;&gt;\n? Ask a question?\n? A question?  things\n</code></pre></p> <pre><code>compact_implicit: &lt;user input&gt;\ncompact_with_question: &lt;user input&gt;\ninput_expanded: &lt;user input&gt;\n</code></pre>"},{"location":"providers/Prompts/#select","title":"select","text":"<p>A selector that limits the input to a list of choices. Generally this is written in expanded form.</p> <p><pre><code>compact-&gt;: select \"What do you want?\" ['stuff','things']\nexpanded:\n  -&gt;: select\n  choices:\n    - stuff\n    - things\n</code></pre> <pre><code>? What do you want?  stuff\n? expanded &gt;&gt;&gt;  (Use arrow keys)\n   stuff\n \u276f things\n</code></pre></p> <pre><code>compact: stuff\nexpanded: things\n</code></pre>"},{"location":"providers/Prompts/#checkbox","title":"checkbox","text":"<p>A checkbox that allow the user to chose multiple choices and returns a list of those choices.</p> <pre><code>checkbox-minimal:\n  -&gt;: input\n  choices:\n    - stuff\n    - things\n</code></pre>"},{"location":"providers/Prompts/checkbox/","title":"checkbox","text":"<p>Source</p> <p>Hook for PyInquirer <code>checkbox</code> type prompts. Allows the user to multi-select from a list of choices and outputs a list. Takes in three forms of <code>choices</code> inputs. A list of string, a list of maps with all keys having a <code>name</code> field per the original spec, or list of maps with the key as the question, the value as the output.</p>"},{"location":"providers/Prompts/checkbox/#inputs","title":"Inputs","text":"Name Type Default Required Description message str None False String message to show when prompting. choices Union[list[str], list[dict]] True Either a list of strings or dictionary . checked bool False True Boolean if the default choices should all be checked. index bool False True Boolean to return the index instead of the answer fuzzy bool False True Allow fuzzy search like fzf - docs"},{"location":"providers/Prompts/checkbox/#arguments","title":"Arguments","text":"Position Argument Type 1 message str"},{"location":"providers/Prompts/checkbox/#returns","title":"Returns","text":"<p><code>list</code></p>"},{"location":"providers/Prompts/checkbox/#examples","title":"Examples","text":"<p>The basic versions of the <code>checkbox</code> hook can be called in these ways <pre><code>compact-&gt;: checkbox \"What do you want?\" ['stuff','things']\nexpanded:\n  -&gt;: checkbox\n  choices:\n    - stuff\n    - things\n</code></pre> <pre><code>? What do you want?  done (2 selections)\n? expanded &gt;&gt;&gt;  (&lt;up&gt;, &lt;down&gt; to move, &lt;space&gt; to select, &lt;a&gt; to toggle, &lt;i&gt; to invert)\n \u276f\u25cb stuff\n  \u25cf things\n</code></pre></p> <pre><code>compact:\n  - stuff\n  - things\nexpanded:\n  - things\n</code></pre> <p>Other versions can use custom prompts for the choices and output the key. <pre><code>selection:\n  -&gt;: checkbox\n  message: What you do?\n  checked: true\n  choices:\n    - I do stuff: stuff\n    - I do things: things\n</code></pre> ? What you do? \u276f \u25c9 I do stuff   \u25c9 I do things</p> <pre><code>selection:\n  - stuff\n  - things\n</code></pre>"},{"location":"providers/Prompts/confirm/","title":"confirm","text":"<p>Source</p> <p>Hook to confirm with a message and return a boolean. Source example</p>"},{"location":"providers/Prompts/confirm/#inputs","title":"Inputs","text":"Name Type Default Required Description default bool True True Default choice. message str None False String message to show when prompting."},{"location":"providers/Prompts/confirm/#arguments","title":"Arguments","text":"Position Argument Type 1 message str"},{"location":"providers/Prompts/confirm/#returns","title":"Returns","text":"<p><code>bool</code></p>"},{"location":"providers/Prompts/editor/","title":"editor","text":"<p>Source</p> <p>Hook for PyInquirer <code>editor</code> type prompts. Opens an editor like nano to fill in a field. Source example</p>"},{"location":"providers/Prompts/editor/#inputs","title":"Inputs","text":"Name Type Default Required Description default Any None False Default selection. message str None False String message to show when prompting."},{"location":"providers/Prompts/editor/#arguments","title":"Arguments","text":"Position Argument Type 1 message str 2 default Any"},{"location":"providers/Prompts/editor/#returns","title":"Returns","text":"<p><code>bool</code></p>"},{"location":"providers/Prompts/expand/","title":"expand","text":"<p>Source</p> <p>Hook for PyInquirer <code>expand</code> type prompt. Source example</p>"},{"location":"providers/Prompts/expand/#inputs","title":"Inputs","text":"Name Type Default Required Description default Any None False Default selection. message str None False String message to show when prompting."},{"location":"providers/Prompts/expand/#arguments","title":"Arguments","text":"Position Argument Type 1 message str 2 default Any"},{"location":"providers/Prompts/expand/#returns","title":"Returns","text":"<p><code>list</code></p>"},{"location":"providers/Prompts/input/","title":"input","text":"<p>Source</p> <p>Hook for PyInquirer 'input' type prompts. Allows the user to input a string input. Source example</p>"},{"location":"providers/Prompts/input/#inputs","title":"Inputs","text":"Name Type Default Required Description message str None False String message to show when prompting. default Any None False Default choice."},{"location":"providers/Prompts/input/#arguments","title":"Arguments","text":"Position Argument Type 1 message str"},{"location":"providers/Prompts/input/#returns","title":"Returns","text":"<p><code>str</code></p>"},{"location":"providers/Prompts/input/#examples","title":"Examples","text":"<p>The <code>input</code> hook can be called in a number of ways <pre><code>compact_implicit-&gt;: input\ncompact_with_question-&gt;: input Ask a question?\ninput_expanded:\n  -&gt;: input\n  message: A question?\n  default: things\n</code></pre> <pre><code>? compact_implicit &gt;&gt;&gt;\n? Ask a question?\n? A question?  things\n</code></pre></p> <pre><code>compact_implicit: &lt;user input&gt;\ncompact_with_question: &lt;user input&gt;\ninput_expanded: &lt;user input&gt;\n</code></pre>"},{"location":"providers/Prompts/password/","title":"password","text":"<p>Source</p> <p>Hook for PyInquirer <code>password</code> type prompts. Masks the input as the user types it in. Source example</p>"},{"location":"providers/Prompts/password/#inputs","title":"Inputs","text":"Name Type Default Required Description default Any None False Default that is not filled in. message str None False String message to show when prompting."},{"location":"providers/Prompts/password/#arguments","title":"Arguments","text":"Position Argument Type 1 message str 2 default Any"},{"location":"providers/Prompts/password/#returns","title":"Returns","text":"<p><code>str</code></p>"},{"location":"providers/Prompts/rawlist/","title":"rawlist","text":"<p>Source</p> <p>Hook for PyInquirer 'rawlist' type prompts. Similar to <code>select</code> hook with lessflexibility. Source example</p>"},{"location":"providers/Prompts/rawlist/#inputs","title":"Inputs","text":"Name Type Default Required Description default Any None False Default choice. message str None False String message to show when prompting. choices list True A list of choices."},{"location":"providers/Prompts/rawlist/#arguments","title":"Arguments","text":"Position Argument Type 1 message str 2 default Any"},{"location":"providers/Prompts/rawlist/#returns","title":"Returns","text":"<p><code>list</code></p>"},{"location":"providers/Prompts/select/","title":"select","text":"<p>Source</p> <p>Hook for PyInquirer 'list' type prompts, a single selector that returns a string. Takes in two forms of <code>choices</code> inputs, list of string or list of maps with the key as the question and the value as the output. Source example</p>"},{"location":"providers/Prompts/select/#inputs","title":"Inputs","text":"Name Type Default Required Description message str None False String message to show when prompting. choices Union[List[str], List[dict]] True List of strings or dicts with keys as output and values as display. index bool False True Boolean to return the index instead of the answer"},{"location":"providers/Prompts/select/#arguments","title":"Arguments","text":"Position Argument Type 1 message str"},{"location":"providers/Prompts/select/#returns","title":"Returns","text":"<p><code>Any</code></p>"},{"location":"providers/Prompts/select/#examples","title":"Examples","text":"<p>The basic versions of the <code>select</code> can be called in these ways <pre><code>compact-&gt;: select \"What do you want?\" ['stuff','things']\nexpanded:\n  -&gt;: select\n  choices:\n    - stuff\n    - things\n</code></pre> <pre><code>? What do you want?  stuff\n? expanded &gt;&gt;&gt;  (Use arrow keys)\n   stuff\n \u276f things\n</code></pre></p> <pre><code>compact: stuff\nexpanded: things\n</code></pre> <p>Other versions can use custom prompts for the choices <pre><code>selection:\n  -&gt;: checkbox\n  message: What you do?\n  checked: true\n  choices:\n    - I do stuff: stuff\n    - I do things: things\n</code></pre></p> <pre><code>? What you do?  (&lt;up&gt;, &lt;down&gt; to move, &lt;space&gt; to select, &lt;a&gt; to toggle, &lt;i&gt; to invert)\n \u276f\u25cf I do stuff\n  \u25cf I do things\n</code></pre> <p>Can also take the APIs normal form <pre><code>selection:\n  -&gt;: checkbox\n  message: What you do?\n  choices:\n    - name: stuff\n    - name: things\n      checked: true\n</code></pre></p> <pre><code>? What you do?  (&lt;up&gt;, &lt;down&gt; to move, &lt;space&gt; to select, &lt;a&gt; to toggle, &lt;i&gt; to invert)\n \u276f\u25cb stuff\n  \u25cf things\n</code></pre>"},{"location":"providers/Strings/","title":"String Provider","text":"<p>String manipulation and random string generators.</p>"},{"location":"providers/Strings/#hooks","title":"Hooks","text":"Type Description Return base64_decode Hook for <code>base64_decode</code>. Base64 decodes a string. str base64_encode Hook for <code>base64_encode</code>. Base64 encodes a string. str ends_with Hook checking if a string ends with another string.Docs None join Join a list of strings with a separator. None random_hex Hook  for <code>random_hex</code>. Lists the contents of a directory. str random_string Hook for <code>random_string</code>. Lists the contents of a directory. str regex_match Hook running a regex against a string.Docs None split Hook for splitting a string into as list based on a separator. None starts_with Hook checking if a string starts with another string.Docs None"},{"location":"providers/Strings/#examples","title":"Examples","text":""},{"location":"providers/Strings/#split","title":"split","text":"<p>Splits a string into a list based on a separator</p> <p><pre><code>compact-&gt;: split stuff-and-things -\nexpanded:\n  -&gt;: split\n  input: stuff-and-things\n  separator: \"-\"\n</code></pre> <pre><code>compact:\n  - stuff\n  - and\n  - things\nexpanded:\n  - stuff\n  - and\n  - things\n</code></pre></p>"},{"location":"providers/Strings/#join","title":"join","text":"<p>Joins a list of strings into a single string</p> <p><pre><code>compact-&gt;: join ['stuff','and','things']\nexpanded:\n  -&gt;: join\n  input:\n    - stuff\n    - and\n    - things\n  separator: -\n</code></pre> <pre><code>compact: stuff/and/things\nexpanded: stuff-and-things\n</code></pre></p>"},{"location":"providers/Strings/#random_string","title":"random_string","text":"<p>Creates a random string of letters and digits</p> <p><pre><code>compact-&gt;: random_string\nexpanded:\n  -&gt;: random_string\n  length: 4\n  case: upper\n</code></pre> <pre><code>compact: ab7dhfo0\nexpanded: AB7D\n</code></pre></p>"},{"location":"providers/Strings/#random_hex","title":"random_hex","text":"<p>Creates a random hex of letters and digits</p> <p><pre><code>compact-&gt;: random_hex 4\nexpanded:\n  -&gt;: random_hex\n  length: 4\n</code></pre> <pre><code>compact: a01f\nexpanded: a01f\n</code></pre></p>"},{"location":"providers/Strings/base64_decode/","title":"base64_decode","text":"<p>Source</p> <p>Hook for <code>base64_decode</code>. Base64 decodes a string.</p>"},{"location":"providers/Strings/base64_decode/#inputs","title":"Inputs","text":"Name Type Default Required Description input str True A string to decode."},{"location":"providers/Strings/base64_decode/#arguments","title":"Arguments","text":"Position Argument Type 1 input str"},{"location":"providers/Strings/base64_decode/#returns","title":"Returns","text":"<p><code>str</code></p>"},{"location":"providers/Strings/base64_encode/","title":"base64_encode","text":"<p>Source</p> <p>Hook for <code>base64_encode</code>. Base64 encodes a string.</p>"},{"location":"providers/Strings/base64_encode/#inputs","title":"Inputs","text":"Name Type Default Required Description input str True A string to encode."},{"location":"providers/Strings/base64_encode/#arguments","title":"Arguments","text":"Position Argument Type 1 input str"},{"location":"providers/Strings/base64_encode/#returns","title":"Returns","text":"<p><code>str</code></p>"},{"location":"providers/Strings/ends_with/","title":"ends_with","text":"<p>Source</p> <p>Hook checking if a string ends with another string.Docs</p>"},{"location":"providers/Strings/ends_with/#inputs","title":"Inputs","text":"Name Type Default Required Description input str True A string to check match str True The chars to match beg int None False This is the optional parameter to set start index of the matching boundary. end int None False This is the optional parameter to end start index of the matching boundary."},{"location":"providers/Strings/ends_with/#arguments","title":"Arguments","text":"Position Argument Type 1 input str 2 match str"},{"location":"providers/Strings/ends_with/#returns","title":"Returns","text":"<p><code>None</code></p>"},{"location":"providers/Strings/join/","title":"join","text":"<p>Source</p> <p>Join a list of strings with a separator.</p>"},{"location":"providers/Strings/join/#inputs","title":"Inputs","text":"Name Type Default Required Description input List[str int] True separator str True String separator."},{"location":"providers/Strings/join/#arguments","title":"Arguments","text":"Position Argument Type 1 input List[str 2 separator str"},{"location":"providers/Strings/join/#returns","title":"Returns","text":"<p><code>None</code></p>"},{"location":"providers/Strings/join/#examples","title":"Examples","text":""},{"location":"providers/Strings/join/#join_1","title":"join","text":"<p>Joins a list of strings into a single string <pre><code>compact-&gt;: join ['stuff','and','things']\nexpanded:\n  -&gt;: join\n  input:\n    - stuff\n    - and\n    - things\n  separator: -\n</code></pre></p> <pre><code>compact: stuff/and/things\nexpanded: stuff-and-things\n</code></pre>"},{"location":"providers/Strings/random_hex/","title":"random_hex","text":"<p>Source</p> <p>Hook  for <code>random_hex</code>. Lists the contents of a directory.</p>"},{"location":"providers/Strings/random_hex/#inputs","title":"Inputs","text":"Name Type Default Required Description length int 8 True Number for number of digits - default 8"},{"location":"providers/Strings/random_hex/#arguments","title":"Arguments","text":"Position Argument Type 1 length int"},{"location":"providers/Strings/random_hex/#returns","title":"Returns","text":"<p><code>str</code></p>"},{"location":"providers/Strings/random_hex/#examples","title":"Examples","text":""},{"location":"providers/Strings/random_hex/#random_hex_1","title":"random_hex","text":"<p>Creates a random hex of letters and digits <pre><code>compact-&gt;: random_hex 4\nexpanded:\n  -&gt;: random_hex\n  length: 4\n</code></pre></p> <pre><code>compact: a01f\nexpanded: a01f\n</code></pre>"},{"location":"providers/Strings/random_string/","title":"random_string","text":"<p>Source</p> <p>Hook for <code>random_string</code>. Lists the contents of a directory.</p>"},{"location":"providers/Strings/random_string/#inputs","title":"Inputs","text":"Name Type Default Required Description length int 8 True Length of the random string. case str lower True Case of output, one of <code>upper</code> or <code>lower</code> upper bool False True Flag for upper case. Overrides <code>case</code>."},{"location":"providers/Strings/random_string/#arguments","title":"Arguments","text":"Position Argument Type 1 length int 2 case str"},{"location":"providers/Strings/random_string/#returns","title":"Returns","text":"<p><code>str</code></p>"},{"location":"providers/Strings/random_string/#examples","title":"Examples","text":""},{"location":"providers/Strings/random_string/#random_string_1","title":"random_string","text":"<p>Creates a random string of letters and digits <pre><code>compact-&gt;: random_string\nexpanded:\n  -&gt;: random_string\n  length: 4\n  case: upper\n</code></pre></p> <pre><code>compact: ab7dhfo0\nexpanded: AB7D\n</code></pre>"},{"location":"providers/Strings/regex_match/","title":"regex_match","text":"<p>Source</p> <p>Hook running a regex against a string.Docs</p>"},{"location":"providers/Strings/regex_match/#inputs","title":"Inputs","text":"Name Type Default Required Description pattern str True A regex pattern to check. string str True A string to check."},{"location":"providers/Strings/regex_match/#arguments","title":"Arguments","text":"Position Argument Type 1 pattern str 2 string str"},{"location":"providers/Strings/regex_match/#returns","title":"Returns","text":"<p><code>None</code></p>"},{"location":"providers/Strings/split/","title":"split","text":"<p>Source</p> <p>Hook for splitting a string into as list based on a separator.</p>"},{"location":"providers/Strings/split/#inputs","title":"Inputs","text":"Name Type Default Required Description input str True A string to split into a list separator str / True String separator"},{"location":"providers/Strings/split/#arguments","title":"Arguments","text":"Position Argument Type 1 input str 2 separator str"},{"location":"providers/Strings/split/#returns","title":"Returns","text":"<p><code>None</code></p>"},{"location":"providers/Strings/split/#examples","title":"Examples","text":""},{"location":"providers/Strings/split/#split_1","title":"split","text":"<p>Splits a string into a list based on a separator <pre><code>compact-&gt;: split stuff-and-things -\nexpanded:\n  -&gt;: split\n  input: stuff-and-things\n  separator: \"-\"\n</code></pre></p> <pre><code>compact:\n  - stuff\n  - and\n  - things\nexpanded:\n  - stuff\n  - and\n  - things\n</code></pre>"},{"location":"providers/Strings/starts_with/","title":"starts_with","text":"<p>Source</p> <p>Hook checking if a string starts with another string.Docs</p>"},{"location":"providers/Strings/starts_with/#inputs","title":"Inputs","text":"Name Type Default Required Description input str True A string to check match str True The chars to match beg int None False This is the optional parameter to set start index of the matching boundary. end int None False This is the optional parameter to end start index of the matching boundary."},{"location":"providers/Strings/starts_with/#arguments","title":"Arguments","text":"Position Argument Type 1 input str 2 match str"},{"location":"providers/Strings/starts_with/#returns","title":"Returns","text":"<p><code>None</code></p>"},{"location":"providers/Tackle/","title":"Tackle Provider","text":"<p>Hooks that interface with tackle's parser. Core to most tackle scripts.</p>"},{"location":"providers/Tackle/#hooks","title":"Hooks","text":"Type Description Return block Hook for blocks of hooks. This is a special case where <code>items</code> are parsed like a normal context with the added benefit of maintaining a <code>temporary_context</code> so that items on the same level can be accessed in memory / rendered. Normally executed via a macro with an arrow. This the only hook the core parser is aware of as it is parsing. Union[dict, list] debug Hook for debugging that prints the output data and pauses runtime. NoneType exit Exit the parser with an exit code. NoneType import Hook for importing external tackle providers. Does not actually execute the base tackle in the provider but makes the hooks defined in the hooks directory available to be called. Takes any type as an argument to build <code>src</code> and <code>version</code> import targets. NoneType literal Literally return the input. Any run_hook Hook to run other hooks dynamically. Any tackle Hook for calling external tackle providers. dict var Hook for rendering a variable based on an input. Only useful for rendering as otherwise you wouldn't need this hook at all. Does recursion when the value being rendered is still renderable - ie a template within a template. Any"},{"location":"providers/Tackle/#examples","title":"Examples","text":""},{"location":"providers/Tackle/#debug","title":"debug","text":"<p>Hook to debug the context. Prints the context and holds the execution for user input.</p> <pre><code>d-&gt;: debug\n</code></pre>"},{"location":"providers/Tackle/#tackle","title":"tackle","text":"<p>Run other tackle providers / tackle files</p> <pre><code>compact_provider-&gt;: tackle robcxyz/tackle-provider\ncompact_file-&gt;: tackle path/to/tackle/file.yaml\nexpanded:\n  -&gt;: tackle\n  input_string: robcxyz/tackle-provider\n  checkout: dev  # Branch / version to checkout\n  context_file: path/to/file.yaml  # Path to a file within a remote provider\n  extra_context:  # Additional context to be brought in when running the tackle provider\n    stuff: things\n</code></pre>"},{"location":"providers/Tackle/#import","title":"import","text":"<p>Import other tackle providers to allow use of other hooks. Typically run privately - ie <code>_&gt;</code> to keep a clean context</p> <pre><code>compact_&gt;: import robcxyz/tackle-provider\nexpanded:\n  -&gt;: tackle\n  src: robcxyz/tackle-provider\n  version: dev  # Branch / version to checkout\n</code></pre>"},{"location":"providers/Tackle/#block","title":"block","text":"<p>Run a block of tackle calls so that logic methods (ie <code>if</code>, <code>for</code>) can be run on a group of keys. Block hooks are common so there is a macro form of this hook (ie no explicit hook call).</p> <pre><code>stuff: things\nmacro_version-&gt;:\n  if: stuff == 'things'\n  stuff-&gt;: print other_things\n  things-&gt;: print \"{{ stuff }}\" --if \"{{ stuff == 'things' }}\"\n\n# Equivalent to\nexpanded:\n  -&gt;: block\n  items:\n    merge: true\n    stuff-&gt;: print other_things\n    things-&gt;: print \"{{ stuff }}\" --if \"{{ stuff == 'things' }}\"\n</code></pre>"},{"location":"providers/Tackle/#var","title":"var","text":"<p>Hook to render a variable. <code>var</code> hooks are common so there is a macro form of this hook (ie no explicit hook call).</p> <pre><code>stuff: things\nmacro_version-&gt;: \"{{stuff}}\"  # Any hook call that starts with `{{` is considered a var hook\ncompact-&gt;: var \"{{stuff}}\"\nexpanded:\n  -&gt;: var\n  input: \"{{stuff}}\"\n  # input's are rendered recursively so this flag only does one level of rendering\n  # Useful when the input is itself a template and you don't want it to be rendered\n  no_recursion: true\n</code></pre>"},{"location":"providers/Tackle/#provider_docs","title":"provider_docs","text":"<p>Extract metadata about the provider</p> <pre><code>example:\n  type: provider_docs\n  chdir: \"..\"\n  provider: docs\n</code></pre>"},{"location":"providers/Tackle/block/","title":"block","text":"<p>Source</p> <p>Hook for blocks of hooks. This is a special case where <code>items</code> are parsed like a normal context with the added benefit of maintaining a <code>temporary_context</code> so that items on the same level can be accessed in memory / rendered. Normally executed via a macro with an arrow. This the only hook the core parser is aware of as it is parsing.</p>"},{"location":"providers/Tackle/block/#inputs","title":"Inputs","text":"Name Type Default Required Description items Union[dict, list] True Items to be parsed like a normal input."},{"location":"providers/Tackle/block/#returns","title":"Returns","text":"<p><code>Union[dict, list]</code></p>"},{"location":"providers/Tackle/block/#examples","title":"Examples","text":""},{"location":"providers/Tackle/block/#full-form","title":"Full form","text":"<p>This is the full form of block and generally is not advised. See short form example. <pre><code>stuff: things\nblock hook:\n  -&gt;: block\n  items:\n    stuff: other things\n    things-&gt;: var stuff --if \"{{ stuff == 'other things' }}\"\n</code></pre></p> <pre><code>stuff: things\nblock hook:\n  stuff: other things\n  things: more things\n</code></pre>"},{"location":"providers/Tackle/block/#short-form","title":"Short form","text":"<p>Because block hooks are so common, there is a macro that allows calling the hook without an expanded or compact form with simply writine an arrow. <pre><code>block hook-&gt;:\n  merge: true  # This merges the output up one level\n  stuff: other things\n  things-&gt;: var stuff\n</code></pre></p> <pre><code>stuff: other things\nthings: other things\n</code></pre>"},{"location":"providers/Tackle/debug/","title":"debug","text":"<p>Source</p> <p>Hook for debugging that prints the output data and pauses runtime.</p>"},{"location":"providers/Tackle/debug/#inputs","title":"Inputs","text":"Name Type Default Required Description key str None None False data str None False Which data to examine. One of <code>public</code>, <code>private</code>, <code>temporary</code>, or <code>existing</code>. Omit for all."},{"location":"providers/Tackle/debug/#arguments","title":"Arguments","text":"Position Argument Type 1 key str"},{"location":"providers/Tackle/debug/#returns","title":"Returns","text":"<p><code>NoneType</code></p>"},{"location":"providers/Tackle/exit/","title":"exit","text":"<p>Source</p> <p>Exit the parser with an exit code.</p>"},{"location":"providers/Tackle/exit/#inputs","title":"Inputs","text":"Name Type Default Required Description code int 0 True The exit code."},{"location":"providers/Tackle/exit/#arguments","title":"Arguments","text":"Position Argument Type 1 code int"},{"location":"providers/Tackle/exit/#returns","title":"Returns","text":"<p><code>NoneType</code></p>"},{"location":"providers/Tackle/import/","title":"import","text":"<p>Source</p> <p>Hook for importing external tackle providers. Does not actually execute the base tackle in the provider but makes the hooks defined in the hooks directory available to be called. Takes any type as an argument to build <code>src</code> and <code>version</code> import targets.</p>"},{"location":"providers/Tackle/import/#inputs","title":"Inputs","text":"Name Type Default Required Description src str list True version str None False Version of src for remote imports. latest bool None False Flag to pull latest version."},{"location":"providers/Tackle/import/#arguments","title":"Arguments","text":"Position Argument Type 1 src str"},{"location":"providers/Tackle/import/#returns","title":"Returns","text":"<p><code>NoneType</code></p>"},{"location":"providers/Tackle/literal/","title":"literal","text":"<p>Source</p> <p>Literally return the input.</p>"},{"location":"providers/Tackle/literal/#inputs","title":"Inputs","text":"Name Type Default Required Description input Any True Any variable input."},{"location":"providers/Tackle/literal/#arguments","title":"Arguments","text":"Position Argument Type 1 input Any"},{"location":"providers/Tackle/literal/#returns","title":"Returns","text":"<p><code>Any</code></p>"},{"location":"providers/Tackle/run_hook/","title":"run_hook","text":"<p>Source</p> <p>Hook to run other hooks dynamically.</p>"},{"location":"providers/Tackle/run_hook/#inputs","title":"Inputs","text":"Name Type Default Required Description hook str True The name of the hook to run. hook_dict dict None False A dict of keys to use with the hook."},{"location":"providers/Tackle/run_hook/#arguments","title":"Arguments","text":"Position Argument Type 1 hook str 2 hook_dict dict"},{"location":"providers/Tackle/run_hook/#returns","title":"Returns","text":"<p><code>Any</code></p>"},{"location":"providers/Tackle/tackle/","title":"tackle","text":"<p>Source</p> <p>Hook for calling external tackle providers.</p>"},{"location":"providers/Tackle/tackle/#inputs","title":"Inputs","text":"Name Type Default Required Description input_arg str None False The input can be one of repo, file path, directory with tackle.yaml, zip file, or if left blank parent tackle file. checkout str None False The branch or version to checkout for repo type inputs_strings. no_input bool None False A boolean for if you want to suppress prompt inputs. latest bool False True For remote providers, use the latest commit. context_file str None False The file to run inside a repo input. extra_context dict None False Any additional context to use when calling the hook. Like existing context. password SecretStr None False A password to use for repo inputs. directory str None False The directory to run inside for repo inputs. find_in_parent bool False True Search for target in parent directory. Only relevant for local targets. override dict {} True A dictionary of keys to override. additional_args Union[list, Any] [] True Arguments to pass on either directly as a string or as a list of strings."},{"location":"providers/Tackle/tackle/#arguments","title":"Arguments","text":"Position Argument Type 1 input_arg str 2 additional_args Union[list, Any]"},{"location":"providers/Tackle/tackle/#returns","title":"Returns","text":"<p><code>dict | list</code></p>"},{"location":"providers/Tackle/tackle/#examples","title":"Examples","text":""},{"location":"providers/Tackle/tackle/#basic","title":"Basic","text":"<p>The most minimal implementation. Call is same as how you would call tackle from command line. <pre><code>example-&gt;: tackle path/to/dir/or/github\n</code></pre></p>"},{"location":"providers/Tackle/tackle/#with-context","title":"With context","text":"<p>Sometimes you want to ship a specific context in when calling the other tackle. <pre><code>example:\n  -&gt;: tackle path/to/dir/or/github\n  extra_context:\n    stuff: things\n</code></pre></p>"},{"location":"providers/Tackle/tackle/#remote-providers","title":"Remote providers","text":"<p>Providers are often remote so additional parameters are relevant in this setting. <pre><code>example:\n  -&gt;: tackle\n  input_string: robcxyz/tackle-provider\n  checkout: dev  # Branch / version to checkout\n  context_file: path/to/file.yaml  # Path to a file within a remote provider\n</code></pre></p>"},{"location":"providers/Tackle/var/","title":"var","text":"<p>Source</p> <p>Hook for rendering a variable based on an input. Only useful for rendering as otherwise you wouldn't need this hook at all. Does recursion when the value being rendered is still renderable - ie a template within a template.</p>"},{"location":"providers/Tackle/var/#inputs","title":"Inputs","text":"Name Type Default Required Description input Any True Any variable input. no_recursion bool False True Don't recursively render embedded templates."},{"location":"providers/Tackle/var/#arguments","title":"Arguments","text":"Position Argument Type 1 input Any"},{"location":"providers/Tackle/var/#returns","title":"Returns","text":"<p><code>Any</code></p>"},{"location":"providers/Toml/","title":"TOML Provider","text":"<p>Reading toml files. For writing toml you will need a third party provider since this wraps python's native toml library which only supports reads.</p>"},{"location":"providers/Toml/#hooks","title":"Hooks","text":"Type Description Return toml Hook for reading TOML. Wraps python's native toml library which does not support writing toml, only reading. Union[dict, str] toml_decode Hook for decoding a TOML string to a dict. dict"},{"location":"providers/Toml/#examples","title":"Examples","text":""},{"location":"providers/Toml/#toml","title":"toml","text":"<p>Read a toml file into a key</p> <pre><code>expanded:\n  -&gt;: toml\n  path: path/to/toml/file.toml\ncompact-&gt;: toml path/to/toml/file.toml\n</code></pre>"},{"location":"providers/Toml/toml/","title":"toml","text":"<p>Source</p> <p>Hook for reading TOML. Wraps python's native toml library which does not support writing toml, only reading.</p>"},{"location":"providers/Toml/toml/#inputs","title":"Inputs","text":"Name Type Default Required Description path str True The file path to read or write to."},{"location":"providers/Toml/toml/#arguments","title":"Arguments","text":"Position Argument Type 1 path str"},{"location":"providers/Toml/toml/#returns","title":"Returns","text":"<p><code>Union[dict, str]</code></p>"},{"location":"providers/Toml/toml/#examples","title":"Examples","text":""},{"location":"providers/Toml/toml/#read-toml","title":"Read toml","text":"<p>Read a toml file into a key <pre><code>expanded:\n  -&gt;: toml\n  path: path/to/toml/file.toml\ncompact-&gt;: toml path/to/toml/file.toml\n</code></pre></p>"},{"location":"providers/Toml/toml_decode/","title":"toml_decode","text":"<p>Source</p> <p>Hook for decoding a TOML string to a dict.</p>"},{"location":"providers/Toml/toml_decode/#inputs","title":"Inputs","text":"Name Type Default Required Description data str True TOML string to convert to dict."},{"location":"providers/Toml/toml_decode/#arguments","title":"Arguments","text":"Position Argument Type 1 data str"},{"location":"providers/Toml/toml_decode/#returns","title":"Returns","text":"<p><code>dict</code></p>"},{"location":"providers/Types/","title":"Types Provider","text":"<p>Hooks for getting and setting a variable's type.</p>"},{"location":"providers/Types/#hooks","title":"Hooks","text":"Type Description Return bool Hook for casting a variable to a bool type. bool float Hook for casting a variable to a float type. float hex Hook for changing an int to a hexidecimal. hex int Hook for casting a variable to an integer type. int str Hook for casting a variable to a string type. str type Hook for getting the type of a variable. str"},{"location":"providers/Types/#examples","title":"Examples","text":""},{"location":"providers/Types/#type","title":"type","text":"<p>Hook to get type of variable.</p> <p><pre><code>stuff: things\nmap:\n  stuff: things\nstuff_type-&gt;: type stuff  # rendered by default\nmap_type-&gt;: type map\n</code></pre> <pre><code>stuff: things\nmap:\n  stuff: things\nstuff_type: str\nmap_type: dict\n</code></pre></p>"},{"location":"providers/Types/bool/","title":"bool","text":"<p>Source</p> <p>Hook for casting a variable to a bool type.</p>"},{"location":"providers/Types/bool/#inputs","title":"Inputs","text":"Name Type Default Required Description input Any True Any variable input."},{"location":"providers/Types/bool/#arguments","title":"Arguments","text":"Position Argument Type 1 input Any"},{"location":"providers/Types/bool/#returns","title":"Returns","text":"<p><code>bool</code></p>"},{"location":"providers/Types/float/","title":"float","text":"<p>Source</p> <p>Hook for casting a variable to a float type.</p>"},{"location":"providers/Types/float/#inputs","title":"Inputs","text":"Name Type Default Required Description input Any True Any variable input."},{"location":"providers/Types/float/#arguments","title":"Arguments","text":"Position Argument Type 1 input Any"},{"location":"providers/Types/float/#returns","title":"Returns","text":"<p><code>float</code></p>"},{"location":"providers/Types/hex/","title":"hex","text":"<p>Source</p> <p>Hook for changing an int to a hexidecimal.</p>"},{"location":"providers/Types/hex/#inputs","title":"Inputs","text":"Name Type Default Required Description input int True Any variable input."},{"location":"providers/Types/hex/#arguments","title":"Arguments","text":"Position Argument Type 1 input int"},{"location":"providers/Types/hex/#returns","title":"Returns","text":"<p><code>hex</code></p>"},{"location":"providers/Types/int/","title":"int","text":"<p>Source</p> <p>Hook for casting a variable to an integer type.</p>"},{"location":"providers/Types/int/#inputs","title":"Inputs","text":"Name Type Default Required Description input Any True Any variable input."},{"location":"providers/Types/int/#arguments","title":"Arguments","text":"Position Argument Type 1 input Any"},{"location":"providers/Types/int/#returns","title":"Returns","text":"<p><code>int</code></p>"},{"location":"providers/Types/str/","title":"str","text":"<p>Source</p> <p>Hook for casting a variable to a string type.</p>"},{"location":"providers/Types/str/#inputs","title":"Inputs","text":"Name Type Default Required Description input Any True Any variable input."},{"location":"providers/Types/str/#arguments","title":"Arguments","text":"Position Argument Type 1 input Any"},{"location":"providers/Types/str/#returns","title":"Returns","text":"<p><code>str</code></p>"},{"location":"providers/Types/type/","title":"type","text":"<p>Source</p> <p>Hook for getting the type of a variable.</p>"},{"location":"providers/Types/type/#inputs","title":"Inputs","text":"Name Type Default Required Description input Any True Any variable input."},{"location":"providers/Types/type/#arguments","title":"Arguments","text":"Position Argument Type 1 input Any"},{"location":"providers/Types/type/#returns","title":"Returns","text":"<p><code>str</code></p>"},{"location":"providers/Types/type/#examples","title":"Examples","text":"<p>Simple example. <pre><code>stuff: things\nmap:\n  stuff: things\nstuff_type-&gt;: type stuff  # rendered by default\nmap_type-&gt;: type map\n</code></pre></p> <pre><code>stuff: things\nmap:\n  stuff: things\nstuff_type: str\nmap_type: dict\n</code></pre>"},{"location":"providers/Web/","title":"Web Provider","text":"<p>Allows access to web resources such as http requests and opening a web browser to a url. Wraps functionality of python requests library.</p>"},{"location":"providers/Web/#hooks","title":"Hooks","text":"Type Description Return http_delete Hook for Requests 'delete' type prompts.Link None http_get Hook for Requests 'get' type prompts.Link dict http_patch Hook for Requests 'patch' type prompts.Link None http_post Hook for Requests 'post' type prompts.Link dict http_put Hook for Requests 'put' type prompts.Link None webbrowser Open a web browser. Wraps python's webbrowser module. None"},{"location":"providers/Web/#requirements","title":"Requirements","text":"<ul> <li>requests</li> </ul>"},{"location":"providers/Web/#examples","title":"Examples","text":""},{"location":"providers/Web/#webbrowser","title":"webbrowser","text":"<p>Open a web browser. Wraps python's webbrowser module.</p> <pre><code>compact-&gt;: http_get https://httpbin.org/get\n</code></pre>"},{"location":"providers/Web/#http_get","title":"http_get","text":"<p>Make get request and store output in key</p> <pre><code>compact-&gt;: http_get https://httpbin.org/get\n</code></pre>"},{"location":"providers/Web/#http_put","title":"http_put","text":"<p>Make put request and store output in key</p> <pre><code>input_json:\n  stuff: things\n\ncompact-&gt;: http_post https://httpbin.org/post --json input_json\n\nexpanded:\n  -&gt;: http_post\n  url: https://httpbin.org/post\n  json:\n    stuff: things\n</code></pre>"},{"location":"providers/Web/#http_post","title":"http_post","text":"<p>Make post request and store output in key</p> <pre><code>input_json:\n  stuff: things\n\ncompact-&gt;: http_post https://httpbin.org/post --json input_json\n\nexpanded:\n  -&gt;: http_post\n  url: https://httpbin.org/post\n  json:\n    stuff: things\n</code></pre>"},{"location":"providers/Web/#http_delete","title":"http_delete","text":"<p>Make delete request and store response code in key</p> <pre><code>compact-&gt;: http_delete https://httpbin.org/delete\nexpanded:\n  -&gt;: http_delete\n  url: https://httpbin.org/delete\n</code></pre>"},{"location":"providers/Web/#http_patch","title":"http_patch","text":"<p>Make patch request and store response code in key</p> <pre><code>input_json:\n  stuff: things\n\ncompact-&gt;: http_patch https://httpbin.org/patch --json input_json\n\nexpanded:\n  -&gt;: http_patch\n  url: https://httpbin.org/patch\n  json:\n    stuff: things\n</code></pre>"},{"location":"providers/Web/http_delete/","title":"http_delete","text":"<p>Source</p> <p>Hook for Requests 'delete' type prompts.Link</p>"},{"location":"providers/Web/http_delete/#inputs","title":"Inputs","text":"Name Type Default Required Description username str None False password str None False url str True URL for the new request object. extra_kwargs Union[str, dict] {} True Optional arguments that request takes. no_exit bool False True Whether to exit on non-200 response."},{"location":"providers/Web/http_delete/#arguments","title":"Arguments","text":"Position Argument Type 1 url str 2 kwargs str"},{"location":"providers/Web/http_delete/#returns","title":"Returns","text":"<p><code>None</code></p>"},{"location":"providers/Web/http_delete/#examples","title":"Examples","text":"<p>Make delete request and store response code in key <pre><code>compact-&gt;: http_delete https://httpbin.org/delete\nexpanded:\n  -&gt;: http_delete\n  url: https://httpbin.org/delete\n</code></pre></p>"},{"location":"providers/Web/http_get/","title":"http_get","text":"<p>Source</p> <p>Hook for Requests 'get' type prompts.Link</p>"},{"location":"providers/Web/http_get/#inputs","title":"Inputs","text":"Name Type Default Required Description username str None False password str None False url str True URL for the new request object. headers dict None False Headers to include in request. extra_kwargs Union[str, dict] {} True Optional arguments that request takes. params dict None False Dictionary, list of tuples or bytes to send in the query string for the Request. no_exit bool False True Whether to exit on non-200 response. encoding str utf-8 True For text/plain type return values, the encoding of the type."},{"location":"providers/Web/http_get/#arguments","title":"Arguments","text":"Position Argument Type 1 url str 2 kwargs str 3 params dict"},{"location":"providers/Web/http_get/#returns","title":"Returns","text":"<p><code>dict</code></p>"},{"location":"providers/Web/http_get/#examples","title":"Examples","text":"<p>Make get request and store output in key <pre><code>compact-&gt;: http_get https://httpbin.org/get\n</code></pre></p>"},{"location":"providers/Web/http_patch/","title":"http_patch","text":"<p>Source</p> <p>Hook for Requests 'patch' type prompts.Link</p>"},{"location":"providers/Web/http_patch/#inputs","title":"Inputs","text":"Name Type Default Required Description username str None False password str None False url str True URL for the new request object. extra_kwargs Union[str, dict] {} True Optional arguments that request takes. headers dict None False Headers to include in request. data Any None False Dictionary, list of tuples, bytes, or file-like object to send in the body of the Request. no_exit bool False True Whether to exit on non-200 response."},{"location":"providers/Web/http_patch/#arguments","title":"Arguments","text":"Position Argument Type 1 url str 2 data Any"},{"location":"providers/Web/http_patch/#returns","title":"Returns","text":"<p><code>None</code></p>"},{"location":"providers/Web/http_patch/#examples","title":"Examples","text":"<p>Make patch request and store response code in key <pre><code>input_json:\n  stuff: things\n\ncompact-&gt;: http_patch https://httpbin.org/patch --json input_json\n\nexpanded:\n  -&gt;: http_patch\n  url: https://httpbin.org/patch\n  json:\n    stuff: things\n</code></pre></p>"},{"location":"providers/Web/http_post/","title":"http_post","text":"<p>Source</p> <p>Hook for Requests 'post' type prompts.Link</p>"},{"location":"providers/Web/http_post/#inputs","title":"Inputs","text":"Name Type Default Required Description username str None False password str None False url str True URL for the new request object. headers dict None False Headers to include in request. extra_kwargs Union[str, dict] {} True Optional arguments that request takes. data Any None False Dictionary, list of tuples, bytes, or file-like object to send in the body of the Request. no_exit bool False True Whether to exit on non-200 response."},{"location":"providers/Web/http_post/#arguments","title":"Arguments","text":"Position Argument Type 1 url str 2 data Any 3 kwargs str"},{"location":"providers/Web/http_post/#returns","title":"Returns","text":"<p><code>dict</code></p>"},{"location":"providers/Web/http_post/#examples","title":"Examples","text":"<p>Make post request and store output in key <pre><code>input_json:\n  stuff: things\n\ncompact-&gt;: http_post https://httpbin.org/post --json input_json\n\nexpanded:\n  -&gt;: http_post\n  url: https://httpbin.org/post\n  json:\n    stuff: things\n</code></pre></p>"},{"location":"providers/Web/http_put/","title":"http_put","text":"<p>Source</p> <p>Hook for Requests 'put' type prompts.Link</p>"},{"location":"providers/Web/http_put/#inputs","title":"Inputs","text":"Name Type Default Required Description username str None False password str None False url str True URL for the new request object. extra_kwargs Union[str, dict] {} True Optional arguments that request takes. data Any None False Dictionary, list of tuples, bytes, or file-like object to send in the body of the Request. no_exit bool False True Whether to exit on non-200 response."},{"location":"providers/Web/http_put/#arguments","title":"Arguments","text":"Position Argument Type 1 url str 2 data Any 3 kwargs str"},{"location":"providers/Web/http_put/#returns","title":"Returns","text":"<p><code>None</code></p>"},{"location":"providers/Web/http_put/#examples","title":"Examples","text":"<p>Make put request and store output in key <pre><code>input_json:\n  stuff: things\n\ncompact-&gt;: http_post https://httpbin.org/post --json input_json\n\nexpanded:\n  -&gt;: http_post\n  url: https://httpbin.org/post\n  json:\n    stuff: things\n</code></pre></p>"},{"location":"providers/Web/webbrowser/","title":"webbrowser","text":"<p>Source</p> <p>Open a web browser. Wraps python's webbrowser module.</p>"},{"location":"providers/Web/webbrowser/#inputs","title":"Inputs","text":"Name Type Default Required Description url str True String url to open in browser. new int 0 True If new is 1, a new browser window is opened if possible. If new is 2, a new browser page (\u201ctab\u201d) is opened if possible. autoraise bool True True If autoraise is True, the window is raised if possible (note that under many window managers this will occur regardless of the setting of this variable)."},{"location":"providers/Web/webbrowser/#arguments","title":"Arguments","text":"Position Argument Type 1 url str"},{"location":"providers/Web/webbrowser/#returns","title":"Returns","text":"<p><code>None</code></p>"},{"location":"providers/Web/webbrowser/#examples","title":"Examples","text":"<p>Open a web browser. Wraps python's webbrowser module. <pre><code>open browser_&gt;: webbrowser https://robc.xyz\n</code></pre></p>"},{"location":"providers/Yaml/","title":"YAML Provider","text":"<p>Wraps yaml library to read and write yaml.</p>"},{"location":"providers/Yaml/#hooks","title":"Hooks","text":"Type Description Return yaml Hook for reading and writing yaml. Hook reads from <code>path</code> if no <code>data</code> field is provided, otherwise it writes the <code>data</code> to <code>path</code>. Union[dict, str] yaml_decode Hook for decoding a yaml string to a dict. dict yaml_encode Hook for converting a dict to a yaml encoded string. str yaml_in_place Hook for modifying a yaml in place (ie read, transform, and write back to the file in one operation). WIP -&gt; https://github.com/sudoblockio/tackle/issues/100. Union[str, dict]"},{"location":"providers/Yaml/#examples","title":"Examples","text":""},{"location":"providers/Yaml/#read-yaml","title":"Read yaml","text":"<p>Read a yaml file into a key</p> <pre><code>compact-&gt;: yaml path/to/file.yaml\nexpanded:\n  -&gt;: yaml\n  path: path/to/file.yaml\n</code></pre>"},{"location":"providers/Yaml/#write-yaml","title":"Write yaml","text":"<p>Read a yaml file into a key</p> <pre><code>stuff:\n  and: things\ncompact-&gt;: yaml path/to/file.yaml \"{{stuff}}\"\nexpanded:\n  -&gt;: yaml\n  path: path/to/file.yaml\n  contents: \"{{ stuff }}\"\n</code></pre>"},{"location":"providers/Yaml/yaml/","title":"yaml","text":"<p>Source</p> <p>Hook for reading and writing yaml. Hook reads from <code>path</code> if no <code>data</code> field is provided, otherwise it writes the <code>data</code> to <code>path</code>.</p>"},{"location":"providers/Yaml/yaml/#inputs","title":"Inputs","text":"Name Type Default Required Description path str True The file path to put read or write to. data Union[dict, list, str] None False Map/list or renderable string to a map/list key to write."},{"location":"providers/Yaml/yaml/#arguments","title":"Arguments","text":"Position Argument Type 1 path str 2 data Union[dict, list, str]"},{"location":"providers/Yaml/yaml/#returns","title":"Returns","text":"<p><code>Union[dict, str]</code></p>"},{"location":"providers/Yaml/yaml/#examples","title":"Examples","text":""},{"location":"providers/Yaml/yaml/#read-yaml","title":"Read yaml","text":"<p>Read a yaml file into a key <pre><code>compact-&gt;: yaml path/to/file.yaml\nexpanded:\n  -&gt;: yaml\n  path: path/to/file.yaml\n</code></pre></p>"},{"location":"providers/Yaml/yaml/#write-yaml","title":"Write yaml","text":"<p>Read a yaml file into a key <pre><code>stuff:\n  and: things\ncompact-&gt;: yaml path/to/file.yaml \"{{stuff}}\"\nexpanded:\n  -&gt;: yaml\n  path: path/to/file.yaml\n  contents: \"{{ stuff }}\"\n</code></pre></p>"},{"location":"providers/Yaml/yaml_decode/","title":"yaml_decode","text":"<p>Source</p> <p>Hook for decoding a yaml string to a dict.</p>"},{"location":"providers/Yaml/yaml_decode/#inputs","title":"Inputs","text":"Name Type Default Required Description data str True Yaml string to convert to dict."},{"location":"providers/Yaml/yaml_decode/#arguments","title":"Arguments","text":"Position Argument Type 1 data str"},{"location":"providers/Yaml/yaml_decode/#returns","title":"Returns","text":"<p><code>dict</code></p>"},{"location":"providers/Yaml/yaml_encode/","title":"yaml_encode","text":"<p>Source</p> <p>Hook for converting a dict to a yaml encoded string.</p>"},{"location":"providers/Yaml/yaml_encode/#inputs","title":"Inputs","text":"Name Type Default Required Description data Union[dict, list, str] True Map/list or renderable string to data to convert to yaml string."},{"location":"providers/Yaml/yaml_encode/#arguments","title":"Arguments","text":"Position Argument Type 1 data Union[dict, list, str]"},{"location":"providers/Yaml/yaml_encode/#returns","title":"Returns","text":"<p><code>str</code></p>"},{"location":"providers/Yaml/yaml_in_place/","title":"yaml_in_place","text":"<p>Source</p> <p>Hook for modifying a yaml in place (ie read, transform, and write back to the file in one operation). WIP -&gt; https://github.com/sudoblockio/tackle/issues/100.</p>"},{"location":"providers/Yaml/yaml_in_place/#inputs","title":"Inputs","text":"Name Type Default Required Description path str True The file path to put read or write to. remove Union[List, str] None False Parameter or regex to remove from list or dict. contents Union[Dict, List] None False Supplied dictionary or list to write. update Dict None False Use the python <code>update</code> dict method on <code>contents</code> before writing filter List None False List or string to values to. merge_dict dict None False Dict input that recursively overwrites the <code>contents</code>. in_place bool False True Boolean to read the contents of the <code>path</code> and then write after modifications. append_items Union[Dict, str, List[Any]] None False List to append to <code>append_key</code> key. append_keys Union[Dict, str, List[Any]] None False String or list of hierarchical keys to append item to. Defaults mode str None False The mode that the file should write. Defaults to write 'w'. See https://docs.python.org/3/library/functions.html#open write bool None False"},{"location":"providers/Yaml/yaml_in_place/#arguments","title":"Arguments","text":"Position Argument Type 1 path str 2 contents Union[Dict, List]"},{"location":"providers/Yaml/yaml_in_place/#returns","title":"Returns","text":"<p><code>Union[str, dict]</code></p>"},{"location":"providers/Yaml/yaml_in_place/#examples","title":"Examples","text":"<p>Update keys in a yaml file <pre><code>update a key in output.yaml:\n  _&gt;: yaml_in_place output.yaml --in_place\n  update:\n    key-to-update:\n      stuff: things\n</code></pre></p> <p>Filter out items in a list <pre><code>things:\n  - stuff\n  - things\n  - _stuff\n  - _thing\n  - _foo\n  - bar_\n\nout:\n  -&gt;: yaml_in_place\n  contents: \"{{ things }}\"\n  path: output.yaml\n  remove:\n   - ^_\n   - _$\n</code></pre></p> <pre><code># output.yaml -&gt; just a list\n- stuff\n- things\n</code></pre>"},{"location":"tour/fizzbuzz/","title":"tackle fizzbuzz","text":"<p>If you are not familiar with fizzbuzz, it is one of the most basic / prolific programming interview questions with the following requirements:</p> <ul> <li>Write a function that takes an integer input</li> <li>Print <code>fizz</code> if divisible by 3</li> <li>Print <code>buzz</code> if divisible by 5</li> <li>Print the number if it is not divisible by either 3 or 5</li> <li>Thus for numbers like 15, we would print out <code>fizzbuzz</code></li> </ul> <p>Solving this problem many ways in tackle demonstrates some of tackle's flow control mechanisms.</p>"},{"location":"tour/fizzbuzz/#solutions","title":"Solutions","text":"<ul> <li>Simple conditionals</li> <li>List of conditionals</li> <li>Loop of conditionals</li> <li>Match case</li> <li>Appending to a list</li> <li>Validator</li> </ul>"},{"location":"tour/fizzbuzz/#examples","title":"Examples","text":""},{"location":"tour/fizzbuzz/#simple-conditionals","title":"Simple conditionals","text":"<p>Here we can see simple conditional statements being run both as a single line and expanded over multiple lines.</p> <pre><code>(input int)&lt;-:\n  fizz-&gt;: print fizz --if \"input % 3 == 0\"\n  buzz-&gt;: print buzz --if \"input % 5 == 0\"\n  non-fizz:\n    -&gt;: print {{input}}\n    if: \"'fizz' not in this and 'buzz' not in this\"\n</code></pre>"},{"location":"tour/fizzbuzz/#list-of-conditionals","title":"List of conditionals","text":"<p>When tackle parses a list it can do a conditional on each item and then reference itself</p> <pre><code>(input int)&lt;-:\n  output:\n    - -&gt;: print fizz --if \"input % 3 == 0\"\n    - -&gt;: print buzz --if \"input % 5 == 0\"\n    - -&gt;: print {{input}} --if output|length==0\n</code></pre>"},{"location":"tour/fizzbuzz/#loop-of-conditionals","title":"Loop of conditionals","text":"<p>Here we have a list of objects which we can loop over and then use within a</p> <pre><code>(input int)&lt;-:\n  values:\n    - modulo: 3\n      output: fizz\n    - modulo: 5\n      output: buzz\n  fizzbuzz-&gt;: print {{i.output}} --for i in values --if input%i.modulo==0\n  input_print-&gt;: print {{input}} --if not fizzbuzz\n</code></pre>"},{"location":"tour/fizzbuzz/#match-case","title":"Match case","text":"<p>Tackle has a match hook which can have keys rendered in order to support cascading conditionals</p> <pre><code>&lt;-:\n  input: int\n  args: ['input']\n  exec:\n    -&gt;: match\n    case:\n      \"{{input % 15 == 0}}-&gt;\": print fizzbuzz\n      \"{{input % 3 == 0}}-&gt;\": print fizz\n      \"{{input % 5 == 0}}-&gt;\": print buzz\n      _-&gt;: print {{input}}\n</code></pre>"},{"location":"tour/fizzbuzz/#appending-to-a-list","title":"Appending to a list","text":"<p>Here we can see a list <code>output</code> being declared which can then be appended to before printing the output with a conditional</p> <pre><code>(input int)&lt;-:\n  output: [ ]\n  fizz-&gt;: append output fizz --if \"input % 3 == 0\"\n  buzz-&gt;: append output buzz --if \"input % 5 == 0\"\n  out-&gt;: print \"{{join(output)}}\" --if output|length!=0 --else {{print(input)}}\n</code></pre>"},{"location":"tour/fizzbuzz/#validator","title":"Validator","text":"<p>Logic can be embedded on creation of a field in a hook through a validator which can also check against other fields</p> <pre><code>&lt;-:\n  input:\n    type: Union[int, str]\n    validator:\n      fizzbuzz-&gt;: returns fizzbuzz --if \"v % 15 == 0\"\n      fizz-&gt;: returns fizz --if \"v % 3 == 0\"\n      buzz-&gt;: returns buzz --if v%5==0\n      non-fizz-&gt;: return {{v}}\n  args: ['input']\n  exec:\n    -&gt;: print {{input}}\n</code></pre>"},{"location":"tour/fizzbuzz/TODO/","title":"TODO","text":"<ul> <li>else-if.yaml</li> <li> </li> </ul>"},{"location":"tour/fizzbuzz/TODO/#this-syntax-has-not-been-finalized-yet","title":"This syntax has not been finalized yet","text":""},{"location":"tour/hello-world/hello-worlds/","title":"Hello Worlds!","text":"<p>The following is a collection of hello worlds ranging from simple to contrived that demonstrate the core aspects of writing tackle files.</p> <ul> <li>Single line print</li> <li>Print with variables</li> <li>Interactive prompts</li> <li>Loops and conditionals</li> <li>Manipulating context</li> <li>Public vs private hooks</li> <li>Python hooks</li> <li>Declarative hooks</li> <li>Declarative hook methods</li> <li>Strongly typed declarative hooks</li> <li>Declarative hooks inheritance</li> <li>Calling other tackle files</li> </ul> <p>Future hello worlds</p> <ul> <li>Inheriting from schemas like openapi</li> <li>Declarative CLI help screens</li> </ul>"},{"location":"tour/hello-world/hello-worlds/#running-the-hello-world-demo","title":"Running the <code>Hello world!</code> demo","text":"<p>Locally + Copy / Paste You can create a file <code>hello.yaml</code> and paste in the following or you can run some of these examples in tackle.</p> <pre><code>tackle robcxyz/tackle-hello-world\n</code></pre>"},{"location":"tour/hello-world/hello-worlds/#single-line-print","title":"Single line print","text":"<p>Simply use the print hook. <pre><code>hw-&gt;: print Hello world!\n</code></pre></p> <p>Anytime a key is suffixed with an arrow going to the right, it means the key is calling a hook, in this case a print hook.</p>"},{"location":"tour/hello-world/hello-worlds/#print-with-variables","title":"Print with variables","text":"<p>Using jinja templating, the print hook can be called in three different ways using a variable. <pre><code>words: Hello world!\nexpanded:\n  -&gt;: print\n  objects: \"{{words}}\"\ncompact-&gt;: print {{words}}\njinja_extension-&gt;: \"{{ print(words) }}\"\n# Or combinations of the above\n</code></pre></p> <p>Note that key with arrow without an explicit hook is simply rendered</p>"},{"location":"tour/hello-world/hello-worlds/#interactive-prompts","title":"Interactive prompts","text":"<p>There are several types of prompt hooks which can also be used.</p> <pre><code>name-&gt;: input\ntarget:\n  -&gt;: select Say hi to who?\n  choices:\n    - world\n    - universe\nhello-&gt;: print My name is {{name}}. Hello {{target}}!\n</code></pre> <p>Which looks like this before printing.</p> <pre><code>? name &gt;&gt;&gt; Rob\n? Say hi to who?\n\u276f world\n  universe\n</code></pre>"},{"location":"tour/hello-world/hello-worlds/#loops-and-conditionals","title":"Loops and conditionals","text":"<p>Hooks can have loops, conditionals, and other base methods. <pre><code>words:\n  - Hello\n  - cruel\n  - world!\nexpanded:\n  -&gt;: print {{item}}\n  for: words\n  if: item != 'cruel'\ncompact-&gt;: print {{item}} --for words --if \"item != 'cruel'\"\n</code></pre></p>"},{"location":"tour/hello-world/hello-worlds/#manipulating-context","title":"Manipulating context","text":"<p>Hooks can manipulate the context with the context provider so using the preceding example, instead of doing a list comprehension we can instead remove the second element using the pop hook.</p> <pre><code>words:\n  - Hello\n  - cruel\n  - world!\nrm cruel-&gt;: pop words 1\nexpanded:\n  -&gt;: print {{item}}\n  for: words\ncompact-&gt;: print {{item}} --for words\n</code></pre>"},{"location":"tour/hello-world/hello-worlds/#blocks-of-context","title":"Blocks of context","text":"<p>Sometimes it is convenient to declare a group of logic that contains the base methods like in this case <code>for</code>.</p> <pre><code>words:\n  - Hello\n  - world!\na-block-&gt;:\n  for: words\n  h-&gt;: print {{item}} --if \"index == 0\"\n  w-&gt;: print {{item}} --if \"index == 1\"\n</code></pre> <p>Blocks are simply any key ending with an <code>-&gt;</code> with a map as the value. In this case we also see that within <code>for</code> loops, the iterand is also tracked via the <code>index</code> variable.</p>"},{"location":"tour/hello-world/hello-worlds/#public-vs-private-hooks","title":"Public vs private hooks","text":"<p>Hooks can have both public and private access modifiers which inform whether the hooks value is exported outside of the tackle file / function.</p> <p>For instance running with the <code>--print</code> or <code>-p</code> flags, (ie <code>tackle hello.yaml -p</code>), only the public context would be exported.</p> <p>Input <pre><code>words_&gt;:\n  - Hello\n  - world!\noutput-&gt;: var {{item}} --for words\n</code></pre> Output <pre><code>output:\n  - Hello\n  - world!\n</code></pre></p> <p>You can still use the output of a private hook but only within the tackle file that it is being called. By default, the public context moves with the call between tackle files.</p>"},{"location":"tour/hello-world/hello-worlds/#python-hooks","title":"Python hooks","text":"<p>Hooks can be written in python. Simply add your code to a <code>hooks</code> directory and the hook will be available to be called from a tackle file.</p> <pre><code>from tackle import BaseHook\n\n\nclass Greeter(BaseHook):\n    hook_name: str = \"greeter\"\n    target: str\n    args: list = ['target']\n\n    def exec(self):\n        print(f\"Hello {self.target}\")\n</code></pre>"},{"location":"tour/hello-world/hello-worlds/#declarative-hooks","title":"Declarative hooks","text":"<p>Hooks can be declaratively created with tackle. Arrows going to the left are basically reusable functions / methods.</p> <pre><code>greeter&lt;-:\n  target: str\n  args: ['target']\n  exec&lt;-:\n    hi-&gt;: print Hello {{target}}\n</code></pre> <p>Both python and declarative hooks can be called in the same way. <pre><code>hello: world!\ncompact-&gt;: greeter {{hello}}\nexpanded:\n  -&gt;: greeter\n  target: \"{{hello}}\"\njinja_extension-&gt;: \"{{ greeter(hello) }}\"\njinja_filter-&gt;: \"{{ hello | greeter }}\"\n</code></pre></p>"},{"location":"tour/hello-world/hello-worlds/#strongly-typed-declarative-hooks","title":"Strongly typed declarative hooks","text":"<p>Declarative hooks are strongly typed objects with many declarative fields. <pre><code>words&lt;-:\n  hi:\n    type: str\n    regex: ^(Bonjour|Hola|Hello)\n  target: str\n\np-&gt;: print {{item}} --for values(words(hi=\"Hello\",target=\"world!\"))\n</code></pre></p> <p>Here we are also using the values hook which can also be daisy-chained with the pre-declared <code>words</code> hook.</p> <p>Note an error would be thrown if the <code>hi</code> key did not satisfy the regex.</p>"},{"location":"tour/hello-world/hello-worlds/#declarative-hook-methods","title":"Declarative hook methods","text":"<p>Declarative hooks can have methods that extend the base.</p> <pre><code>words&lt;-:\n  hi: Wadup\n  say&lt;-:\n    target: str\n    exec:\n      p-&gt;: print {{hi}} {{target}}\n\np-&gt;: words.say --hi Hello --target world!\n</code></pre>"},{"location":"tour/hello-world/hello-worlds/#declarative-hooks-inheritance","title":"Declarative hooks inheritance","text":"<p>Declarative hooks also support inheritance. <pre><code>base&lt;-:\n  hi:\n    default: Hello\n\nwords&lt;-:\n  extends: base\n  say&lt;-:\n    target: str\n    exec:\n      p-&gt;: print {{hi}} {{target}}\n\np-&gt;: words.say --target world!\n</code></pre></p> <p>Which can also be called from the command line.</p> <pre><code>tackle hello-world.yaml\n</code></pre>"},{"location":"tour/hello-world/hello-worlds/#calling-other-tackle-files","title":"Calling other tackle files","text":"<p>Every hook can be imported / called remotely from github repos with the same options as you would from the command line.</p> <pre><code>import-hello_&gt;: import robcxyz/tackle-hello-world\ncall-&gt;: greeter world!\n# Or\nlocal-call-&gt;: tackle hello-world.yaml\nremote-call-&gt;: tackle robcxyz/tackle-hello-world --version v0.1.0\n</code></pre>"},{"location":"tour/hello-world/hello-worlds/#self-documenting-declarative-clis","title":"Self Documenting Declarative CLIs","text":"<p>Documentation can be embedded into the hooks.</p> <p><code>tackle robcxyz/tackle-hello-world help</code> <pre><code>&lt;-:\n  help: This is the default hook\n  target:\n    type: str\n    description: The thing to say hello to\n  exec&lt;-:\n    greeting-&gt;: select Who to greet? --choices ['world','universe']\n    hi-&gt;: greeter --target {{greeting}}\n  greeting-method&lt;-:\n    help: A method that greets\n    # ... Greeting options / logic\ngreeter&lt;-:\n  help: A reusable greeter object\n  target: str\n  exec&lt;-:\n    hi-&gt;: print Hello {{target}}\n</code></pre></p> <p>Which when running <code>tackle hello.yaml help</code> produces its own help screen.</p> <pre><code>usage: tackle hello.yaml [--target]\n\nThis is the default hook\n\noptions:\n    --target [str] The thing to say hello to\nmethods:\n    greeting-method     A method that greets\n    greeter     A reusable greeter object\n</code></pre> <p>That [will] drive a <code>help</code> screen by running <code>tackle hello-world.yaml --help</code> -&gt; Coming soon</p>"},{"location":"tutorials/","title":"Tutorials","text":"<ul> <li>Code Generation</li> <li>Infrastructure</li> <li>WIP</li> <li>Kubernetes</li> <li>WIP</li> <li>Utilities</li> <li>WIP</li> </ul>"},{"location":"tutorials/infrastructure/","title":"Infrastructure Management Tutorials","text":"<p>TODO</p> <ul> <li>[ ] Combining contexts</li> <li>[ ] Parent child pattern</li> <li>[ ] Calling tools (ansible / tf / k8s)</li> <li>[ ] Helpful patterns</li> </ul>"},{"location":"tutorials/infrastructure/#design","title":"Design","text":"<ul> <li>Parent/child design pattern</li> <li>Parent tackle file<ul> <li>Stores global variables that are shared between all the modules</li> <li>Can contain selectors for environment / region / kube context</li> <li>Contains a <code>./hooks</code> directory that imports the appropriate hooks for running tools</li> </ul> </li> <li>Child tackle file<ul> <li>Stores deployment specific variables</li> <li>Calls the appropriate tool (ie ansible, terraform, helm, kubectl)</li> </ul> </li> </ul>"},{"location":"tutorials/infrastructure/#parent-design-patterns","title":"Parent Design Patterns","text":""},{"location":"tutorials/infrastructure/#storing-global-variables","title":"Storing global variables","text":"<ul> <li>Convention is to store global variables in a <code>globals.yaml</code> file which</li> </ul>"},{"location":"tutorials/infrastructure/#child-design-patterns","title":"Child Design Patterns","text":"<pre><code>global-&gt;: tackle globals.yaml --find_in_parent --merge\n</code></pre>"},{"location":"tutorials/kubernetes/","title":"Tackle with Kubernetes","text":"<p>These hooks are a WIP.</p>"},{"location":"tutorials/kubernetes/#kubectl-wrapper","title":"kubectl wrapper","text":"<ul> <li>[ ] Import as provider</li> <li>[ ] Usage</li> </ul>"},{"location":"tutorials/kubernetes/#helm-wrapper","title":"helm wrapper","text":"<ul> <li>[ ] Import as provider</li> <li>[ ] Usage</li> </ul>"},{"location":"tutorials/code-generation/","title":"Code Generation Tutorials","text":"<p>Tackle was originally built from cookiecutter, a very popular code scaffolding tool, and extends its functionality with additional language features such as modularity, conditionals and loops, reusable objects, and more. These tutorials aim to walk through some of the patterns that can be used to build anything from a lightweight single document code generator to a project scaffolding tool used to continually update project templates over time.</p>"},{"location":"tutorials/code-generation/#sections","title":"Sections","text":"<ul> <li>Basic Code Generation<ul> <li>Basic code generation / the generate hook</li> <li>Flow control for code generation</li> </ul> </li> <li>Modular Code Generation<ul> <li>Calling code generating modules</li> <li>Maintaining context between tackle providers</li> </ul> </li> <li>Partial Code Generation<ul> <li>Generating code in specific parts of documents</li> </ul> </li> <li>Stateful Code Generation<ul> <li>Maintaining state when running code generation</li> <li>WIP</li> </ul> </li> </ul>"},{"location":"tutorials/code-generation/#examples","title":"Examples","text":"<p>For those that learn best via examples, here are a few that should get the general point across:</p> <ul> <li>tackle-provider<ul> <li>A tackle provider for creating other tackle providers</li> </ul> </li> <li>tackle-license<ul> <li>A tackle provider for creating license files</li> </ul> </li> <li>Tackle provider docs<ul> <li>Tackle's provider docs are generated with tackle</li> <li>This example uses the provider_docs hook from a tackle-file which then calls a mkdocs.yaml</li> <li>The most important resource is the testing providers docs which goes into details about how to test hooks and tackle files.</li> </ul> </li> </ul>"},{"location":"tutorials/code-generation/basics/","title":"Code Generation Tutorial","text":"<p>The basic structure of any code scaffolding tool is to build some kind of context / map of key value pairs and then render a set of files to a target directory. Tackle box uses jinja syntax internally to build flow control but also ships with a number of hooks to create files and render templates. This document aims to go over the common practices for generating code with tackle box.</p>"},{"location":"tutorials/code-generation/basics/#the-generate-hook","title":"The <code>generate</code> Hook","text":"<p>When rendering files, you will want to use the <code>generate</code> hook which can render individual files or directories of templates to some output path. Basically every code generator uses this hook. There are several parameters that can be used with this hook but the simplest way of using it is as a compact hook with the first positional value being the path to your templates and the second being the output path. For instance:</p> <pre><code># Render context\nfoo: bar\n\n# Call generate hook\ngenerate hook in compact form-&gt;: generate path/to/templates output/path\n# Or\ngenerate hook in expanded form:\n  -&gt;: generate\n  templates: path/to/templates\n  output: output/path\n</code></pre> <p>Throughout this tutorial we'll be using it but just know this hook generally comes at the end of your tackle file once you have established a render context (foo=bar in the example above).</p>"},{"location":"tutorials/code-generation/basics/#simplest-example","title":"Simplest Example","text":"<p>Most project scaffolding tools work off the general principle of building a render context which is then used to generate code from templates. This render context is typically a map of key value pairs that map the variables in the template to the render context.</p> <p>For instance if our template was:</p> <p><code>file.py.tpl</code> <pre><code>def do_thing():\n  print(\"{{words}}\")\n</code></pre></p> <p>We'd need to have some variable <code>words</code> to fill into the template. In tackle, this context is built within the tackle file before one renders files. For instance given the following tackle file:</p> <p><code>tackle.yaml</code> <pre><code>words: Hello world!\ngen-&gt;: generate file.py.tpl file.py\n</code></pre></p> <p>When called by running <code>tackle</code> in the same directory would generate a <code>file.py</code> with the <code>words</code> variable populated.</p>"},{"location":"tutorials/code-generation/basics/#example-with-prompting","title":"Example with Prompting","text":"<p>Similar to cookiecutter, tackle offers the ability to prompt a user for inputs which are then used to render out the files. There are many kinds of prompt hooks with the most common being the input prompt (string inputs) and the select prompt (choices of values) corresponding to cookiecutter's string and list values. Each of these have their first positional argument as a displayed question but this is not required.</p> <p>For instance given this file structure:</p> <pre><code>\u251c\u2500\u2500 templates\n\u2502 \u2514\u2500\u2500 file1.py\n\u2502 \u2514\u2500\u2500 file2.py\n\u2514\u2500\u2500 tackle.yaml\n</code></pre> <p><code>tackle.yaml</code> <pre><code>project_name-&gt;: input\nproject_slug-&gt;: input --default \"{{project_name.lower()|replace(' ', '_')|replace('-', '_')|replace('.', '_')|trim()}}\"\ngithub_username-&gt;: input What is your Github username / org?\nlicense-&gt;: select --choices ['apache','mit']\npostgres_version:\n  -&gt;: select\n  choices:\n    - 14\n    - 13\n    - 12\ngen code-&gt;: generate templates {{project_slug}}\n</code></pre></p> <p>After running <code>tackle</code> in the same directory one would be prompted with:</p> <pre><code>? project_name &gt;&gt;&gt; tackle-foo-bar\n? project_slug &gt;&gt;&gt; tackle_foo_bar\n? What is your Github username / org? robcxyz\n? license &gt;&gt;&gt; apache\n? postgres_version &gt;&gt;&gt;\n  14\n\u276f 13\n  12\n</code></pre> <p>Before generating the code.</p>"},{"location":"tutorials/code-generation/basics/#conditional-options","title":"Conditional Options","text":"<p>Most project scaffolding is not a \"one size fits all\" situation such that the template should prompt the user for high level questions and the conditionally prompt a user for additional questions based on the answers of the prior ones. For instance if you had the question \"Do you want to use docker?\", one could then conditionally expose a subset of options such as \"What docker base image do you want to start with?\".  For simple conditions, tackle has the confirm hook that prompts the user and outputs a boolean to inform conditionals / blocks that expose a subset of options. Thus, to express some conditionality around creating a Dockerfile, one could have the following:</p> <pre><code>use_docker-&gt;: confirm Do you want to use docker?\ndocker_os-&gt;: select What docker base image? --if use_docker --choices ['ubuntu','alpine']\n# Or in expanded form\ndocker_os:\n  -&gt;: select What docker base image?\n  if: use_docker\n  choices:\n    - ubuntu\n    - alpine\n...\ngen code-&gt;: generate input output\n</code></pre> <p>Which could then expose a subset of options. If you wanted to express the above in one line, you could also do:</p> <pre><code>docker_os-&gt;: select --choices ['ubuntu','alpine','centos'] --if \"confirm('Use docker?')\"\n</code></pre> <p>But in this case you would not have the <code>use_docker</code> boolean variable which could be useful if building a template.</p>"},{"location":"tutorials/code-generation/basics/#conditional-blocks","title":"Conditional Blocks","text":"<p>If you are building a decision tree, you might want to consider using block hooks which allow having a group of hooks being called based on a single condition without having to repeat a bunch of conditionals. For instance given the above docker example, if you wanted to have a number of options:</p> <pre><code>use_docker-&gt;: confirm Do you want to use docker?\ndocker-&gt;:\n  if: use_docker\n  os:\n    -&gt;: select What docker base image?\n    choices:\n      - ubuntu\n      - alpine\n      - centos\n  registry-&gt;: select Where to push docker image? --choices ['dockerhub','quay']\n  generate dockerfile-&gt;: generate templates/Dockerfile {{project_slug}}/Dockerfile\n\n# Use items inside block to render other templates\n# For instance one could use {{docker.registry}} in a template\ngenerate ci-&gt;: generate templates/.github {{project_slug}}\n</code></pre>"},{"location":"tutorials/code-generation/basics/#match-hook","title":"Match Hook","text":"<p>Note: Checkout the <code>match</code> hook for creating other types of decision trees.</p>"},{"location":"tutorials/code-generation/basics/#testing-code-generators","title":"Testing code generators","text":"<p>Once you generate code, it is often helpful to then run the tests within that generated code to make sure it works. For examples on how to do this, checkout the tackle-provider provider which generates the scaffolding to run a provider.</p> <p>In that provider you will see a test which uses a number of fixtures from the conftest.py which can be used to run the tests in the generated code.</p>"},{"location":"tutorials/code-generation/basics/#next-tutorials","title":"Next Tutorials","text":"<ul> <li>Modular code generators</li> <li>Partial code generation</li> </ul>"},{"location":"tutorials/code-generation/modular/","title":"Modular Code Generation","text":"<p>Code generation can be made modular by calling other code generating tackle providers which can be either remote or local or breaking up how to read in context.</p>"},{"location":"tutorials/code-generation/modular/#using-tackle-providers","title":"Using Tackle Providers","text":"<p>One of the main reasons tackle was originally made was to build modular code generators. The vision is that there will be a few, well crafted tackle providers to create different sections of boilerplate which can be easily updated over time. A good example of boilerplate is a license file which this snippet can call.</p> <pre><code># project_slug is a standard name for your package directory\nproject_slug-&gt;: input What to call the project?\nlicense-&gt;: tackle robcxyz/tackle-license --output {{project_slug}}\n# project_slug is again used for other rendering outputs\n</code></pre> <p>Which will prompt you such as below:</p> <pre><code>? What to call the project? MyApp\n\u276f Apache 2.0\n  MIT\n  GPL Version 3\n  BSD Version 3\n  Closed source\n? Who are the license holders? Me\n? What year to end the license? 2022\n</code></pre> <p>This provider can also be called from the command line:</p> <pre><code>tackle robcxyz/tackle-license\n</code></pre> <p>Which also comes with a nice help screen:</p> <pre><code>tackle robcxyz/tackle-license help\n</code></pre> <p>Hopefully over time, providers will be created that specialize in certain files / aspects of code and people can then stitch together templates more easily.</p>"},{"location":"tutorials/code-generation/modular/#tackle-provider-versions","title":"Tackle provider versions","text":"<p>By default, tackle uses the latest github released version unless there is not official release in which case it uses the version in the default branch. Fortunately there is a way to pin the version of an imported tackle with the <code>checkout</code> flag which under the hood, is performing a <code>git checkout</code> command to get the proper version of the code. For instance:</p> <pre><code># Use the latest version in the default branch\nlatest-&gt;: tackle robcxyz/tackle-provider --latest\n# If the branch was main, the following would be the same\nbranch-&gt;: tackle robcxyz/tackle-provider --checkout main\n# Best practice is to pin to some versioned release  \npinned-&gt;: tackle robcxyz/tackle-provider --checkout v0.1.0\n</code></pre>"},{"location":"tutorials/code-generation/modular/#groups-of-tackle-providers","title":"Groups of tackle providers","text":"<p>If one wanted to run a number of providers:</p> <pre><code>providers:\n  -&gt;: checkbox What additional items do you want to add to the generated code?\n  checked: true\n  choices:\n    - license\n    - makefile\n    - pre-commit\n\ncall providers-&gt;: tackle robcxyz/tackle-{{item}} --for providers\n</code></pre> <p>Since the output of a <code>checkbox</code> is a list, it can be used as the input to the <code>for</code> key and since it is a string, it is rendered by default.</p>"},{"location":"tutorials/code-generation/modular/#splitting-up-context","title":"Splitting up Context","text":"<p>Sometimes you want to break up your business logic or build hierarchical ways of merging config files, one could have a pattern such as:</p> <p><code>child/tackle.yaml</code> <pre><code>context: tackle global.yaml --find_in_parent --merge\n</code></pre></p> <p><code>global.yaml</code></p> <pre><code>envs_&gt;:\n  dev:\n    num_servers: 1 # etc...\n  prod:\n    num_servers: 2\n\n# or in multiple lines / mix\nenvironments:\n  - prod\n  - dev\nenv-&gt;: select --choices environments\nmerge it up a level with var hook-&gt;: var envs[env] --merge\n\nOr all the above in one line-&gt;: var {{envs[select(choices=keys(envs))]}} --merge\n</code></pre> <p>Resulting in the following context</p> <pre><code>#? env &gt;&gt;&gt; prod\nenvironments:\n- prod\n- dev\nenv: prod\nnum_servers: 2\n</code></pre> <p>This allows for lots of dev ops related code generation patterns in conjunction with other tools such as kubectl which tackle can wrap.</p>"},{"location":"tutorials/code-generation/modular/#next-tutorials","title":"Next Tutorials","text":"<ul> <li>Partial code generation</li> </ul>"},{"location":"tutorials/code-generation/partial/","title":"Partial Code Generating Techniques","text":"<p>Several strategies can be used to partially update a tackle file.</p>"},{"location":"tutorials/code-generation/partial/#rendering-segments-ahead-of-time","title":"Rendering Segments Ahead of Time","text":"<p>Segments of a code generation can be done ahead of time.</p> <pre><code>python_function_template: |\n  {%for i in foo%}\n  def {{i}}Function(x: int, y: int)\n    print(x + y)\n  {% endfor%}\n\npython_function_rendered-&gt;: {{python_function_template}}\n</code></pre> <p>Which can then be further combined within the tackle file, rendered into a template, or updated within a file as described below.</p>"},{"location":"tutorials/code-generation/partial/#generating-a-file-once","title":"Generating a File Once","text":"<p>Within the generate hook, there is an option to <code>skip_if_file_exists</code> which can mark certain files as non-renderable if they are code generated and expected to change after the code generation. This way the files are only generated once and skipped if they exist.</p>"},{"location":"tutorials/code-generation/partial/#updating-a-section","title":"Updating a Section","text":"<p>Using the <code>update_section</code> hook, you can set markers in a document to pass over rendering to. For instance lets say you wanted to hand control over to tackle for updating a table in the document. Once could do:</p> <p><code>.tackle.yaml</code> <pre><code>update_readme&lt;-:\n  help: Update the README.md table\n  exec:\n    rows:\n      - name: Stuff\n        desc: A thing\n      - name: Thing\n        desc: A stuff\n    update:\n      -&gt;: update_section README.md\n      content: |\n        | Name | Description |\n        |---|---|\n        {% for i in rows %}| {{i.name}} | {{i.desc}} |\n        {% endfor %}\n</code></pre></p> <p>Running <code>tackle update-readme</code></p> <pre><code>My App...\n\n[//]: # (--start--)\n\n| Name | Description |\n|---|---|\n| Stuff | A thing |\n| Thing | A stuff |\n\n[//]: # (--end--)\n\nDoes stuff\n</code></pre> <p>You can also update multiple sections by toggling the <code>start_render</code> and <code>end_render</code> fields. It is also up to you how you build the sources which could be in remote locations.</p>"},{"location":"tutorials/code-generation/stateful/","title":"Stateful Rendering","text":"<p>TODO</p> <p>Strategies to maintain state for code generation similar to Cruft does it are being investigated.</p>"}]}