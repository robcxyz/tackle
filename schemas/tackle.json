[{"additionalProperties": false, "description": "Hook for calling external tackle providers.", "properties": {"hook_name": {"default": "tackle", "title": "Hook Name", "type": "string"}, "help": {"default": null, "description": "A string to display when calling with the `help` argument.", "title": "Help", "type": "string"}, "render_by_default": {"default": null, "description": "A list of string fields to wrap with jinja braces and render by default.", "items": {}, "title": "Render By Default", "type": "array"}, "render_exclude": {"default": null, "description": "A list of field names to not render.", "items": {}, "title": "Render Exclude", "type": "array"}, "is_public": {"default": null, "description": "A boolean if hook is public / callable from outside the provider).", "title": "Is Public", "type": "boolean"}, "skip_output": {"default": false, "description": "A flag to skip the output and not set the key. Can also be set within a hook call.", "title": "Skip Output", "type": "boolean"}, "args": {"default": ["input_arg", "additional_args"], "items": {}, "title": "Args", "type": "array"}, "kwargs": {"default": "override", "title": "Kwargs", "type": "string"}, "input_arg": {"default": null, "description": "The input can be one of repo, file path, directory with tackle.yaml, zip file, or if left blank parent tackle file.", "title": "Input Arg", "type": "string"}, "checkout": {"default": null, "description": "The branch or version to checkout for repo type inputs_strings.", "title": "Checkout", "type": "string"}, "no_input": {"default": null, "description": "A boolean for if you want to suppress prompt inputs.", "title": "No Input", "type": "boolean"}, "latest": {"default": false, "description": "For remote providers, use the latest commit.", "title": "Latest", "type": "boolean"}, "context_file": {"default": null, "description": "The file to run inside a repo input.", "title": "Context File", "type": "string"}, "extra_context": {"default": null, "description": "Any additional context to use when calling the hook. Like existing context.", "title": "Extra Context", "type": "object"}, "password": {"default": null, "description": "A password to use for repo inputs.", "format": "password", "title": "Password", "type": "string", "writeOnly": true}, "directory": {"default": null, "description": "The directory to run inside for repo inputs.", "title": "Directory", "type": "string"}, "find_in_parent": {"default": false, "description": "Search for target in parent directory. Only relevant for local targets.", "title": "Find In Parent", "type": "boolean"}, "override": {"default": {}, "description": "A dictionary of keys to override.", "title": "Override", "type": "object"}, "additional_args": {"anyOf": [{"items": {}, "type": "array"}, {}], "default": [], "description": "Arguments to pass on either directly as a string or as a list of strings.", "title": "Additional Args"}}, "title": "TackleHook", "type": "object"}, {"additionalProperties": false, "description": "Hook for blocks of hooks. This is a special case where `items` are parsed like a\n normal context with the added benefit of maintaining a `temporary_context` so that\n items on the same level can be accessed in memory / rendered. Normally executed\n via a macro with an arrow. This the only hook the core parser is aware of as it is\n parsing.", "properties": {"hook_name": {"default": "block", "title": "Hook Name", "type": "string"}, "help": {"default": null, "description": "A string to display when calling with the `help` argument.", "title": "Help", "type": "string"}, "render_by_default": {"default": null, "description": "A list of string fields to wrap with jinja braces and render by default.", "items": {}, "title": "Render By Default", "type": "array"}, "render_exclude": {"default": ["items"], "items": {}, "title": "Render Exclude", "type": "array"}, "is_public": {"default": null, "description": "A boolean if hook is public / callable from outside the provider).", "title": "Is Public", "type": "boolean"}, "skip_output": {"default": true, "title": "Skip Output", "type": "boolean"}, "args": {"default": [], "description": "A list of fields map arguments. See [docs]() for details.", "items": {}, "title": "Args", "type": "array"}, "kwargs": {"default": null, "description": "A field name of type dict to map additional arguments to.", "title": "Kwargs", "type": "string"}, "items": {"anyOf": [{"type": "object"}, {"items": {}, "type": "array"}], "description": "Items to be parsed like a normal input.", "title": "Items"}}, "required": ["items"], "title": "BlockHook", "type": "object"}, {"additionalProperties": false, "description": "Hook for rendering a variable based on an input. Only useful for rendering as\n otherwise you wouldn't need this hook at all. Does recursion when the value being\n rendered is still renderable - ie a template within a template.", "properties": {"hook_name": {"default": "var", "title": "Hook Name", "type": "string"}, "help": {"default": null, "description": "A string to display when calling with the `help` argument.", "title": "Help", "type": "string"}, "render_by_default": {"default": null, "description": "A list of string fields to wrap with jinja braces and render by default.", "items": {}, "title": "Render By Default", "type": "array"}, "render_exclude": {"default": null, "description": "A list of field names to not render.", "items": {}, "title": "Render Exclude", "type": "array"}, "is_public": {"default": null, "description": "A boolean if hook is public / callable from outside the provider).", "title": "Is Public", "type": "boolean"}, "skip_output": {"default": false, "description": "A flag to skip the output and not set the key. Can also be set within a hook call.", "title": "Skip Output", "type": "boolean"}, "args": {"default": ["input"], "items": {}, "title": "Args", "type": "array"}, "kwargs": {"default": null, "description": "A field name of type dict to map additional arguments to.", "title": "Kwargs", "type": "string"}, "input": {"description": "Any variable input.", "render_by_default": true, "title": "Input"}, "no_recursion": {"default": false, "description": "Don't recursively render embedded templates.", "title": "No Recursion", "type": "boolean"}}, "required": ["input"], "title": "VarHook", "type": "object"}, {"additionalProperties": false, "description": "Literally return the input.", "properties": {"hook_name": {"default": "literal", "title": "Hook Name", "type": "string"}, "help": {"default": null, "description": "A string to display when calling with the `help` argument.", "title": "Help", "type": "string"}, "render_by_default": {"default": null, "description": "A list of string fields to wrap with jinja braces and render by default.", "items": {}, "title": "Render By Default", "type": "array"}, "render_exclude": {"default": null, "description": "A list of field names to not render.", "items": {}, "title": "Render Exclude", "type": "array"}, "is_public": {"default": null, "description": "A boolean if hook is public / callable from outside the provider).", "title": "Is Public", "type": "boolean"}, "skip_output": {"default": false, "description": "A flag to skip the output and not set the key. Can also be set within a hook call.", "title": "Skip Output", "type": "boolean"}, "args": {"default": ["input"], "items": {}, "title": "Args", "type": "array"}, "kwargs": {"default": null, "description": "A field name of type dict to map additional arguments to.", "title": "Kwargs", "type": "string"}, "input": {"description": "Any variable input.", "title": "Input"}}, "required": ["input"], "title": "LiteralHook", "type": "object"}, {"additionalProperties": false, "description": "Hook for debugging that prints the output data and pauses runtime.", "properties": {"hook_name": {"default": "debug", "title": "Hook Name", "type": "string"}, "help": {"default": null, "description": "A string to display when calling with the `help` argument.", "title": "Help", "type": "string"}, "render_by_default": {"default": null, "description": "A list of string fields to wrap with jinja braces and render by default.", "items": {}, "title": "Render By Default", "type": "array"}, "render_exclude": {"default": null, "description": "A list of field names to not render.", "items": {}, "title": "Render Exclude", "type": "array"}, "is_public": {"default": null, "description": "A boolean if hook is public / callable from outside the provider).", "title": "Is Public", "type": "boolean"}, "skip_output": {"default": true, "title": "Skip Output", "type": "boolean"}, "args": {"default": ["key"], "items": {}, "title": "Args", "type": "array"}, "kwargs": {"default": null, "description": "A field name of type dict to map additional arguments to.", "title": "Kwargs", "type": "string"}, "key": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "A path to a key to debug", "title": "Key"}, "data": {"default": null, "description": "Which data to examine. One of `public`, `private`, `temporary`, or `existing`. Omit for all.", "title": "Data", "type": "string"}}, "title": "DebugHook", "type": "object"}, {"additionalProperties": false, "description": "Exit the parser with an exit code.", "properties": {"hook_name": {"default": "exit", "title": "Hook Name", "type": "string"}, "help": {"default": null, "description": "A string to display when calling with the `help` argument.", "title": "Help", "type": "string"}, "render_by_default": {"default": null, "description": "A list of string fields to wrap with jinja braces and render by default.", "items": {}, "title": "Render By Default", "type": "array"}, "render_exclude": {"default": null, "description": "A list of field names to not render.", "items": {}, "title": "Render Exclude", "type": "array"}, "is_public": {"default": null, "description": "A boolean if hook is public / callable from outside the provider).", "title": "Is Public", "type": "boolean"}, "skip_output": {"default": false, "description": "A flag to skip the output and not set the key. Can also be set within a hook call.", "title": "Skip Output", "type": "boolean"}, "args": {"default": ["code"], "items": {}, "title": "Args", "type": "array"}, "kwargs": {"default": null, "description": "A field name of type dict to map additional arguments to.", "title": "Kwargs", "type": "string"}, "code": {"default": 0, "description": "The exit code.", "render_by_default": true, "title": "Code", "type": "integer"}}, "title": "ExitHook", "type": "object"}, {"additionalProperties": false, "description": "Hook to run other hooks dynamically.", "properties": {"hook_name": {"default": "run_hook", "title": "Hook Name", "type": "string"}, "help": {"default": null, "description": "A string to display when calling with the `help` argument.", "title": "Help", "type": "string"}, "render_by_default": {"default": null, "description": "A list of string fields to wrap with jinja braces and render by default.", "items": {}, "title": "Render By Default", "type": "array"}, "render_exclude": {"default": null, "description": "A list of field names to not render.", "items": {}, "title": "Render Exclude", "type": "array"}, "is_public": {"default": null, "description": "A boolean if hook is public / callable from outside the provider).", "title": "Is Public", "type": "boolean"}, "skip_output": {"default": false, "description": "A flag to skip the output and not set the key. Can also be set within a hook call.", "title": "Skip Output", "type": "boolean"}, "args": {"default": ["hook", "hook_dict"], "items": {}, "title": "Args", "type": "array"}, "kwargs": {"default": "hook_dict", "title": "Kwargs", "type": "string"}, "hook": {"description": "The name of the hook to run.", "title": "Hook", "type": "string"}, "hook_dict": {"default": null, "description": "A dict of keys to use with the hook.", "title": "Hook Dict", "type": "object"}}, "required": ["hook"], "title": "RunHookHook", "type": "object"}, {"additionalProperties": false, "description": "Hook for importing external tackle providers. Does not actually execute the\n base tackle in the provider but makes the hooks defined in the hooks directory\n available to be called. Takes any type as an argument to build `src` and\n `version` import targets.", "properties": {"hook_name": {"default": "import", "title": "Hook Name", "type": "string"}, "help": {"default": null, "description": "A string to display when calling with the `help` argument.", "title": "Help", "type": "string"}, "render_by_default": {"default": null, "description": "A list of string fields to wrap with jinja braces and render by default.", "items": {}, "title": "Render By Default", "type": "array"}, "render_exclude": {"default": null, "description": "A list of field names to not render.", "items": {}, "title": "Render Exclude", "type": "array"}, "is_public": {"default": null, "description": "A boolean if hook is public / callable from outside the provider).", "title": "Is Public", "type": "boolean"}, "skip_output": {"default": true, "title": "Skip Output", "type": "boolean"}, "args": {"default": ["src"], "items": {}, "title": "Args", "type": "array"}, "kwargs": {"default": null, "description": "A field name of type dict to map additional arguments to.", "title": "Kwargs", "type": "string"}, "src": {"anyOf": [{"type": "string"}, {"items": {}, "type": "array"}], "description": "A str reference to a source or a list of dicts with strings that will be expanded with args (ie `foo --version latest`) or objects (ie `[src: foo]).", "title": "Src"}, "version": {"default": null, "description": "Version of src for remote imports.", "title": "Version", "type": "string"}, "latest": {"default": null, "description": "Flag to pull latest version.", "title": "Latest", "type": "boolean"}}, "required": ["src"], "title": "ImportHook", "type": "object"}]