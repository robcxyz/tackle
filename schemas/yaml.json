[{"additionalProperties": false, "description": "Hook for modifying a yaml in place (ie read, transform, and write back to the file\n in one operation). WIP -> https://github.com/sudoblockio/tackle/issues/100.", "properties": {"hook_name": {"default": "yaml_in_place", "title": "Hook Name", "type": "string"}, "help": {"default": null, "description": "A string to display when calling with the `help` argument.", "title": "Help", "type": "string"}, "render_by_default": {"default": null, "description": "A list of string fields to wrap with jinja braces and render by default.", "items": {}, "title": "Render By Default", "type": "array"}, "render_exclude": {"default": null, "description": "A list of field names to not render.", "items": {}, "title": "Render Exclude", "type": "array"}, "is_public": {"default": null, "description": "A boolean if hook is public / callable from outside the provider).", "title": "Is Public", "type": "boolean"}, "skip_output": {"default": false, "description": "A flag to skip the output and not set the key. Can also be set within a hook call.", "title": "Skip Output", "type": "boolean"}, "args": {"default": ["path", "contents"], "items": {}, "title": "Args", "type": "array"}, "kwargs": {"default": null, "description": "A field name of type dict to map additional arguments to.", "title": "Kwargs", "type": "string"}, "path": {"description": "The file path to put read or write to.", "title": "Path", "type": "string"}, "remove": {"anyOf": [{"items": {}, "type": "array"}, {"type": "string"}], "default": null, "description": "Parameter or regex to remove from list or dict.", "title": "Remove"}, "contents": {"anyOf": [{"type": "object"}, {"items": {}, "type": "array"}], "default": null, "description": "Supplied dictionary or list to write.", "title": "Contents"}, "update": {"default": null, "description": "Use the python `update` dict method on `contents` before writing", "title": "Update", "type": "object"}, "filter": {"default": null, "description": "List or string to values to.", "items": {}, "title": "Filter", "type": "array"}, "merge_dict": {"default": null, "description": "Dict input that recursively overwrites the `contents`.", "title": "Merge Dict", "type": "object"}, "in_place": {"default": false, "description": "Boolean to read the contents of the `path` and then write after modifications.", "title": "In Place", "type": "boolean"}, "append_items": {"anyOf": [{"type": "object"}, {"type": "string"}, {"items": {}, "type": "array"}], "default": null, "description": "List to append to `append_key` key.", "title": "Append Items"}, "append_keys": {"anyOf": [{"type": "object"}, {"type": "string"}, {"items": {}, "type": "array"}], "default": null, "description": "String or list of hierarchical keys to append item to. Defaults", "title": "Append Keys"}, "mode": {"default": null, "description": "The mode that the file should write. Defaults to write 'w'. See https://docs.python.org/3/library/functions.html#open", "title": "Mode", "type": "string"}, "write": {"default": null, "description": "", "title": "Write", "type": "boolean"}}, "required": ["path"], "title": "YamlHook", "type": "object"}, {"additionalProperties": false, "description": "Hook for decoding a yaml string to a dict.", "properties": {"hook_name": {"default": "yaml_decode", "title": "Hook Name", "type": "string"}, "help": {"default": null, "description": "A string to display when calling with the `help` argument.", "title": "Help", "type": "string"}, "render_by_default": {"default": null, "description": "A list of string fields to wrap with jinja braces and render by default.", "items": {}, "title": "Render By Default", "type": "array"}, "render_exclude": {"default": null, "description": "A list of field names to not render.", "items": {}, "title": "Render Exclude", "type": "array"}, "is_public": {"default": null, "description": "A boolean if hook is public / callable from outside the provider).", "title": "Is Public", "type": "boolean"}, "skip_output": {"default": false, "description": "A flag to skip the output and not set the key. Can also be set within a hook call.", "title": "Skip Output", "type": "boolean"}, "args": {"default": ["data"], "items": {}, "title": "Args", "type": "array"}, "kwargs": {"default": null, "description": "A field name of type dict to map additional arguments to.", "title": "Kwargs", "type": "string"}, "data": {"description": "Yaml string to convert to dict.", "title": "Data", "type": "string"}}, "required": ["data"], "title": "YamlDecodeHook", "type": "object"}, {"additionalProperties": false, "description": "Hook for converting a dict to a yaml encoded string.", "properties": {"hook_name": {"default": "yaml_encode", "title": "Hook Name", "type": "string"}, "help": {"default": null, "description": "A string to display when calling with the `help` argument.", "title": "Help", "type": "string"}, "render_by_default": {"default": null, "description": "A list of string fields to wrap with jinja braces and render by default.", "items": {}, "title": "Render By Default", "type": "array"}, "render_exclude": {"default": null, "description": "A list of field names to not render.", "items": {}, "title": "Render Exclude", "type": "array"}, "is_public": {"default": null, "description": "A boolean if hook is public / callable from outside the provider).", "title": "Is Public", "type": "boolean"}, "skip_output": {"default": false, "description": "A flag to skip the output and not set the key. Can also be set within a hook call.", "title": "Skip Output", "type": "boolean"}, "args": {"default": ["data"], "items": {}, "title": "Args", "type": "array"}, "kwargs": {"default": null, "description": "A field name of type dict to map additional arguments to.", "title": "Kwargs", "type": "string"}, "data": {"anyOf": [{"type": "object"}, {"items": {}, "type": "array"}, {"type": "string"}], "description": "Map/list or renderable string to data to convert to yaml string.", "render_by_default": true, "title": "Data"}}, "required": ["data"], "title": "YamlEncodeHook", "type": "object"}, {"additionalProperties": false, "description": "Hook for reading and writing yaml. Hook reads from `path` if no `data` field is\n provided, otherwise it writes the `data` to `path`.", "properties": {"hook_name": {"default": "yaml", "title": "Hook Name", "type": "string"}, "help": {"default": null, "description": "A string to display when calling with the `help` argument.", "title": "Help", "type": "string"}, "render_by_default": {"default": null, "description": "A list of string fields to wrap with jinja braces and render by default.", "items": {}, "title": "Render By Default", "type": "array"}, "render_exclude": {"default": null, "description": "A list of field names to not render.", "items": {}, "title": "Render Exclude", "type": "array"}, "is_public": {"default": null, "description": "A boolean if hook is public / callable from outside the provider).", "title": "Is Public", "type": "boolean"}, "skip_output": {"default": false, "description": "A flag to skip the output and not set the key. Can also be set within a hook call.", "title": "Skip Output", "type": "boolean"}, "args": {"default": ["path", "data"], "items": {}, "title": "Args", "type": "array"}, "kwargs": {"default": null, "description": "A field name of type dict to map additional arguments to.", "title": "Kwargs", "type": "string"}, "path": {"description": "The file path to put read or write to.", "title": "Path", "type": "string"}, "data": {"anyOf": [{"type": "object"}, {"items": {}, "type": "array"}, {"type": "string"}], "default": null, "description": "Map/list or renderable string to a map/list key to write.", "render_by_default": true, "title": "Data"}}, "required": ["path"], "title": "YamlHook", "type": "object"}]