[{"additionalProperties": false, "description": "Hook for getting distinct items from a list.", "properties": {"help": {"default": null, "description": "A string to display when calling with the `help` argument.", "title": "Help", "type": "string"}, "render_by_default": {"default": null, "description": "A list of string fields to wrap with jinja braces and render by default.", "items": {}, "title": "Render By Default", "type": "array"}, "render_exclude": {"default": null, "description": "A list of field names to not render.", "items": {}, "title": "Render Exclude", "type": "array"}, "is_public": {"default": null, "description": "A boolean if hook is public / callable from outside the provider).", "title": "Is Public", "type": "boolean"}, "skip_output": {"default": false, "description": "A flag to skip the output and not set the key. Can also be set within a hook call.", "title": "Skip Output", "type": "boolean"}, "args": {"default": ["src"], "items": {}, "title": "Args", "type": "array"}, "kwargs": {"default": null, "description": "A field name of type dict to map additional arguments to.", "title": "Kwargs", "type": "string"}, "hook_name": {"default": "distinct", "title": "Hook Name", "type": "string"}, "src": {"anyOf": [{"items": {}, "type": "array"}, {"type": "string"}], "description": "A list to get the distinct values from or a str with separators or list for a key path to the element to rewrite the distinct items back to the context.", "title": "Src"}, "src_is_key_path": {"default": false, "description": "If the src is a list and is meant to be a key path.", "title": "Src Is Key Path", "type": "boolean"}, "sep": {"default": "/", "description": "For string src's, a separator for key path.", "title": "Sep", "type": "string"}}, "required": ["src"], "title": "DistinctHook", "type": "object"}, {"additionalProperties": false, "description": "Hook for concatenating a list of items.", "properties": {"help": {"default": null, "description": "A string to display when calling with the `help` argument.", "title": "Help", "type": "string"}, "render_by_default": {"default": null, "description": "A list of string fields to wrap with jinja braces and render by default.", "items": {}, "title": "Render By Default", "type": "array"}, "render_exclude": {"default": null, "description": "A list of field names to not render.", "items": {}, "title": "Render Exclude", "type": "array"}, "is_public": {"default": null, "description": "A boolean if hook is public / callable from outside the provider).", "title": "Is Public", "type": "boolean"}, "skip_output": {"default": false, "description": "A flag to skip the output and not set the key. Can also be set within a hook call.", "title": "Skip Output", "type": "boolean"}, "args": {"default": ["src"], "items": {}, "title": "Args", "type": "array"}, "kwargs": {"default": null, "description": "A field name of type dict to map additional arguments to.", "title": "Kwargs", "type": "string"}, "hook_name": {"default": "concat", "title": "Hook Name", "type": "string"}, "src": {"description": "A list to concatenate the items of.", "items": {}, "title": "Src", "type": "array"}}, "required": ["src"], "title": "ConcatenateHook", "type": "object"}, {"additionalProperties": false, "description": "Hook for sorting complex lists, dicts, or items within a key both in place or as\n output.", "properties": {"help": {"default": null, "description": "A string to display when calling with the `help` argument.", "title": "Help", "type": "string"}, "render_by_default": {"default": null, "description": "A list of string fields to wrap with jinja braces and render by default.", "items": {}, "title": "Render By Default", "type": "array"}, "render_exclude": {"default": null, "description": "A list of field names to not render.", "items": {}, "title": "Render Exclude", "type": "array"}, "is_public": {"default": null, "description": "A boolean if hook is public / callable from outside the provider).", "title": "Is Public", "type": "boolean"}, "skip_output": {"default": false, "description": "A flag to skip the output and not set the key. Can also be set within a hook call.", "title": "Skip Output", "type": "boolean"}, "args": {"default": ["src", "keys"], "items": {}, "title": "Args", "type": "array"}, "kwargs": {"default": null, "description": "A field name of type dict to map additional arguments to.", "title": "Kwargs", "type": "string"}, "hook_name": {"default": "sort", "title": "Hook Name", "type": "string"}, "src": {"anyOf": [{"items": {}, "type": "array"}, {"type": "object"}, {"type": "string"}], "description": "Either a list of strings or a list of dicts to sort and return the output or a string key_path to sort both in place or as output (see `in_place`).", "title": "Src"}, "key": {"default": null, "description": "If the `src` is a list of maps, the key to sort the contents by.", "title": "Key", "type": "string"}, "keys": {"default": [], "description": "A list of fields to sort on for dict inputs based on priority.", "items": {"type": "string"}, "title": "Keys", "type": "array"}, "in_place": {"default": true, "description": "If the `src` is a string (ie a key path), then sort the item in place (ie replace original) and return None.", "title": "In Place", "type": "boolean"}, "reverse": {"default": false, "description": "To sort in reverse.", "title": "Reverse", "type": "boolean"}, "src_is_key_path": {"default": false, "description": "If the src is a list and is meant to be a key path.", "title": "Src Is Key Path", "type": "boolean"}, "sep": {"default": "/", "description": "For string src's, a separator for key path.", "title": "Sep", "type": "string"}, "index": {"anyOf": [{"type": "integer"}, {"items": {}, "type": "array"}], "default": null, "description": "If the input `src` is a list, use the index as the sort key. Takes both an int for single index or list for multiple criteria.", "title": "Index"}}, "required": ["src"], "title": "SortHook", "type": "object"}, {"additionalProperties": false, "description": "Hook for getting a list of values from a list of maps based on a key.", "properties": {"help": {"default": null, "description": "A string to display when calling with the `help` argument.", "title": "Help", "type": "string"}, "render_by_default": {"default": null, "description": "A list of string fields to wrap with jinja braces and render by default.", "items": {}, "title": "Render By Default", "type": "array"}, "render_exclude": {"default": null, "description": "A list of field names to not render.", "items": {}, "title": "Render Exclude", "type": "array"}, "is_public": {"default": null, "description": "A boolean if hook is public / callable from outside the provider).", "title": "Is Public", "type": "boolean"}, "skip_output": {"default": false, "description": "A flag to skip the output and not set the key. Can also be set within a hook call.", "title": "Skip Output", "type": "boolean"}, "args": {"default": ["src", "key"], "items": {}, "title": "Args", "type": "array"}, "kwargs": {"default": null, "description": "A field name of type dict to map additional arguments to.", "title": "Kwargs", "type": "string"}, "hook_name": {"default": "list_key_values", "title": "Hook Name", "type": "string"}, "src": {"description": "A list to extract the keys out of.", "items": {}, "render_by_default": true, "title": "Src", "type": "array"}, "key": {"title": "Key", "type": "string"}, "reject_keys": {"default": null, "description": "A dict of keys with values to not include in output.", "title": "Reject Keys", "type": "object"}, "src_is_key_path": {"default": false, "description": "If the src is a list and is meant to be a key path.", "title": "Src Is Key Path", "type": "boolean"}, "sep": {"default": "/", "description": "For string src's, a separator for key path.", "title": "Sep", "type": "string"}}, "required": ["src", "key"], "title": "ListKeyValuesHook", "type": "object"}, {"additionalProperties": false, "description": "Create a list of integers within a range, ie ->: range 3 1 -> [3,2,1]. If given one\n arg, then that is considered 'stop'. If given two args, they are 'start' and\n 'stop'. If given three args, the last arg is for how much to increment through\n range.", "properties": {"help": {"default": null, "description": "A string to display when calling with the `help` argument.", "title": "Help", "type": "string"}, "render_by_default": {"default": null, "description": "A list of string fields to wrap with jinja braces and render by default.", "items": {}, "title": "Render By Default", "type": "array"}, "render_exclude": {"default": null, "description": "A list of field names to not render.", "items": {}, "title": "Render Exclude", "type": "array"}, "is_public": {"default": null, "description": "A boolean if hook is public / callable from outside the provider).", "title": "Is Public", "type": "boolean"}, "skip_output": {"default": false, "description": "A flag to skip the output and not set the key. Can also be set within a hook call.", "title": "Skip Output", "type": "boolean"}, "args": {"default": ["start", "end", "increment"], "items": {}, "title": "Args", "type": "array"}, "kwargs": {"default": null, "description": "A field name of type dict to map additional arguments to.", "title": "Kwargs", "type": "string"}, "hook_name": {"default": "range", "title": "Hook Name", "type": "string"}, "start": {"default": 0, "description": "Starting number.", "title": "Start", "type": "integer"}, "end": {"default": null, "description": "Ending number.", "title": "End", "type": "integer"}, "increment": {"default": null, "description": "The increment in the range - when start > end, defaults to -1..", "title": "Increment", "type": "integer"}}, "title": "RangeHook", "type": "object"}]